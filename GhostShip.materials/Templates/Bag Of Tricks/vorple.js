/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/browserfs/dist/browserfs.js":
/*!**************************************************!*\
  !*** ./node_modules/browserfs/dist/browserfs.js ***!
  \**************************************************/
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_541__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_541__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_541__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_541__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_541__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_541__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __nested_webpack_require_1821__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, module, process) {'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var buffer = __nested_webpack_require_1821__(2);
	var path = __nested_webpack_require_1821__(9);
	
	/**
	 * Standard libc error codes. Add more to this enum and ErrorStrings as they are
	 * needed.
	 * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
	 */
	/**
	 * Standard libc error codes. Add more to this enum and ErrorStrings as they are
	 * needed.
	 * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
	 */ var ErrorCode;
	(function (ErrorCode) {
	    ErrorCode[ErrorCode["EPERM"] = 1] = "EPERM";
	    ErrorCode[ErrorCode["ENOENT"] = 2] = "ENOENT";
	    ErrorCode[ErrorCode["EIO"] = 5] = "EIO";
	    ErrorCode[ErrorCode["EBADF"] = 9] = "EBADF";
	    ErrorCode[ErrorCode["EACCES"] = 13] = "EACCES";
	    ErrorCode[ErrorCode["EBUSY"] = 16] = "EBUSY";
	    ErrorCode[ErrorCode["EEXIST"] = 17] = "EEXIST";
	    ErrorCode[ErrorCode["ENOTDIR"] = 20] = "ENOTDIR";
	    ErrorCode[ErrorCode["EISDIR"] = 21] = "EISDIR";
	    ErrorCode[ErrorCode["EINVAL"] = 22] = "EINVAL";
	    ErrorCode[ErrorCode["EFBIG"] = 27] = "EFBIG";
	    ErrorCode[ErrorCode["ENOSPC"] = 28] = "ENOSPC";
	    ErrorCode[ErrorCode["EROFS"] = 30] = "EROFS";
	    ErrorCode[ErrorCode["ENOTEMPTY"] = 39] = "ENOTEMPTY";
	    ErrorCode[ErrorCode["ENOTSUP"] = 95] = "ENOTSUP";
	})(ErrorCode || (ErrorCode = {}));
	/* tslint:disable:variable-name */
	/**
	 * Strings associated with each error code.
	 * @hidden
	 */
	var ErrorStrings = {};
	ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';
	ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';
	ErrorStrings[ErrorCode.EIO] = 'Input/output error.';
	ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';
	ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';
	ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';
	ErrorStrings[ErrorCode.EEXIST] = 'File exists.';
	ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';
	ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';
	ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';
	ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';
	ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';
	ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';
	ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';
	ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';
	/* tslint:enable:variable-name */
	/**
	 * Represents a BrowserFS error. Passed back to applications after a failed
	 * call to the BrowserFS API.
	 */
	var ApiError = (function (Error) {
	     function ApiError(type, message, path$$1) {
	        if ( message === void 0 ) message = ErrorStrings[type];
	
	        Error.call(this, message);
	        // Unsupported.
	        this.syscall = "";
	        this.errno = type;
	        this.code = ErrorCode[type];
	        this.path = path$$1;
	        this.stack = new Error().stack;
	        this.message = "Error: " + (this.code) + ": " + message + (this.path ? (", '" + (this.path) + "'") : '');
	    }
	
	     if ( Error ) ApiError.__proto__ = Error;
	     ApiError.prototype = Object.create( Error && Error.prototype );
	     ApiError.prototype.constructor = ApiError;
	    ApiError.fromJSON = function fromJSON (json) {
	        var err = new ApiError(0);
	        err.errno = json.errno;
	        err.code = json.code;
	        err.path = json.path;
	        err.stack = json.stack;
	        err.message = json.message;
	        return err;
	    };
	    /**
	     * Creates an ApiError object from a buffer.
	     */
	    ApiError.fromBuffer = function fromBuffer (buffer$$1, i) {
	        if ( i === void 0 ) i = 0;
	
	        return ApiError.fromJSON(JSON.parse(buffer$$1.toString('utf8', i + 4, i + 4 + buffer$$1.readUInt32LE(i))));
	    };
	    ApiError.FileError = function FileError (code, p) {
	        return new ApiError(code, ErrorStrings[code], p);
	    };
	    ApiError.ENOENT = function ENOENT (path$$1) {
	        return this.FileError(ErrorCode.ENOENT, path$$1);
	    };
	    ApiError.EEXIST = function EEXIST (path$$1) {
	        return this.FileError(ErrorCode.EEXIST, path$$1);
	    };
	    ApiError.EISDIR = function EISDIR (path$$1) {
	        return this.FileError(ErrorCode.EISDIR, path$$1);
	    };
	    ApiError.ENOTDIR = function ENOTDIR (path$$1) {
	        return this.FileError(ErrorCode.ENOTDIR, path$$1);
	    };
	    ApiError.EPERM = function EPERM (path$$1) {
	        return this.FileError(ErrorCode.EPERM, path$$1);
	    };
	    ApiError.ENOTEMPTY = function ENOTEMPTY (path$$1) {
	        return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
	    };
	    /**
	     * @return A friendly error message.
	     */
	    ApiError.prototype.toString = function toString () {
	        return this.message;
	    };
	    ApiError.prototype.toJSON = function toJSON () {
	        return {
	            errno: this.errno,
	            code: this.code,
	            path: this.path,
	            stack: this.stack,
	            message: this.message
	        };
	    };
	    /**
	     * Writes the API error into a buffer.
	     */
	    ApiError.prototype.writeToBuffer = function writeToBuffer (buffer$$1, i) {
	        if ( buffer$$1 === void 0 ) buffer$$1 = Buffer.alloc(this.bufferSize());
	        if ( i === void 0 ) i = 0;
	
	        var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i + 4);
	        buffer$$1.writeUInt32LE(bytesWritten, i);
	        return buffer$$1;
	    };
	    /**
	     * The size of the API error in buffer-form in bytes.
	     */
	    ApiError.prototype.bufferSize = function bufferSize () {
	        // 4 bytes for string length.
	        return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));
	    };
	
	     return ApiError;
	 }(Error));
	
	
	var api_error = Object.freeze({
		get ErrorCode () { return ErrorCode; },
		ErrorStrings: ErrorStrings,
		ApiError: ApiError
	});
	
	var ActionType;
	(function (ActionType) {
	    // Indicates that the code should not do anything.
	    ActionType[ActionType["NOP"] = 0] = "NOP";
	    // Indicates that the code should throw an exception.
	    ActionType[ActionType["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION";
	    // Indicates that the code should truncate the file, but only if it is a file.
	    ActionType[ActionType["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE";
	    // Indicates that the code should create the file.
	    ActionType[ActionType["CREATE_FILE"] = 3] = "CREATE_FILE";
	})(ActionType || (ActionType = {}));
	/**
	 * Represents one of the following file flags. A convenience object.
	 *
	 * * `'r'` - Open file for reading. An exception occurs if the file does not exist.
	 * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.
	 * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.
	 * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.
	 * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).
	 * * `'wx'` - Like 'w' but opens the file in exclusive mode.
	 * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).
	 * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.
	 * * `'a'` - Open file for appending. The file is created if it does not exist.
	 * * `'ax'` - Like 'a' but opens the file in exclusive mode.
	 * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.
	 * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.
	 *
	 * Exclusive mode ensures that the file path is newly created.
	 */
	var FileFlag = function FileFlag(flagStr) {
	    this.flagStr = flagStr;
	    if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
	    }
	};
	/**
	 * Get an object representing the given file flag.
	 * @param modeStr The string representing the flag
	 * @return The FileFlag object representing the flag
	 * @throw when the flag string is invalid
	 */
	FileFlag.getFileFlag = function getFileFlag (flagStr) {
	    // Check cache first.
	    if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
	        return FileFlag.flagCache[flagStr];
	    }
	    return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
	};
	/**
	 * Get the underlying flag string for this flag.
	 */
	FileFlag.prototype.getFlagString = function getFlagString () {
	    return this.flagStr;
	};
	/**
	 * Returns true if the file is readable.
	 */
	FileFlag.prototype.isReadable = function isReadable () {
	    return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;
	};
	/**
	 * Returns true if the file is writeable.
	 */
	FileFlag.prototype.isWriteable = function isWriteable () {
	    return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;
	};
	/**
	 * Returns true if the file mode should truncate.
	 */
	FileFlag.prototype.isTruncating = function isTruncating () {
	    return this.flagStr.indexOf('w') !== -1;
	};
	/**
	 * Returns true if the file is appendable.
	 */
	FileFlag.prototype.isAppendable = function isAppendable () {
	    return this.flagStr.indexOf('a') !== -1;
	};
	/**
	 * Returns true if the file is open in synchronous mode.
	 */
	FileFlag.prototype.isSynchronous = function isSynchronous () {
	    return this.flagStr.indexOf('s') !== -1;
	};
	/**
	 * Returns true if the file is open in exclusive mode.
	 */
	FileFlag.prototype.isExclusive = function isExclusive () {
	    return this.flagStr.indexOf('x') !== -1;
	};
	/**
	 * Returns one of the static fields on this object that indicates the
	 * appropriate response to the path existing.
	 */
	FileFlag.prototype.pathExistsAction = function pathExistsAction () {
	    if (this.isExclusive()) {
	        return ActionType.THROW_EXCEPTION;
	    }
	    else if (this.isTruncating()) {
	        return ActionType.TRUNCATE_FILE;
	    }
	    else {
	        return ActionType.NOP;
	    }
	};
	/**
	 * Returns one of the static fields on this object that indicates the
	 * appropriate response to the path not existing.
	 */
	FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction () {
	    if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {
	        return ActionType.CREATE_FILE;
	    }
	    else {
	        return ActionType.THROW_EXCEPTION;
	    }
	};
	// Contains cached FileMode instances.
	FileFlag.flagCache = {};
	// Array of valid mode strings.
	FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];
	
	/**
	 * Indicates the type of the given file. Applied to 'mode'.
	 */
	var FileType;
	(function (FileType) {
	    FileType[FileType["FILE"] = 32768] = "FILE";
	    FileType[FileType["DIRECTORY"] = 16384] = "DIRECTORY";
	    FileType[FileType["SYMLINK"] = 40960] = "SYMLINK";
	})(FileType || (FileType = {}));
	/**
	 * Emulation of Node's `fs.Stats` object.
	 *
	 * Attribute descriptions are from `man 2 stat'
	 * @see http://nodejs.org/api/fs.html#fs_class_fs_stats
	 * @see http://man7.org/linux/man-pages/man2/stat.2.html
	 */
	var Stats = function Stats(itemType, size, mode, atime, mtime, ctime) {
	    if ( atime === void 0 ) atime = new Date();
	    if ( mtime === void 0 ) mtime = new Date();
	    if ( ctime === void 0 ) ctime = new Date();
	
	    this.size = size;
	    this.atime = atime;
	    this.mtime = mtime;
	    this.ctime = ctime;
	    /**
	     * UNSUPPORTED ATTRIBUTES
	     * I assume no one is going to need these details, although we could fake
	     * appropriate values if need be.
	     */
	    // ID of device containing file
	    this.dev = 0;
	    // inode number
	    this.ino = 0;
	    // device ID (if special file)
	    this.rdev = 0;
	    // number of hard links
	    this.nlink = 1;
	    // blocksize for file system I/O
	    this.blksize = 4096;
	    // @todo Maybe support these? atm, it's a one-user filesystem.
	    // user ID of owner
	    this.uid = 0;
	    // group ID of owner
	    this.gid = 0;
	    // time file was created (currently unsupported)
	    this.birthtime = new Date(0);
	    // XXX: Some file systems stash data on stats objects.
	    this.fileData = null;
	    if (!mode) {
	        switch (itemType) {
	            case FileType.FILE:
	                this.mode = 0x1a4;
	                break;
	            case FileType.DIRECTORY:
	            default:
	                this.mode = 0x1ff;
	        }
	    }
	    else {
	        this.mode = mode;
	    }
	    // number of 512B blocks allocated
	    this.blocks = Math.ceil(size / 512);
	    // Check if mode also includes top-most bits, which indicate the file's
	    // type.
	    if (this.mode < 0x1000) {
	        this.mode |= itemType;
	    }
	};
	Stats.fromBuffer = function fromBuffer (buffer$$1) {
	    var size = buffer$$1.readUInt32LE(0), mode = buffer$$1.readUInt32LE(4), atime = buffer$$1.readDoubleLE(8), mtime = buffer$$1.readDoubleLE(16), ctime = buffer$$1.readDoubleLE(24);
	    return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));
	};
	Stats.prototype.toBuffer = function toBuffer () {
	    var buffer$$1 = Buffer.alloc(32);
	    buffer$$1.writeUInt32LE(this.size, 0);
	    buffer$$1.writeUInt32LE(this.mode, 4);
	    buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
	    buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
	    buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
	    return buffer$$1;
	};
	/**
	 * **Nonstandard**: Clone the stats object.
	 * @return [BrowserFS.node.fs.Stats]
	 */
	Stats.prototype.clone = function clone () {
	    return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);
	};
	/**
	 * @return [Boolean] True if this item is a file.
	 */
	Stats.prototype.isFile = function isFile () {
	    return (this.mode & 0xF000) === FileType.FILE;
	};
	/**
	 * @return [Boolean] True if this item is a directory.
	 */
	Stats.prototype.isDirectory = function isDirectory () {
	    return (this.mode & 0xF000) === FileType.DIRECTORY;
	};
	/**
	 * @return [Boolean] True if this item is a symbolic link (only valid through lstat)
	 */
	Stats.prototype.isSymbolicLink = function isSymbolicLink () {
	    return (this.mode & 0xF000) === FileType.SYMLINK;
	};
	/**
	 * Change the mode of the file. We use this helper function to prevent messing
	 * up the type of the file, which is encoded in mode.
	 */
	Stats.prototype.chmod = function chmod (mode) {
	    this.mode = (this.mode & 0xF000) | mode;
	};
	// We don't support the following types of files.
	Stats.prototype.isSocket = function isSocket () {
	    return false;
	};
	Stats.prototype.isBlockDevice = function isBlockDevice () {
	    return false;
	};
	Stats.prototype.isCharacterDevice = function isCharacterDevice () {
	    return false;
	};
	Stats.prototype.isFIFO = function isFIFO () {
	    return false;
	};
	
	/**
	 * Wraps a callback function. Used for unit testing. Defaults to a NOP.
	 * @hidden
	 */
	var wrapCb = function (cb, numArgs) {
	    return cb;
	};
	/**
	 * @hidden
	 */
	function assertRoot(fs) {
	    if (fs) {
	        return fs;
	    }
	    throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
	}
	/**
	 * @hidden
	 */
	function normalizeMode(mode, def) {
	    switch (typeof mode) {
	        case 'number':
	            // (path, flag, mode, cb?)
	            return mode;
	        case 'string':
	            // (path, flag, modeString, cb?)
	            var trueMode = parseInt(mode, 8);
	            if (!isNaN(trueMode)) {
	                return trueMode;
	            }
	            // Invalid string.
	            return def;
	        default:
	            return def;
	    }
	}
	/**
	 * @hidden
	 */
	function normalizeTime(time) {
	    if (time instanceof Date) {
	        return time;
	    }
	    else if (typeof time === 'number') {
	        return new Date(time * 1000);
	    }
	    else {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
	    }
	}
	/**
	 * @hidden
	 */
	function normalizePath(p) {
	    // Node doesn't allow null characters in paths.
	    if (p.indexOf('\u0000') >= 0) {
	        throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');
	    }
	    else if (p === '') {
	        throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');
	    }
	    return path.resolve(p);
	}
	/**
	 * @hidden
	 */
	function normalizeOptions(options, defEnc, defFlag, defMode) {
	    switch (typeof options) {
	        case 'object':
	            return {
	                encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,
	                flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,
	                mode: normalizeMode(options['mode'], defMode)
	            };
	        case 'string':
	            return {
	                encoding: options,
	                flag: defFlag,
	                mode: defMode
	            };
	        default:
	            return {
	                encoding: defEnc,
	                flag: defFlag,
	                mode: defMode
	            };
	    }
	}
	/**
	 * The default callback is a NOP.
	 * @hidden
	 * @private
	 */
	function nopCb() {
	    // NOP.
	}
	/**
	 * The node frontend to all filesystems.
	 * This layer handles:
	 *
	 * * Sanity checking inputs.
	 * * Normalizing paths.
	 * * Resetting stack depth for asynchronous operations which may not go through
	 *   the browser by wrapping all input callbacks using `setImmediate`.
	 * * Performing the requested operation through the filesystem or the file
	 *   descriptor, as appropriate.
	 * * Handling optional arguments and setting default arguments.
	 * @see http://nodejs.org/api/fs.html
	 */
	var FS = function FS() {
	    /* tslint:enable:variable-name */
	    this.F_OK = 0;
	    this.R_OK = 4;
	    this.W_OK = 2;
	    this.X_OK = 1;
	    this.root = null;
	    this.fdMap = {};
	    this.nextFd = 100;
	};
	FS.prototype.initialize = function initialize (rootFS) {
	    if (!rootFS.constructor.isAvailable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');
	    }
	    return this.root = rootFS;
	};
	/**
	 * converts Date or number to a fractional UNIX timestamp
	 * Grabbed from NodeJS sources (lib/fs.js)
	 */
	FS.prototype._toUnixTimestamp = function _toUnixTimestamp (time) {
	    if (typeof time === 'number') {
	        return time;
	    }
	    else if (time instanceof Date) {
	        return time.getTime() / 1000;
	    }
	    throw new Error("Cannot parse time: " + time);
	};
	/**
	 * **NONSTANDARD**: Grab the FileSystem instance that backs this API.
	 * @return [BrowserFS.FileSystem | null] Returns null if the file system has
	 *   not been initialized.
	 */
	FS.prototype.getRootFS = function getRootFS () {
	    if (this.root) {
	        return this.root;
	    }
	    else {
	        return null;
	    }
	};
	// FILE OR DIRECTORY METHODS
	/**
	 * Asynchronous rename. No arguments other than a possible exception are given
	 * to the completion callback.
	 * @param oldPath
	 * @param newPath
	 * @param callback
	 */
	FS.prototype.rename = function rename (oldPath, newPath, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous rename.
	 * @param oldPath
	 * @param newPath
	 */
	FS.prototype.renameSync = function renameSync (oldPath, newPath) {
	    assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
	};
	/**
	 * Test whether or not the given path exists by checking with the file system.
	 * Then call the callback argument with either true or false.
	 * @example Sample invocation
	 *   fs.exists('/etc/passwd', function (exists) {
	 * util.debug(exists ? "it's there" : "no passwd!");
	 *   });
	 * @param path
	 * @param callback
	 */
	FS.prototype.exists = function exists (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
	    }
	    catch (e) {
	        // Doesn't return an error. If something bad happens, we assume it just
	        // doesn't exist.
	        return newCb(false);
	    }
	};
	/**
	 * Test whether or not the given path exists by checking with the file system.
	 * @param path
	 * @return [boolean]
	 */
	FS.prototype.existsSync = function existsSync (path$$1) {
	    try {
	        return assertRoot(this.root).existsSync(normalizePath(path$$1));
	    }
	    catch (e) {
	        // Doesn't return an error. If something bad happens, we assume it just
	        // doesn't exist.
	        return false;
	    }
	};
	/**
	 * Asynchronous `stat`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.stat = function stat (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `stat`.
	 * @param path
	 * @return [BrowserFS.node.fs.Stats]
	 */
	FS.prototype.statSync = function statSync (path$$1) {
	    return assertRoot(this.root).statSync(normalizePath(path$$1), false);
	};
	/**
	 * Asynchronous `lstat`.
	 * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
	 * then the link itself is stat-ed, not the file that it refers to.
	 * @param path
	 * @param callback
	 */
	FS.prototype.lstat = function lstat (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `lstat`.
	 * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
	 * then the link itself is stat-ed, not the file that it refers to.
	 * @param path
	 * @return [BrowserFS.node.fs.Stats]
	 */
	FS.prototype.lstatSync = function lstatSync (path$$1) {
	    return assertRoot(this.root).statSync(normalizePath(path$$1), true);
	};
	FS.prototype.truncate = function truncate (path$$1, arg2, cb) {
	        if ( arg2 === void 0 ) arg2 = 0;
	        if ( cb === void 0 ) cb = nopCb;
	
	    var len = 0;
	    if (typeof arg2 === 'function') {
	        cb = arg2;
	    }
	    else if (typeof arg2 === 'number') {
	        len = arg2;
	    }
	    var newCb = wrapCb(cb, 1);
	    try {
	        if (len < 0) {
	            throw new ApiError(ErrorCode.EINVAL);
	        }
	        return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `truncate`.
	 * @param path
	 * @param len
	 */
	FS.prototype.truncateSync = function truncateSync (path$$1, len) {
	        if ( len === void 0 ) len = 0;
	
	    if (len < 0) {
	        throw new ApiError(ErrorCode.EINVAL);
	    }
	    return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
	};
	/**
	 * Asynchronous `unlink`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.unlink = function unlink (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	/**
	 * Synchronous `unlink`.
	 * @param path
	 */
	FS.prototype.unlinkSync = function unlinkSync (path$$1) {
	    return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
	};
	FS.prototype.open = function open (path$$1, flag, arg2, cb) {
	        var this$1 = this;
	        if ( cb === void 0 ) cb = nopCb;
	
	    var mode = normalizeMode(arg2, 0x1a4);
	    cb = typeof arg2 === 'function' ? arg2 : cb;
	    var newCb = wrapCb(cb, 2);
	    try {
	        assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function (e, file) {
	            if (file) {
	                newCb(e, this$1.getFdForFile(file));
	            }
	            else {
	                newCb(e);
	            }
	        });
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous file open.
	 * @see http://www.manpagez.com/man/2/open/
	 * @param path
	 * @param flags
	 * @param mode defaults to `0644`
	 * @return [BrowserFS.File]
	 */
	FS.prototype.openSync = function openSync (path$$1, flag, mode) {
	        if ( mode === void 0 ) mode = 0x1a4;
	
	    return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));
	};
	FS.prototype.readFile = function readFile (filename, arg2, cb) {
	        if ( arg2 === void 0 ) arg2 = {};
	        if ( cb === void 0 ) cb = nopCb;
	
	    var options = normalizeOptions(arg2, null, 'r', null);
	    cb = typeof arg2 === 'function' ? arg2 : cb;
	    var newCb = wrapCb(cb, 2);
	    try {
	        var flag = FileFlag.getFileFlag(options['flag']);
	        if (!flag.isReadable()) {
	            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));
	        }
	        return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	FS.prototype.readFileSync = function readFileSync (filename, arg2) {
	        if ( arg2 === void 0 ) arg2 = {};
	
	    var options = normalizeOptions(arg2, null, 'r', null);
	    var flag = FileFlag.getFileFlag(options.flag);
	    if (!flag.isReadable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');
	    }
	    return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);
	};
	FS.prototype.writeFile = function writeFile (filename, data, arg3, cb) {
	        if ( arg3 === void 0 ) arg3 = {};
	        if ( cb === void 0 ) cb = nopCb;
	
	    var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
	    cb = typeof arg3 === 'function' ? arg3 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        var flag = FileFlag.getFileFlag(options.flag);
	        if (!flag.isWriteable()) {
	            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));
	        }
	        return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
	    }
	    catch (e) {
	        return newCb(e);
	    }
	};
	FS.prototype.writeFileSync = function writeFileSync (filename, data, arg3) {
	    var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
	    var flag = FileFlag.getFileFlag(options.flag);
	    if (!flag.isWriteable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');
	    }
	    return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
	};
	FS.prototype.appendFile = function appendFile (filename, data, arg3, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
	    cb = typeof arg3 === 'function' ? arg3 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        var flag = FileFlag.getFileFlag(options.flag);
	        if (!flag.isAppendable()) {
	            return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));
	        }
	        assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	FS.prototype.appendFileSync = function appendFileSync (filename, data, arg3) {
	    var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
	    var flag = FileFlag.getFileFlag(options.flag);
	    if (!flag.isAppendable()) {
	        throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');
	    }
	    return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
	};
	// FILE DESCRIPTOR METHODS
	/**
	 * Asynchronous `fstat`.
	 * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
	 * specified by the file descriptor `fd`.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.fstat = function fstat (fd, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        var file = this.fd2file(fd);
	        file.stat(newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `fstat`.
	 * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
	 * specified by the file descriptor `fd`.
	 * @param fd
	 * @return [BrowserFS.node.fs.Stats]
	 */
	FS.prototype.fstatSync = function fstatSync (fd) {
	    return this.fd2file(fd).statSync();
	};
	/**
	 * Asynchronous close.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.close = function close (fd, cb) {
	        var this$1 = this;
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        this.fd2file(fd).close(function (e) {
	            if (!e) {
	                this$1.closeFd(fd);
	            }
	            newCb(e);
	        });
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous close.
	 * @param fd
	 */
	FS.prototype.closeSync = function closeSync (fd) {
	    this.fd2file(fd).closeSync();
	    this.closeFd(fd);
	};
	FS.prototype.ftruncate = function ftruncate (fd, arg2, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var length = typeof arg2 === 'number' ? arg2 : 0;
	    cb = typeof arg2 === 'function' ? arg2 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        var file = this.fd2file(fd);
	        if (length < 0) {
	            throw new ApiError(ErrorCode.EINVAL);
	        }
	        file.truncate(length, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous ftruncate.
	 * @param fd
	 * @param len
	 */
	FS.prototype.ftruncateSync = function ftruncateSync (fd, len) {
	        if ( len === void 0 ) len = 0;
	
	    var file = this.fd2file(fd);
	    if (len < 0) {
	        throw new ApiError(ErrorCode.EINVAL);
	    }
	    file.truncateSync(len);
	};
	/**
	 * Asynchronous fsync.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.fsync = function fsync (fd, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        this.fd2file(fd).sync(newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous fsync.
	 * @param fd
	 */
	FS.prototype.fsyncSync = function fsyncSync (fd) {
	    this.fd2file(fd).syncSync();
	};
	/**
	 * Asynchronous fdatasync.
	 * @param fd
	 * @param callback
	 */
	FS.prototype.fdatasync = function fdatasync (fd, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        this.fd2file(fd).datasync(newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous fdatasync.
	 * @param fd
	 */
	FS.prototype.fdatasyncSync = function fdatasyncSync (fd) {
	    this.fd2file(fd).datasyncSync();
	};
	FS.prototype.write = function write (fd, arg2, arg3, arg4, arg5, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var buffer$$1, offset, length, position = null;
	    if (typeof arg2 === 'string') {
	        // Signature 1: (fd, string, [position?, [encoding?]], cb?)
	        var encoding = 'utf8';
	        switch (typeof arg3) {
	            case 'function':
	                // (fd, string, cb)
	                cb = arg3;
	                break;
	            case 'number':
	                // (fd, string, position, encoding?, cb?)
	                position = arg3;
	                encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
	                cb = typeof arg5 === 'function' ? arg5 : cb;
	                break;
	            default:
	                // ...try to find the callback and get out of here!
	                cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;
	                return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));
	        }
	        buffer$$1 = Buffer.from(arg2, encoding);
	        offset = 0;
	        length = buffer$$1.length;
	    }
	    else {
	        // Signature 2: (fd, buffer, offset, length, position?, cb?)
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = typeof arg5 === 'number' ? arg5 : null;
	        cb = typeof arg5 === 'function' ? arg5 : cb;
	    }
	    var newCb = wrapCb(cb, 3);
	    try {
	        var file = this.fd2file(fd);
	        if (position === undefined || position === null) {
	            position = file.getPos();
	        }
	        file.write(buffer$$1, offset, length, position, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	FS.prototype.writeSync = function writeSync (fd, arg2, arg3, arg4, arg5) {
	    var buffer$$1, offset = 0, length, position;
	    if (typeof arg2 === 'string') {
	        // Signature 1: (fd, string, [position?, [encoding?]])
	        position = typeof arg3 === 'number' ? arg3 : null;
	        var encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
	        offset = 0;
	        buffer$$1 = Buffer.from(arg2, encoding);
	        length = buffer$$1.length;
	    }
	    else {
	        // Signature 2: (fd, buffer, offset, length, position?)
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = typeof arg5 === 'number' ? arg5 : null;
	    }
	    var file = this.fd2file(fd);
	    if (position === undefined || position === null) {
	        position = file.getPos();
	    }
	    return file.writeSync(buffer$$1, offset, length, position);
	};
	FS.prototype.read = function read (fd, arg2, arg3, arg4, arg5, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var position, offset, length, buffer$$1, newCb;
	    if (typeof arg2 === 'number') {
	        // legacy interface
	        // (fd, length, position, encoding, callback)
	        length = arg2;
	        position = arg3;
	        var encoding = arg4;
	        cb = typeof arg5 === 'function' ? arg5 : cb;
	        offset = 0;
	        buffer$$1 = Buffer.alloc(length);
	        // XXX: Inefficient.
	        // Wrap the cb so we shelter upper layers of the API from these
	        // shenanigans.
	        newCb = wrapCb(function (err, bytesRead, buf) {
	            if (err) {
	                return cb(err);
	            }
	            cb(err, buf.toString(encoding), bytesRead);
	        }, 3);
	    }
	    else {
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = arg5;
	        newCb = wrapCb(cb, 3);
	    }
	    try {
	        var file = this.fd2file(fd);
	        if (position === undefined || position === null) {
	            position = file.getPos();
	        }
	        file.read(buffer$$1, offset, length, position, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	FS.prototype.readSync = function readSync (fd, arg2, arg3, arg4, arg5) {
	    var shenanigans = false;
	    var buffer$$1, offset, length, position, encoding = 'utf8';
	    if (typeof arg2 === 'number') {
	        length = arg2;
	        position = arg3;
	        encoding = arg4;
	        offset = 0;
	        buffer$$1 = Buffer.alloc(length);
	        shenanigans = true;
	    }
	    else {
	        buffer$$1 = arg2;
	        offset = arg3;
	        length = arg4;
	        position = arg5;
	    }
	    var file = this.fd2file(fd);
	    if (position === undefined || position === null) {
	        position = file.getPos();
	    }
	    var rv = file.readSync(buffer$$1, offset, length, position);
	    if (!shenanigans) {
	        return rv;
	    }
	    else {
	        return [buffer$$1.toString(encoding), rv];
	    }
	};
	/**
	 * Asynchronous `fchown`.
	 * @param fd
	 * @param uid
	 * @param gid
	 * @param callback
	 */
	FS.prototype.fchown = function fchown (fd, uid, gid, callback) {
	        if ( callback === void 0 ) callback = nopCb;
	
	    var newCb = wrapCb(callback, 1);
	    try {
	        this.fd2file(fd).chown(uid, gid, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `fchown`.
	 * @param fd
	 * @param uid
	 * @param gid
	 */
	FS.prototype.fchownSync = function fchownSync (fd, uid, gid) {
	    this.fd2file(fd).chownSync(uid, gid);
	};
	/**
	 * Asynchronous `fchmod`.
	 * @param fd
	 * @param mode
	 * @param callback
	 */
	FS.prototype.fchmod = function fchmod (fd, mode, cb) {
	    var newCb = wrapCb(cb, 1);
	    try {
	        var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
	        this.fd2file(fd).chmod(numMode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `fchmod`.
	 * @param fd
	 * @param mode
	 */
	FS.prototype.fchmodSync = function fchmodSync (fd, mode) {
	    var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
	    this.fd2file(fd).chmodSync(numMode);
	};
	/**
	 * Change the file timestamps of a file referenced by the supplied file
	 * descriptor.
	 * @param fd
	 * @param atime
	 * @param mtime
	 * @param callback
	 */
	FS.prototype.futimes = function futimes (fd, atime, mtime, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        var file = this.fd2file(fd);
	        if (typeof atime === 'number') {
	            atime = new Date(atime * 1000);
	        }
	        if (typeof mtime === 'number') {
	            mtime = new Date(mtime * 1000);
	        }
	        file.utimes(atime, mtime, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Change the file timestamps of a file referenced by the supplied file
	 * descriptor.
	 * @param fd
	 * @param atime
	 * @param mtime
	 */
	FS.prototype.futimesSync = function futimesSync (fd, atime, mtime) {
	    this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
	};
	// DIRECTORY-ONLY METHODS
	/**
	 * Asynchronous `rmdir`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.rmdir = function rmdir (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).rmdir(path$$1, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `rmdir`.
	 * @param path
	 */
	FS.prototype.rmdirSync = function rmdirSync (path$$1) {
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).rmdirSync(path$$1);
	};
	/**
	 * Asynchronous `mkdir`.
	 * @param path
	 * @param mode defaults to `0777`
	 * @param callback
	 */
	FS.prototype.mkdir = function mkdir (path$$1, mode, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    if (typeof mode === 'function') {
	        cb = mode;
	        mode = 0x1ff;
	    }
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).mkdir(path$$1, mode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `mkdir`.
	 * @param path
	 * @param mode defaults to `0777`
	 */
	FS.prototype.mkdirSync = function mkdirSync (path$$1, mode) {
	    assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 0x1ff));
	};
	/**
	 * Asynchronous `readdir`. Reads the contents of a directory.
	 * The callback gets two arguments `(err, files)` where `files` is an array of
	 * the names of the files in the directory excluding `'.'` and `'..'`.
	 * @param path
	 * @param callback
	 */
	FS.prototype.readdir = function readdir (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).readdir(path$$1, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `readdir`. Reads the contents of a directory.
	 * @param path
	 * @return [String[]]
	 */
	FS.prototype.readdirSync = function readdirSync (path$$1) {
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).readdirSync(path$$1);
	};
	// SYMLINK METHODS
	/**
	 * Asynchronous `link`.
	 * @param srcpath
	 * @param dstpath
	 * @param callback
	 */
	FS.prototype.link = function link (srcpath, dstpath, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        srcpath = normalizePath(srcpath);
	        dstpath = normalizePath(dstpath);
	        assertRoot(this.root).link(srcpath, dstpath, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `link`.
	 * @param srcpath
	 * @param dstpath
	 */
	FS.prototype.linkSync = function linkSync (srcpath, dstpath) {
	    srcpath = normalizePath(srcpath);
	    dstpath = normalizePath(dstpath);
	    return assertRoot(this.root).linkSync(srcpath, dstpath);
	};
	FS.prototype.symlink = function symlink (srcpath, dstpath, arg3, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var type = typeof arg3 === 'string' ? arg3 : 'file';
	    cb = typeof arg3 === 'function' ? arg3 : cb;
	    var newCb = wrapCb(cb, 1);
	    try {
	        if (type !== 'file' && type !== 'dir') {
	            return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
	        }
	        srcpath = normalizePath(srcpath);
	        dstpath = normalizePath(dstpath);
	        assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `symlink`.
	 * @param srcpath
	 * @param dstpath
	 * @param type can be either `'dir'` or `'file'` (default is `'file'`)
	 */
	FS.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	    if (!type) {
	        type = 'file';
	    }
	    else if (type !== 'file' && type !== 'dir') {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
	    }
	    srcpath = normalizePath(srcpath);
	    dstpath = normalizePath(dstpath);
	    return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
	};
	/**
	 * Asynchronous readlink.
	 * @param path
	 * @param callback
	 */
	FS.prototype.readlink = function readlink (path$$1, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 2);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).readlink(path$$1, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous readlink.
	 * @param path
	 * @return [String]
	 */
	FS.prototype.readlinkSync = function readlinkSync (path$$1) {
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).readlinkSync(path$$1);
	};
	// PROPERTY OPERATIONS
	/**
	 * Asynchronous `chown`.
	 * @param path
	 * @param uid
	 * @param gid
	 * @param callback
	 */
	FS.prototype.chown = function chown (path$$1, uid, gid, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `chown`.
	 * @param path
	 * @param uid
	 * @param gid
	 */
	FS.prototype.chownSync = function chownSync (path$$1, uid, gid) {
	    path$$1 = normalizePath(path$$1);
	    assertRoot(this.root).chownSync(path$$1, false, uid, gid);
	};
	/**
	 * Asynchronous `lchown`.
	 * @param path
	 * @param uid
	 * @param gid
	 * @param callback
	 */
	FS.prototype.lchown = function lchown (path$$1, uid, gid, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `lchown`.
	 * @param path
	 * @param uid
	 * @param gid
	 */
	FS.prototype.lchownSync = function lchownSync (path$$1, uid, gid) {
	    path$$1 = normalizePath(path$$1);
	    assertRoot(this.root).chownSync(path$$1, true, uid, gid);
	};
	/**
	 * Asynchronous `chmod`.
	 * @param path
	 * @param mode
	 * @param callback
	 */
	FS.prototype.chmod = function chmod (path$$1, mode, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        var numMode = normalizeMode(mode, -1);
	        if (numMode < 0) {
	            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	        }
	        assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `chmod`.
	 * @param path
	 * @param mode
	 */
	FS.prototype.chmodSync = function chmodSync (path$$1, mode) {
	    var numMode = normalizeMode(mode, -1);
	    if (numMode < 0) {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	    }
	    path$$1 = normalizePath(path$$1);
	    assertRoot(this.root).chmodSync(path$$1, false, numMode);
	};
	/**
	 * Asynchronous `lchmod`.
	 * @param path
	 * @param mode
	 * @param callback
	 */
	FS.prototype.lchmod = function lchmod (path$$1, mode, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        var numMode = normalizeMode(mode, -1);
	        if (numMode < 0) {
	            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	        }
	        assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `lchmod`.
	 * @param path
	 * @param mode
	 */
	FS.prototype.lchmodSync = function lchmodSync (path$$1, mode) {
	    var numMode = normalizeMode(mode, -1);
	    if (numMode < 1) {
	        throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
	    }
	    assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
	};
	/**
	 * Change file timestamps of the file referenced by the supplied path.
	 * @param path
	 * @param atime
	 * @param mtime
	 * @param callback
	 */
	FS.prototype.utimes = function utimes (path$$1, atime, mtime, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var newCb = wrapCb(cb, 1);
	    try {
	        assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Change file timestamps of the file referenced by the supplied path.
	 * @param path
	 * @param atime
	 * @param mtime
	 */
	FS.prototype.utimesSync = function utimesSync (path$$1, atime, mtime) {
	    assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
	};
	FS.prototype.realpath = function realpath (path$$1, arg2, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    var cache = typeof (arg2) === 'object' ? arg2 : {};
	    cb = typeof (arg2) === 'function' ? arg2 : nopCb;
	    var newCb = wrapCb(cb, 2);
	    try {
	        path$$1 = normalizePath(path$$1);
	        assertRoot(this.root).realpath(path$$1, cache, newCb);
	    }
	    catch (e) {
	        newCb(e);
	    }
	};
	/**
	 * Synchronous `realpath`.
	 * @param path
	 * @param cache An object literal of mapped paths that can be used to
	 *   force a specific path resolution or avoid additional `fs.stat` calls for
	 *   known real paths.
	 * @return [String]
	 */
	FS.prototype.realpathSync = function realpathSync (path$$1, cache) {
	        if ( cache === void 0 ) cache = {};
	
	    path$$1 = normalizePath(path$$1);
	    return assertRoot(this.root).realpathSync(path$$1, cache);
	};
	FS.prototype.watchFile = function watchFile (filename, arg2, listener) {
	        if ( listener === void 0 ) listener = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.unwatchFile = function unwatchFile (filename, listener) {
	        if ( listener === void 0 ) listener = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.watch = function watch (filename, arg2, listener) {
	        if ( listener === void 0 ) listener = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.access = function access (path$$1, arg2, cb) {
	        if ( cb === void 0 ) cb = nopCb;
	
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.accessSync = function accessSync (path$$1, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.createReadStream = function createReadStream (path$$1, options) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	FS.prototype.createWriteStream = function createWriteStream (path$$1, options) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.
	 */
	FS.prototype.wrapCallbacks = function wrapCallbacks (cbWrapper) {
	    wrapCb = cbWrapper;
	};
	FS.prototype.getFdForFile = function getFdForFile (file) {
	    var fd = this.nextFd++;
	    this.fdMap[fd] = file;
	    return fd;
	};
	FS.prototype.fd2file = function fd2file (fd) {
	    var rv = this.fdMap[fd];
	    if (rv) {
	        return rv;
	    }
	    else {
	        throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');
	    }
	};
	FS.prototype.closeFd = function closeFd (fd) {
	    delete this.fdMap[fd];
	};
	
	/* tslint:disable:variable-name */
	// Exported fs.Stats.
	FS.Stats = Stats;
	
	// Manually export the individual public functions of fs.
	// Required because some code will invoke functions off of the module.
	// e.g.:
	// let writeFile = fs.writeFile;
	// writeFile(...)
	/**
	 * @hidden
	 */
	var fs = new FS();
	/**
	 * @hidden
	 */
	var _fsMock = {};
	/**
	 * @hidden
	 */
	var fsProto = FS.prototype;
	Object.keys(fsProto).forEach(function (key) {
	    if (typeof fs[key] === 'function') {
	        _fsMock[key] = function () {
	            return fs[key].apply(fs, arguments);
	        };
	    }
	    else {
	        _fsMock[key] = fs[key];
	    }
	});
	_fsMock['changeFSModule'] = function (newFs) {
	    fs = newFs;
	};
	_fsMock['getFSModule'] = function () {
	    return fs;
	};
	_fsMock['FS'] = FS;
	
	/*
	 * Levenshtein distance, from the `js-levenshtein` NPM module.
	 * Copied here to avoid complexity of adding another CommonJS module dependency.
	 */
	function _min(d0, d1, d2, bx, ay) {
	    return d0 < d1 || d2 < d1
	        ? d0 > d2
	            ? d2 + 1
	            : d0 + 1
	        : bx === ay
	            ? d1
	            : d1 + 1;
	}
	/**
	 * Calculates levenshtein distance.
	 * @param a
	 * @param b
	 */
	function levenshtein(a, b) {
	    if (a === b) {
	        return 0;
	    }
	    if (a.length > b.length) {
	        var tmp = a;
	        a = b;
	        b = tmp;
	    }
	    var la = a.length;
	    var lb = b.length;
	    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
	        la--;
	        lb--;
	    }
	    var offset = 0;
	    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
	        offset++;
	    }
	    la -= offset;
	    lb -= offset;
	    if (la === 0 || lb === 1) {
	        return lb;
	    }
	    var vector = new Array(la << 1);
	    for (var y = 0; y < la;) {
	        vector[la + y] = a.charCodeAt(offset + y);
	        vector[y] = ++y;
	    }
	    var x;
	    var d0;
	    var d1;
	    var d2;
	    var d3;
	    for (x = 0; (x + 3) < lb;) {
	        var bx0 = b.charCodeAt(offset + (d0 = x));
	        var bx1 = b.charCodeAt(offset + (d1 = x + 1));
	        var bx2 = b.charCodeAt(offset + (d2 = x + 2));
	        var bx3 = b.charCodeAt(offset + (d3 = x + 3));
	        var dd$1 = (x += 4);
	        for (var y$1 = 0; y$1 < la;) {
	            var ay = vector[la + y$1];
	            var dy = vector[y$1];
	            d0 = _min(dy, d0, d1, bx0, ay);
	            d1 = _min(d0, d1, d2, bx1, ay);
	            d2 = _min(d1, d2, d3, bx2, ay);
	            dd$1 = _min(d2, d3, dd$1, bx3, ay);
	            vector[y$1++] = dd$1;
	            d3 = d2;
	            d2 = d1;
	            d1 = d0;
	            d0 = dy;
	        }
	    }
	    var dd = 0;
	    for (; x < lb;) {
	        var bx0$1 = b.charCodeAt(offset + (d0 = x));
	        dd = ++x;
	        for (var y$2 = 0; y$2 < la; y$2++) {
	            var dy$1 = vector[y$2];
	            vector[y$2] = dd = dy$1 < d0 || dd < d0
	                ? dy$1 > dd ? dd + 1 : dy$1 + 1
	                : bx0$1 === vector[la + y$2]
	                    ? d0
	                    : d0 + 1;
	            d0 = dy$1;
	        }
	    }
	    return dd;
	}
	
	function deprecationMessage(print, fsName, opts) {
	    if (print) {
	        console.warn(("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + (JSON.stringify(opts)) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details."));
	    }
	}
	/**
	 * Checks for any IE version, including IE11 which removed MSIE from the
	 * userAgent string.
	 * @hidden
	 */
	var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf('Trident') !== -1);
	/**
	 * Check if we're in a web worker.
	 * @hidden
	 */
	var isWebWorker = typeof window === "undefined";
	/**
	 * Throws an exception. Called on code paths that should be impossible.
	 * @hidden
	 */
	function fail() {
	    throw new Error("BFS has reached an impossible code path; please file a bug.");
	}
	/**
	 * Synchronous recursive makedir.
	 * @hidden
	 */
	function mkdirpSync(p, mode, fs) {
	    if (!fs.existsSync(p)) {
	        mkdirpSync(path.dirname(p), mode, fs);
	        fs.mkdirSync(p, mode);
	    }
	}
	/**
	 * Converts a buffer into an array buffer. Attempts to do so in a
	 * zero-copy manner, e.g. the array references the same memory.
	 * @hidden
	 */
	function buffer2ArrayBuffer(buff) {
	    var u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;
	    if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
	        return u8.buffer;
	    }
	    else {
	        return u8.buffer.slice(u8offset, u8offset + u8Len);
	    }
	}
	/**
	 * Converts a buffer into a Uint8Array. Attempts to do so in a
	 * zero-copy manner, e.g. the array references the same memory.
	 * @hidden
	 */
	function buffer2Uint8array(buff) {
	    if (buff instanceof Uint8Array) {
	        // BFS & Node v4.0 buffers *are* Uint8Arrays.
	        return buff;
	    }
	    else {
	        // Uint8Arrays can be constructed from arrayish numbers.
	        // At this point, we assume this isn't a BFS array.
	        return new Uint8Array(buff);
	    }
	}
	/**
	 * Converts the given arrayish object into a Buffer. Attempts to
	 * be zero-copy.
	 * @hidden
	 */
	function arrayish2Buffer(arr) {
	    if (arr instanceof Buffer) {
	        return arr;
	    }
	    else if (arr instanceof Uint8Array) {
	        return uint8Array2Buffer(arr);
	    }
	    else {
	        return Buffer.from(arr);
	    }
	}
	/**
	 * Converts the given Uint8Array into a Buffer. Attempts to be zero-copy.
	 * @hidden
	 */
	function uint8Array2Buffer(u8) {
	    if (u8 instanceof Buffer) {
	        return u8;
	    }
	    else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
	        return arrayBuffer2Buffer(u8.buffer);
	    }
	    else {
	        return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);
	    }
	}
	/**
	 * Converts the given array buffer into a Buffer. Attempts to be
	 * zero-copy.
	 * @hidden
	 */
	function arrayBuffer2Buffer(ab) {
	    return Buffer.from(ab);
	}
	/**
	 * Copies a slice of the given buffer
	 * @hidden
	 */
	function copyingSlice(buff, start, end) {
	    if ( start === void 0 ) start = 0;
	    if ( end === void 0 ) end = buff.length;
	
	    if (start < 0 || end < 0 || end > buff.length || start > end) {
	        throw new TypeError(("Invalid slice bounds on buffer of length " + (buff.length) + ": [" + start + ", " + end + "]"));
	    }
	    if (buff.length === 0) {
	        // Avoid s0 corner case in ArrayBuffer case.
	        return emptyBuffer();
	    }
	    else {
	        var u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 0xFF;
	        buff[0] = newS0;
	        if (u8[0] === newS0) {
	            // Same memory. Revert & copy.
	            u8[0] = s0;
	            return uint8Array2Buffer(u8.slice(start, end));
	        }
	        else {
	            // Revert.
	            buff[0] = s0;
	            return uint8Array2Buffer(u8.subarray(start, end));
	        }
	    }
	}
	/**
	 * @hidden
	 */
	var emptyBuff = null;
	/**
	 * Returns an empty buffer.
	 * @hidden
	 */
	function emptyBuffer() {
	    if (emptyBuff) {
	        return emptyBuff;
	    }
	    return emptyBuff = Buffer.alloc(0);
	}
	/**
	 * Option validator for a Buffer file system option.
	 * @hidden
	 */
	function bufferValidator(v, cb) {
	    if (Buffer.isBuffer(v)) {
	        cb();
	    }
	    else {
	        cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
	    }
	}
	/**
	 * Checks that the given options object is valid for the file system options.
	 * @hidden
	 */
	function checkOptions(fsType, opts, cb) {
	    var optsInfo = fsType.Options;
	    var fsName = fsType.Name;
	    var pendingValidators = 0;
	    var callbackCalled = false;
	    var loopEnded = false;
	    function validatorCallback(e) {
	        if (!callbackCalled) {
	            if (e) {
	                callbackCalled = true;
	                cb(e);
	            }
	            pendingValidators--;
	            if (pendingValidators === 0 && loopEnded) {
	                cb();
	            }
	        }
	    }
	    // Check for required options.
	    var loop = function ( optName ) {
	        if (optsInfo.hasOwnProperty(optName)) {
	            var opt = optsInfo[optName];
	            var providedValue = opts[optName];
	            if (providedValue === undefined || providedValue === null) {
	                if (!opt.optional) {
	                    // Required option, not provided.
	                    // Any incorrect options provided? Which ones are close to the provided one?
	                    // (edit distance 5 === close)
	                    var incorrectOptions = Object.keys(opts).filter(function (o) { return !(o in optsInfo); }).map(function (a) {
	                        return { str: a, distance: levenshtein(optName, a) };
	                    }).filter(function (o) { return o.distance < 5; }).sort(function (a, b) { return a.distance - b.distance; });
	                    // Validators may be synchronous.
	                    if (callbackCalled) {
	                        return {};
	                    }
	                    callbackCalled = true;
	                    return { v: cb(new ApiError(ErrorCode.EINVAL, ("[" + fsName + "] Required option '" + optName + "' not provided." + (incorrectOptions.length > 0 ? (" You provided unrecognized option '" + (incorrectOptions[0].str) + "'; perhaps you meant to type '" + optName + "'.") : '') + "\nOption description: " + (opt.description)))) };
	                }
	                // Else: Optional option, not provided. That is OK.
	            }
	            else {
	                // Option provided! Check type.
	                var typeMatches = false;
	                if (Array.isArray(opt.type)) {
	                    typeMatches = opt.type.indexOf(typeof (providedValue)) !== -1;
	                }
	                else {
	                    typeMatches = typeof (providedValue) === opt.type;
	                }
	                if (!typeMatches) {
	                    // Validators may be synchronous.
	                    if (callbackCalled) {
	                        return {};
	                    }
	                    callbackCalled = true;
	                    return { v: cb(new ApiError(ErrorCode.EINVAL, ("[" + fsName + "] Value provided for option " + optName + " is not the proper type. Expected " + (Array.isArray(opt.type) ? ("one of {" + (opt.type.join(", ")) + "}") : opt.type) + ", but received " + (typeof (providedValue)) + "\nOption description: " + (opt.description)))) };
	                }
	                else if (opt.validator) {
	                    pendingValidators++;
	                    opt.validator(providedValue, validatorCallback);
	                }
	                // Otherwise: All good!
	            }
	        }
	    };
	
	    for (var optName in optsInfo) {
	        var returned = loop( optName );
	
	        if ( returned ) return returned.v;
	    }
	    loopEnded = true;
	    if (pendingValidators === 0 && !callbackCalled) {
	        cb();
	    }
	}
	
	
	var BFSUtils = Object.freeze({
		deprecationMessage: deprecationMessage,
		isIE: isIE,
		isWebWorker: isWebWorker,
		fail: fail,
		mkdirpSync: mkdirpSync,
		buffer2ArrayBuffer: buffer2ArrayBuffer,
		buffer2Uint8array: buffer2Uint8array,
		arrayish2Buffer: arrayish2Buffer,
		uint8Array2Buffer: uint8Array2Buffer,
		arrayBuffer2Buffer: arrayBuffer2Buffer,
		copyingSlice: copyingSlice,
		emptyBuffer: emptyBuffer,
		bufferValidator: bufferValidator,
		checkOptions: checkOptions
	});
	
	var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps(fs) {
	    this.fs = fs;
	    this.nodefs = fs.getNodeFS();
	    this.FS = fs.getFS();
	    this.PATH = fs.getPATH();
	    this.ERRNO_CODES = fs.getERRNO_CODES();
	};
	BFSEmscriptenStreamOps.prototype.open = function open (stream) {
	    var path$$1 = this.fs.realPath(stream.node);
	    var FS = this.FS;
	    try {
	        if (FS.isFile(stream.node.mode)) {
	            stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.close = function close (stream) {
	    var FS = this.FS;
	    try {
	        if (FS.isFile(stream.node.mode) && stream.nfd) {
	            this.nodefs.closeSync(stream.nfd);
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.read = function read (stream, buffer$$1, offset, length, position) {
	    // Avoid copying overhead by reading directly into buffer.
	    try {
	        return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
	    }
	    catch (e) {
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.write = function write (stream, buffer$$1, offset, length, position) {
	    // Avoid copying overhead.
	    try {
	        return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
	    }
	    catch (e) {
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenStreamOps.prototype.llseek = function llseek (stream, offset, whence) {
	    var position = offset;
	    if (whence === 1) {
	        position += stream.position;
	    }
	    else if (whence === 2) {
	        if (this.FS.isFile(stream.node.mode)) {
	            try {
	                var stat = this.nodefs.fstatSync(stream.nfd);
	                position += stat.size;
	            }
	            catch (e) {
	                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	            }
	        }
	    }
	    if (position < 0) {
	        throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
	    }
	    stream.position = position;
	    return position;
	};
	var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps(fs) {
	    this.fs = fs;
	    this.nodefs = fs.getNodeFS();
	    this.FS = fs.getFS();
	    this.PATH = fs.getPATH();
	    this.ERRNO_CODES = fs.getERRNO_CODES();
	};
	BFSEmscriptenNodeOps.prototype.getattr = function getattr (node) {
	    var path$$1 = this.fs.realPath(node);
	    var stat;
	    try {
	        stat = this.nodefs.lstatSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	    return {
	        dev: stat.dev,
	        ino: stat.ino,
	        mode: stat.mode,
	        nlink: stat.nlink,
	        uid: stat.uid,
	        gid: stat.gid,
	        rdev: stat.rdev,
	        size: stat.size,
	        atime: stat.atime,
	        mtime: stat.mtime,
	        ctime: stat.ctime,
	        blksize: stat.blksize,
	        blocks: stat.blocks
	    };
	};
	BFSEmscriptenNodeOps.prototype.setattr = function setattr (node, attr) {
	    var path$$1 = this.fs.realPath(node);
	    try {
	        if (attr.mode !== undefined) {
	            this.nodefs.chmodSync(path$$1, attr.mode);
	            // update the common node structure mode as well
	            node.mode = attr.mode;
	        }
	        if (attr.timestamp !== undefined) {
	            var date = new Date(attr.timestamp);
	            this.nodefs.utimesSync(path$$1, date, date);
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        // Ignore not supported errors. Emscripten does utimesSync when it
	        // writes files, but never really requires the value to be set.
	        if (e.code !== "ENOTSUP") {
	            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	        }
	    }
	    if (attr.size !== undefined) {
	        try {
	            this.nodefs.truncateSync(path$$1, attr.size);
	        }
	        catch (e) {
	            if (!e.code) {
	                throw e;
	            }
	            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	        }
	    }
	};
	BFSEmscriptenNodeOps.prototype.lookup = function lookup (parent, name) {
	    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
	    var mode = this.fs.getMode(path$$1);
	    return this.fs.createNode(parent, name, mode);
	};
	BFSEmscriptenNodeOps.prototype.mknod = function mknod (parent, name, mode, dev) {
	    var node = this.fs.createNode(parent, name, mode, dev);
	    // create the backing node for this in the fs root as well
	    var path$$1 = this.fs.realPath(node);
	    try {
	        if (this.FS.isDir(node.mode)) {
	            this.nodefs.mkdirSync(path$$1, node.mode);
	        }
	        else {
	            this.nodefs.writeFileSync(path$$1, '', { mode: node.mode });
	        }
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	    return node;
	};
	BFSEmscriptenNodeOps.prototype.rename = function rename (oldNode, newDir, newName) {
	    var oldPath = this.fs.realPath(oldNode);
	    var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);
	    try {
	        this.nodefs.renameSync(oldPath, newPath);
	        // This logic is missing from the original NodeFS,
	        // causing Emscripten's filesystem to think that the old file still exists.
	        oldNode.name = newName;
	        oldNode.parent = newDir;
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.unlink = function unlink (parent, name) {
	    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
	    try {
	        this.nodefs.unlinkSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.rmdir = function rmdir (parent, name) {
	    var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
	    try {
	        this.nodefs.rmdirSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.readdir = function readdir (node) {
	    var path$$1 = this.fs.realPath(node);
	    try {
	        // Node does not list . and .. in directory listings,
	        // but Emscripten expects it.
	        var contents = this.nodefs.readdirSync(path$$1);
	        contents.push('.', '..');
	        return contents;
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.symlink = function symlink (parent, newName, oldPath) {
	    var newPath = this.PATH.join2(this.fs.realPath(parent), newName);
	    try {
	        this.nodefs.symlinkSync(oldPath, newPath);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	BFSEmscriptenNodeOps.prototype.readlink = function readlink (node) {
	    var path$$1 = this.fs.realPath(node);
	    try {
	        return this.nodefs.readlinkSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	};
	var BFSEmscriptenFS = function BFSEmscriptenFS(_FS, _PATH, _ERRNO_CODES, nodefs) {
	    if ( _FS === void 0 ) _FS = self['FS'];
	    if ( _PATH === void 0 ) _PATH = self['PATH'];
	    if ( _ERRNO_CODES === void 0 ) _ERRNO_CODES = self['ERRNO_CODES'];
	    if ( nodefs === void 0 ) nodefs = _fsMock;
	
	    // This maps the integer permission modes from http://linux.die.net/man/3/open
	    // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
	    this.flagsToPermissionStringMap = {
	        0 /*O_RDONLY*/: 'r',
	        1 /*O_WRONLY*/: 'r+',
	        2 /*O_RDWR*/: 'r+',
	        64 /*O_CREAT*/: 'r',
	        65 /*O_WRONLY|O_CREAT*/: 'r+',
	        66 /*O_RDWR|O_CREAT*/: 'r+',
	        129 /*O_WRONLY|O_EXCL*/: 'rx+',
	        193 /*O_WRONLY|O_CREAT|O_EXCL*/: 'rx+',
	        514 /*O_RDWR|O_TRUNC*/: 'w+',
	        577 /*O_WRONLY|O_CREAT|O_TRUNC*/: 'w',
	        578 /*O_CREAT|O_RDWR|O_TRUNC*/: 'w+',
	        705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: 'wx',
	        706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: 'wx+',
	        1024 /*O_APPEND*/: 'a',
	        1025 /*O_WRONLY|O_APPEND*/: 'a',
	        1026 /*O_RDWR|O_APPEND*/: 'a+',
	        1089 /*O_WRONLY|O_CREAT|O_APPEND*/: 'a',
	        1090 /*O_RDWR|O_CREAT|O_APPEND*/: 'a+',
	        1153 /*O_WRONLY|O_EXCL|O_APPEND*/: 'ax',
	        1154 /*O_RDWR|O_EXCL|O_APPEND*/: 'ax+',
	        1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: 'ax',
	        1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: 'ax+',
	        4096 /*O_RDONLY|O_DSYNC*/: 'rs',
	        4098 /*O_RDWR|O_DSYNC*/: 'rs+'
	    };
	    this.nodefs = nodefs;
	    this.FS = _FS;
	    this.PATH = _PATH;
	    this.ERRNO_CODES = _ERRNO_CODES;
	    this.node_ops = new BFSEmscriptenNodeOps(this);
	    this.stream_ops = new BFSEmscriptenStreamOps(this);
	};
	BFSEmscriptenFS.prototype.mount = function mount (m) {
	    return this.createNode(null, '/', this.getMode(m.opts.root), 0);
	};
	BFSEmscriptenFS.prototype.createNode = function createNode (parent, name, mode, dev) {
	    var FS = this.FS;
	    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
	        throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);
	    }
	    var node = FS.createNode(parent, name, mode);
	    node.node_ops = this.node_ops;
	    node.stream_ops = this.stream_ops;
	    return node;
	};
	BFSEmscriptenFS.prototype.getMode = function getMode (path$$1) {
	    var stat;
	    try {
	        stat = this.nodefs.lstatSync(path$$1);
	    }
	    catch (e) {
	        if (!e.code) {
	            throw e;
	        }
	        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
	    }
	    return stat.mode;
	};
	BFSEmscriptenFS.prototype.realPath = function realPath (node) {
	    var parts = [];
	    while (node.parent !== node) {
	        parts.push(node.name);
	        node = node.parent;
	    }
	    parts.push(node.mount.opts.root);
	    parts.reverse();
	    return this.PATH.join.apply(null, parts);
	};
	BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString (flags) {
	    var parsedFlags = (typeof flags === "string") ? parseInt(flags, 10) : flags;
	    parsedFlags &= 0x1FFF;
	    if (parsedFlags in this.flagsToPermissionStringMap) {
	        return this.flagsToPermissionStringMap[parsedFlags];
	    }
	    else {
	        return flags;
	    }
	};
	BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS () {
	    return this.nodefs;
	};
	BFSEmscriptenFS.prototype.getFS = function getFS () {
	    return this.FS;
	};
	BFSEmscriptenFS.prototype.getPATH = function getPATH () {
	    return this.PATH;
	};
	BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES () {
	    return this.ERRNO_CODES;
	};
	
	/**
	 * Basic filesystem class. Most filesystems should extend this class, as it
	 * provides default implementations for a handful of methods.
	 */
	var BaseFileSystem = function BaseFileSystem () {};
	
	BaseFileSystem.prototype.supportsLinks = function supportsLinks () {
	    return false;
	};
	BaseFileSystem.prototype.diskSpace = function diskSpace (p, cb) {
	    cb(0, 0);
	};
	/**
	 * Opens the file at path p with the given flag. The file must exist.
	 * @param p The path to open.
	 * @param flag The flag to use when opening the file.
	 */
	BaseFileSystem.prototype.openFile = function openFile (p, flag, cb) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Create the file at path p with the given mode. Then, open it with the given
	 * flag.
	 */
	BaseFileSystem.prototype.createFile = function createFile (p, flag, mode, cb) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.open = function open (p, flag, mode, cb) {
	        var this$1 = this;
	
	    var mustBeFile = function (e, stats) {
	        if (e) {
	            // File does not exist.
	            switch (flag.pathNotExistsAction()) {
	                case ActionType.CREATE_FILE:
	                    // Ensure parent exists.
	                    return this$1.stat(path.dirname(p), false, function (e, parentStats) {
	                        if (e) {
	                            cb(e);
	                        }
	                        else if (parentStats && !parentStats.isDirectory()) {
	                            cb(ApiError.ENOTDIR(path.dirname(p)));
	                        }
	                        else {
	                            this$1.createFile(p, flag, mode, cb);
	                        }
	                    });
	                case ActionType.THROW_EXCEPTION:
	                    return cb(ApiError.ENOENT(p));
	                default:
	                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
	            }
	        }
	        else {
	            // File exists.
	            if (stats && stats.isDirectory()) {
	                return cb(ApiError.EISDIR(p));
	            }
	            switch (flag.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                    return cb(ApiError.EEXIST(p));
	                case ActionType.TRUNCATE_FILE:
	                    // NOTE: In a previous implementation, we deleted the file and
	                    // re-created it. However, this created a race condition if another
	                    // asynchronous request was trying to read the file, as the file
	                    // would not exist for a small period of time.
	                    return this$1.openFile(p, flag, function (e, fd) {
	                        if (e) {
	                            cb(e);
	                        }
	                        else if (fd) {
	                            fd.truncate(0, function () {
	                                fd.sync(function () {
	                                    cb(null, fd);
	                                });
	                            });
	                        }
	                        else {
	                            fail();
	                        }
	                    });
	                case ActionType.NOP:
	                    return this$1.openFile(p, flag, cb);
	                default:
	                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
	            }
	        }
	    };
	    this.stat(p, false, mustBeFile);
	};
	BaseFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.stat = function stat (p, isLstat, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.statSync = function statSync (p, isLstat) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Opens the file at path p with the given flag. The file must exist.
	 * @param p The path to open.
	 * @param flag The flag to use when opening the file.
	 * @return A File object corresponding to the opened file.
	 */
	BaseFileSystem.prototype.openFileSync = function openFileSync (p, flag, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Create the file at path p with the given mode. Then, open it with the given
	 * flag.
	 */
	BaseFileSystem.prototype.createFileSync = function createFileSync (p, flag, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.openSync = function openSync (p, flag, mode) {
	    // Check if the path exists, and is a file.
	    var stats;
	    try {
	        stats = this.statSync(p, false);
	    }
	    catch (e) {
	        // File does not exist.
	        switch (flag.pathNotExistsAction()) {
	            case ActionType.CREATE_FILE:
	                // Ensure parent exists.
	                var parentStats = this.statSync(path.dirname(p), false);
	                if (!parentStats.isDirectory()) {
	                    throw ApiError.ENOTDIR(path.dirname(p));
	                }
	                return this.createFileSync(p, flag, mode);
	            case ActionType.THROW_EXCEPTION:
	                throw ApiError.ENOENT(p);
	            default:
	                throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
	        }
	    }
	    // File exists.
	    if (stats.isDirectory()) {
	        throw ApiError.EISDIR(p);
	    }
	    switch (flag.pathExistsAction()) {
	        case ActionType.THROW_EXCEPTION:
	            throw ApiError.EEXIST(p);
	        case ActionType.TRUNCATE_FILE:
	            // Delete file.
	            this.unlinkSync(p);
	            // Create file. Use the same mode as the old file.
	            // Node itself modifies the ctime when this occurs, so this action
	            // will preserve that behavior if the underlying file system
	            // supports those properties.
	            return this.createFileSync(p, flag, stats.mode);
	        case ActionType.NOP:
	            return this.openFileSync(p, flag, mode);
	        default:
	            throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
	    }
	};
	BaseFileSystem.prototype.unlink = function unlink (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.unlinkSync = function unlinkSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.rmdir = function rmdir (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.readdir = function readdir (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.readdirSync = function readdirSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.exists = function exists (p, cb) {
	    this.stat(p, null, function (err) {
	        cb(!err);
	    });
	};
	BaseFileSystem.prototype.existsSync = function existsSync (p) {
	    try {
	        this.statSync(p, true);
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	};
	BaseFileSystem.prototype.realpath = function realpath (p, cache, cb) {
	    if (this.supportsLinks()) {
	        // The path could contain symlinks. Split up the path,
	        // resolve any symlinks, return the resolved string.
	        var splitPath = p.split(path.sep);
	        // TODO: Simpler to just pass through file, find sep and such.
	        for (var i = 0; i < splitPath.length; i++) {
	            var addPaths = splitPath.slice(0, i + 1);
	            splitPath[i] = path.join.apply(null, addPaths);
	        }
	    }
	    else {
	        // No symlinks. We just need to verify that it exists.
	        this.exists(p, function (doesExist) {
	            if (doesExist) {
	                cb(null, p);
	            }
	            else {
	                cb(ApiError.ENOENT(p));
	            }
	        });
	    }
	};
	BaseFileSystem.prototype.realpathSync = function realpathSync (p, cache) {
	    if (this.supportsLinks()) {
	        // The path could contain symlinks. Split up the path,
	        // resolve any symlinks, return the resolved string.
	        var splitPath = p.split(path.sep);
	        // TODO: Simpler to just pass through file, find sep and such.
	        for (var i = 0; i < splitPath.length; i++) {
	            var addPaths = splitPath.slice(0, i + 1);
	            splitPath[i] = path.join.apply(path, addPaths);
	        }
	        return splitPath.join(path.sep);
	    }
	    else {
	        // No symlinks. We just need to verify that it exists.
	        if (this.existsSync(p)) {
	            return p;
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    }
	};
	BaseFileSystem.prototype.truncate = function truncate (p, len, cb) {
	    this.open(p, FileFlag.getFileFlag('r+'), 0x1a4, (function (er, fd) {
	        if (er) {
	            return cb(er);
	        }
	        fd.truncate(len, (function (er) {
	            fd.close((function (er2) {
	                cb(er || er2);
	            }));
	        }));
	    }));
	};
	BaseFileSystem.prototype.truncateSync = function truncateSync (p, len) {
	    var fd = this.openSync(p, FileFlag.getFileFlag('r+'), 0x1a4);
	    // Need to safely close FD, regardless of whether or not truncate succeeds.
	    try {
	        fd.truncateSync(len);
	    }
	    catch (e) {
	        throw e;
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	    // Wrap cb in file closing code.
	    var oldCb = cb;
	    // Get file.
	    this.open(fname, flag, 0x1a4, function (err, fd) {
	        if (err) {
	            return cb(err);
	        }
	        cb = function (err, arg) {
	            fd.close(function (err2) {
	                if (!err) {
	                    err = err2;
	                }
	                return oldCb(err, arg);
	            });
	        };
	        fd.stat(function (err, stat) {
	            if (err) {
	                return cb(err);
	            }
	            // Allocate buffer.
	            var buf = Buffer.alloc(stat.size);
	            fd.read(buf, 0, stat.size, 0, function (err) {
	                if (err) {
	                    return cb(err);
	                }
	                else if (encoding === null) {
	                    return cb(err, buf);
	                }
	                try {
	                    cb(null, buf.toString(encoding));
	                }
	                catch (e) {
	                    cb(e);
	                }
	            });
	        });
	    });
	};
	BaseFileSystem.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	    // Get file.
	    var fd = this.openSync(fname, flag, 0x1a4);
	    try {
	        var stat = fd.statSync();
	        // Allocate buffer.
	        var buf = Buffer.alloc(stat.size);
	        fd.readSync(buf, 0, stat.size, 0);
	        fd.closeSync();
	        if (encoding === null) {
	            return buf;
	        }
	        return buf.toString(encoding);
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
	    // Wrap cb in file closing code.
	    var oldCb = cb;
	    // Get file.
	    this.open(fname, flag, 0x1a4, function (err, fd) {
	        if (err) {
	            return cb(err);
	        }
	        cb = function (err) {
	            fd.close(function (err2) {
	                oldCb(err ? err : err2);
	            });
	        };
	        try {
	            if (typeof data === 'string') {
	                data = Buffer.from(data, encoding);
	            }
	        }
	        catch (e) {
	            return cb(e);
	        }
	        // Write into file.
	        fd.write(data, 0, data.length, 0, cb);
	    });
	};
	BaseFileSystem.prototype.writeFileSync = function writeFileSync (fname, data, encoding, flag, mode) {
	    // Get file.
	    var fd = this.openSync(fname, flag, mode);
	    try {
	        if (typeof data === 'string') {
	            data = Buffer.from(data, encoding);
	        }
	        // Write into file.
	        fd.writeSync(data, 0, data.length, 0);
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
	    // Wrap cb in file closing code.
	    var oldCb = cb;
	    this.open(fname, flag, mode, function (err, fd) {
	        if (err) {
	            return cb(err);
	        }
	        cb = function (err) {
	            fd.close(function (err2) {
	                oldCb(err ? err : err2);
	            });
	        };
	        if (typeof data === 'string') {
	            data = Buffer.from(data, encoding);
	        }
	        fd.write(data, 0, data.length, null, cb);
	    });
	};
	BaseFileSystem.prototype.appendFileSync = function appendFileSync (fname, data, encoding, flag, mode) {
	    var fd = this.openSync(fname, flag, mode);
	    try {
	        if (typeof data === 'string') {
	            data = Buffer.from(data, encoding);
	        }
	        fd.writeSync(data, 0, data.length, null);
	    }
	    finally {
	        fd.closeSync();
	    }
	};
	BaseFileSystem.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.utimes = function utimes (p, atime, mtime, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.link = function link (srcpath, dstpath, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.linkSync = function linkSync (srcpath, dstpath) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFileSystem.prototype.readlink = function readlink (p, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFileSystem.prototype.readlinkSync = function readlinkSync (p) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	/**
	 * Implements the asynchronous API in terms of the synchronous API.
	 * @class SynchronousFileSystem
	 */
	var SynchronousFileSystem = (function (BaseFileSystem) {
	    function SynchronousFileSystem () {
	        BaseFileSystem.apply(this, arguments);
	    }
	
	    if ( BaseFileSystem ) SynchronousFileSystem.__proto__ = BaseFileSystem;
	    SynchronousFileSystem.prototype = Object.create( BaseFileSystem && BaseFileSystem.prototype );
	    SynchronousFileSystem.prototype.constructor = SynchronousFileSystem;
	
	    SynchronousFileSystem.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    SynchronousFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        try {
	            this.renameSync(oldPath, newPath);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.stat = function stat (p, isLstat, cb) {
	        try {
	            cb(null, this.statSync(p, isLstat));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.open = function open (p, flags, mode, cb) {
	        try {
	            cb(null, this.openSync(p, flags, mode));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.unlink = function unlink (p, cb) {
	        try {
	            this.unlinkSync(p);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.rmdir = function rmdir (p, cb) {
	        try {
	            this.rmdirSync(p);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	        try {
	            this.mkdirSync(p, mode);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.readdir = function readdir (p, cb) {
	        try {
	            cb(null, this.readdirSync(p));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        try {
	            this.chmodSync(p, isLchmod, mode);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	        try {
	            this.chownSync(p, isLchown, uid, gid);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        try {
	            this.utimesSync(p, atime, mtime);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.link = function link (srcpath, dstpath, cb) {
	        try {
	            this.linkSync(srcpath, dstpath);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	        try {
	            this.symlinkSync(srcpath, dstpath, type);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    SynchronousFileSystem.prototype.readlink = function readlink (p, cb) {
	        try {
	            cb(null, this.readlinkSync(p));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	
	    return SynchronousFileSystem;
	}(BaseFileSystem));
	
	/**
	 * Base class that contains shared implementations of functions for the file
	 * object.
	 */
	var BaseFile = function BaseFile () {};
	
	BaseFile.prototype.sync = function sync (cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.syncSync = function syncSync () {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFile.prototype.datasync = function datasync (cb) {
	    this.sync(cb);
	};
	BaseFile.prototype.datasyncSync = function datasyncSync () {
	    return this.syncSync();
	};
	BaseFile.prototype.chown = function chown (uid, gid, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.chownSync = function chownSync (uid, gid) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFile.prototype.chmod = function chmod (mode, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.chmodSync = function chmodSync (mode) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	BaseFile.prototype.utimes = function utimes (atime, mtime, cb) {
	    cb(new ApiError(ErrorCode.ENOTSUP));
	};
	BaseFile.prototype.utimesSync = function utimesSync (atime, mtime) {
	    throw new ApiError(ErrorCode.ENOTSUP);
	};
	
	/**
	 * An implementation of the File interface that operates on a file that is
	 * completely in-memory. PreloadFiles are backed by a Buffer.
	 *
	 * This is also an abstract class, as it lacks an implementation of 'sync' and
	 * 'close'. Each filesystem that wishes to use this file representation must
	 * extend this class and implement those two methods.
	 * @todo 'close' lever that disables functionality once closed.
	 */
	var PreloadFile = (function (BaseFile$$1) {
	    function PreloadFile(_fs, _path, _flag, _stat, contents) {
	        BaseFile$$1.call(this);
	        this._pos = 0;
	        this._dirty = false;
	        this._fs = _fs;
	        this._path = _path;
	        this._flag = _flag;
	        this._stat = _stat;
	        if (contents) {
	            this._buffer = contents;
	        }
	        else {
	            // Empty buffer. It'll expand once we write stuff to it.
	            this._buffer = emptyBuffer();
	        }
	        // Note: This invariant is *not* maintained once the file starts getting
	        // modified.
	        // Note: Only actually matters if file is readable, as writeable modes may
	        // truncate/append to file.
	        if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
	            throw new Error(("Invalid buffer: Buffer is " + (this._buffer.length) + " long, yet Stats object specifies that file is " + (this._stat.size) + " long."));
	        }
	    }
	
	    if ( BaseFile$$1 ) PreloadFile.__proto__ = BaseFile$$1;
	    PreloadFile.prototype = Object.create( BaseFile$$1 && BaseFile$$1.prototype );
	    PreloadFile.prototype.constructor = PreloadFile;
	    /**
	     * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.
	     */
	    PreloadFile.prototype.getBuffer = function getBuffer () {
	        return this._buffer;
	    };
	    /**
	     * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!
	     */
	    PreloadFile.prototype.getStats = function getStats () {
	        return this._stat;
	    };
	    PreloadFile.prototype.getFlag = function getFlag () {
	        return this._flag;
	    };
	    /**
	     * Get the path to this file.
	     * @return [String] The path to the file.
	     */
	    PreloadFile.prototype.getPath = function getPath () {
	        return this._path;
	    };
	    /**
	     * Get the current file position.
	     *
	     * We emulate the following bug mentioned in the Node documentation:
	     * > On Linux, positional writes don't work when the file is opened in append
	     *   mode. The kernel ignores the position argument and always appends the data
	     *   to the end of the file.
	     * @return [Number] The current file position.
	     */
	    PreloadFile.prototype.getPos = function getPos () {
	        if (this._flag.isAppendable()) {
	            return this._stat.size;
	        }
	        return this._pos;
	    };
	    /**
	     * Advance the current file position by the indicated number of positions.
	     * @param [Number] delta
	     */
	    PreloadFile.prototype.advancePos = function advancePos (delta) {
	        return this._pos += delta;
	    };
	    /**
	     * Set the file position.
	     * @param [Number] newPos
	     */
	    PreloadFile.prototype.setPos = function setPos (newPos) {
	        return this._pos = newPos;
	    };
	    /**
	     * **Core**: Asynchronous sync. Must be implemented by subclasses of this
	     * class.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.sync = function sync (cb) {
	        try {
	            this.syncSync();
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * **Core**: Synchronous sync.
	     */
	    PreloadFile.prototype.syncSync = function syncSync () {
	        throw new ApiError(ErrorCode.ENOTSUP);
	    };
	    /**
	     * **Core**: Asynchronous close. Must be implemented by subclasses of this
	     * class.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.close = function close (cb) {
	        try {
	            this.closeSync();
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * **Core**: Synchronous close.
	     */
	    PreloadFile.prototype.closeSync = function closeSync () {
	        throw new ApiError(ErrorCode.ENOTSUP);
	    };
	    /**
	     * Asynchronous `stat`.
	     * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb
	     */
	    PreloadFile.prototype.stat = function stat (cb) {
	        try {
	            cb(null, this._stat.clone());
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Synchronous `stat`.
	     */
	    PreloadFile.prototype.statSync = function statSync () {
	        return this._stat.clone();
	    };
	    /**
	     * Asynchronous truncate.
	     * @param [Number] len
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.truncate = function truncate (len, cb) {
	        try {
	            this.truncateSync(len);
	            if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
	                this.sync(cb);
	            }
	            cb();
	        }
	        catch (e) {
	            return cb(e);
	        }
	    };
	    /**
	     * Synchronous truncate.
	     * @param [Number] len
	     */
	    PreloadFile.prototype.truncateSync = function truncateSync (len) {
	        this._dirty = true;
	        if (!this._flag.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
	        }
	        this._stat.mtime = new Date();
	        if (len > this._buffer.length) {
	            var buf = Buffer.alloc(len - this._buffer.length, 0);
	            // Write will set @_stat.size for us.
	            this.writeSync(buf, 0, buf.length, this._buffer.length);
	            if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
	                this.syncSync();
	            }
	            return;
	        }
	        this._stat.size = len;
	        // Truncate buffer to 'len'.
	        var newBuff = Buffer.alloc(len);
	        this._buffer.copy(newBuff, 0, 0, len);
	        this._buffer = newBuff;
	        if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
	            this.syncSync();
	        }
	    };
	    /**
	     * Write buffer to the file.
	     * Note that it is unsafe to use fs.write multiple times on the same file
	     * without waiting for the callback.
	     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
	     *  the file.
	     * @param [Number] offset Offset in the buffer to start reading data from.
	     * @param [Number] length The amount of bytes to write to the file.
	     * @param [Number] position Offset from the beginning of the file where this
	     *   data should be written. If position is null, the data will be written at
	     *   the current position.
	     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]
	     *   cb The number specifies the number of bytes written into the file.
	     */
	    PreloadFile.prototype.write = function write (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Write buffer to the file.
	     * Note that it is unsafe to use fs.writeSync multiple times on the same file
	     * without waiting for the callback.
	     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
	     *  the file.
	     * @param [Number] offset Offset in the buffer to start reading data from.
	     * @param [Number] length The amount of bytes to write to the file.
	     * @param [Number] position Offset from the beginning of the file where this
	     *   data should be written. If position is null, the data will be written at
	     *   the current position.
	     * @return [Number]
	     */
	    PreloadFile.prototype.writeSync = function writeSync (buffer$$1, offset, length, position) {
	        this._dirty = true;
	        if (position === undefined || position === null) {
	            position = this.getPos();
	        }
	        if (!this._flag.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
	        }
	        var endFp = position + length;
	        if (endFp > this._stat.size) {
	            this._stat.size = endFp;
	            if (endFp > this._buffer.length) {
	                // Extend the buffer!
	                var newBuff = Buffer.alloc(endFp);
	                this._buffer.copy(newBuff);
	                this._buffer = newBuff;
	            }
	        }
	        var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
	        this._stat.mtime = new Date();
	        if (this._flag.isSynchronous()) {
	            this.syncSync();
	            return len;
	        }
	        this.setPos(position + len);
	        return len;
	    };
	    /**
	     * Read data from the file.
	     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
	     *   written to.
	     * @param [Number] offset The offset within the buffer where writing will
	     *   start.
	     * @param [Number] length An integer specifying the number of bytes to read.
	     * @param [Number] position An integer specifying where to begin reading from
	     *   in the file. If position is null, data will be read from the current file
	     *   position.
	     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The
	     *   number is the number of bytes read
	     */
	    PreloadFile.prototype.read = function read (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Read data from the file.
	     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
	     *   written to.
	     * @param [Number] offset The offset within the buffer where writing will
	     *   start.
	     * @param [Number] length An integer specifying the number of bytes to read.
	     * @param [Number] position An integer specifying where to begin reading from
	     *   in the file. If position is null, data will be read from the current file
	     *   position.
	     * @return [Number]
	     */
	    PreloadFile.prototype.readSync = function readSync (buffer$$1, offset, length, position) {
	        if (!this._flag.isReadable()) {
	            throw new ApiError(ErrorCode.EPERM, 'File not opened with a readable mode.');
	        }
	        if (position === undefined || position === null) {
	            position = this.getPos();
	        }
	        var endRead = position + length;
	        if (endRead > this._stat.size) {
	            length = this._stat.size - position;
	        }
	        var rv = this._buffer.copy(buffer$$1, offset, position, position + length);
	        this._stat.atime = new Date();
	        this._pos = position + length;
	        return rv;
	    };
	    /**
	     * Asynchronous `fchmod`.
	     * @param [Number|String] mode
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    PreloadFile.prototype.chmod = function chmod (mode, cb) {
	        try {
	            this.chmodSync(mode);
	            cb();
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    /**
	     * Asynchronous `fchmod`.
	     * @param [Number] mode
	     */
	    PreloadFile.prototype.chmodSync = function chmodSync (mode) {
	        if (!this._fs.supportsProps()) {
	            throw new ApiError(ErrorCode.ENOTSUP);
	        }
	        this._dirty = true;
	        this._stat.chmod(mode);
	        this.syncSync();
	    };
	    PreloadFile.prototype.isDirty = function isDirty () {
	        return this._dirty;
	    };
	    /**
	     * Resets the dirty bit. Should only be called after a sync has completed successfully.
	     */
	    PreloadFile.prototype.resetDirty = function resetDirty () {
	        this._dirty = false;
	    };
	
	    return PreloadFile;
	}(BaseFile));
	
	/**
	 * File class for the InMemory and XHR file systems.
	 * Doesn't sync to anything, so it works nicely for memory-only files.
	 */
	var NoSyncFile = (function (PreloadFile) {
	    function NoSyncFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile ) NoSyncFile.__proto__ = PreloadFile;
	    NoSyncFile.prototype = Object.create( PreloadFile && PreloadFile.prototype );
	    NoSyncFile.prototype.constructor = NoSyncFile;
	    /**
	     * Asynchronous sync. Doesn't do anything, simply calls the cb.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    NoSyncFile.prototype.sync = function sync (cb) {
	        cb();
	    };
	    /**
	     * Synchronous sync. Doesn't do anything.
	     */
	    NoSyncFile.prototype.syncSync = function syncSync () {
	        // NOP.
	    };
	    /**
	     * Asynchronous close. Doesn't do anything, simply calls the cb.
	     * @param [Function(BrowserFS.ApiError)] cb
	     */
	    NoSyncFile.prototype.close = function close (cb) {
	        cb();
	    };
	    /**
	     * Synchronous close. Doesn't do anything.
	     */
	    NoSyncFile.prototype.closeSync = function closeSync () {
	        // NOP.
	    };
	
	    return NoSyncFile;
	}(PreloadFile));
	
	/**
	 * We define our own file to interpose on syncSync() for mirroring purposes.
	 */
	var MirrorFile = (function (PreloadFile$$1) {
	    function MirrorFile(fs, path$$1, flag, stat, data) {
	        PreloadFile$$1.call(this, fs, path$$1, flag, stat, data);
	    }
	
	    if ( PreloadFile$$1 ) MirrorFile.__proto__ = PreloadFile$$1;
	    MirrorFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    MirrorFile.prototype.constructor = MirrorFile;
	    MirrorFile.prototype.syncSync = function syncSync () {
	        if (this.isDirty()) {
	            this._fs._syncSync(this);
	            this.resetDirty();
	        }
	    };
	    MirrorFile.prototype.closeSync = function closeSync () {
	        this.syncSync();
	    };
	
	    return MirrorFile;
	}(PreloadFile));
	/**
	 * AsyncMirrorFS mirrors a synchronous filesystem into an asynchronous filesystem
	 * by:
	 *
	 * * Performing operations over the in-memory copy, while asynchronously pipelining them
	 *   to the backing store.
	 * * During application loading, the contents of the async file system can be reloaded into
	 *   the synchronous store, if desired.
	 *
	 * The two stores will be kept in sync. The most common use-case is to pair a synchronous
	 * in-memory filesystem with an asynchronous backing store.
	 *
	 * Example: Mirroring an IndexedDB file system to an in memory file system. Now, you can use
	 * IndexedDB synchronously.
	 *
	 * ```javascript
	 * BrowserFS.configure({
	 *   fs: "AsyncMirror",
	 *   options: {
	 *     sync: { fs: "InMemory" },
	 *     async: { fs: "IndexedDB" }
	 *   }
	 * }, function(e) {
	 *   // BrowserFS is initialized and ready-to-use!
	 * });
	 * ```
	 *
	 * Or, alternatively:
	 *
	 * ```javascript
	 * BrowserFS.FileSystem.IndexedDB.Create(function(e, idbfs) {
	 *   BrowserFS.FileSystem.InMemory.Create(function(e, inMemory) {
	 *     BrowserFS.FileSystem.AsyncMirror({
	 *       sync: inMemory, async: idbfs
	 *     }, function(e, mirrored) {
	 *       BrowserFS.initialize(mirrored);
	 *     });
	 *   });
	 * });
	 * ```
	 */
	var AsyncMirror = (function (SynchronousFileSystem$$1) {
	    function AsyncMirror(sync, async, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        SynchronousFileSystem$$1.call(this);
	        /**
	         * Queue of pending asynchronous operations.
	         */
	        this._queue = [];
	        this._queueRunning = false;
	        this._isInitialized = false;
	        this._initializeCallbacks = [];
	        this._sync = sync;
	        this._async = async;
	        if (!sync.supportsSynch()) {
	            throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
	        }
	        deprecationMessage(deprecateMsg, AsyncMirror.Name, { sync: "sync file system instance", async: "async file system instance" });
	    }
	
	    if ( SynchronousFileSystem$$1 ) AsyncMirror.__proto__ = SynchronousFileSystem$$1;
	    AsyncMirror.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    AsyncMirror.prototype.constructor = AsyncMirror;
	    /**
	     * Constructs and initializes an AsyncMirror file system with the given options.
	     */
	    AsyncMirror.Create = function Create (opts, cb) {
	        try {
	            var fs = new AsyncMirror(opts.sync, opts.async, false);
	            fs.initialize(function (e) {
	                if (e) {
	                    cb(e);
	                }
	                else {
	                    cb(null, fs);
	                }
	            }, false);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    AsyncMirror.isAvailable = function isAvailable () {
	        return true;
	    };
	    AsyncMirror.prototype.getName = function getName () {
	        return AsyncMirror.Name;
	    };
	    AsyncMirror.prototype._syncSync = function _syncSync (fd) {
	        this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag('w'), fd.getStats().mode);
	        this.enqueueOp({
	            apiMethod: 'writeFile',
	            arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
	        });
	    };
	    /**
	     * Called once to load up files from async storage into sync storage.
	     */
	    AsyncMirror.prototype.initialize = function initialize (userCb, deprecateMsg) {
	        var this$1 = this;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
	        }
	        var callbacks = this._initializeCallbacks;
	        var end = function (e) {
	            this$1._isInitialized = !e;
	            this$1._initializeCallbacks = [];
	            callbacks.forEach(function (cb) { return cb(e); });
	        };
	        if (!this._isInitialized) {
	            // First call triggers initialization, the rest wait.
	            if (callbacks.push(userCb) === 1) {
	                var copyDirectory = function (p, mode, cb) {
	                    if (p !== '/') {
	                        this$1._sync.mkdirSync(p, mode);
	                    }
	                    this$1._async.readdir(p, function (err, files) {
	                        var i = 0;
	                        // NOTE: This function must not be in a lexically nested statement,
	                        // such as an if or while statement. Safari refuses to run the
	                        // script since it is undefined behavior.
	                        function copyNextFile(err) {
	                            if (err) {
	                                cb(err);
	                            }
	                            else if (i < files.length) {
	                                copyItem(path.join(p, files[i]), copyNextFile);
	                                i++;
	                            }
	                            else {
	                                cb();
	                            }
	                        }
	                        if (err) {
	                            cb(err);
	                        }
	                        else {
	                            copyNextFile();
	                        }
	                    });
	                }, copyFile = function (p, mode, cb) {
	                    this$1._async.readFile(p, null, FileFlag.getFileFlag('r'), function (err, data) {
	                        if (err) {
	                            cb(err);
	                        }
	                        else {
	                            try {
	                                this$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag('w'), mode);
	                            }
	                            catch (e) {
	                                err = e;
	                            }
	                            finally {
	                                cb(err);
	                            }
	                        }
	                    });
	                }, copyItem = function (p, cb) {
	                    this$1._async.stat(p, false, function (err, stats) {
	                        if (err) {
	                            cb(err);
	                        }
	                        else if (stats.isDirectory()) {
	                            copyDirectory(p, stats.mode, cb);
	                        }
	                        else {
	                            copyFile(p, stats.mode, cb);
	                        }
	                    });
	                };
	                copyDirectory('/', 0, end);
	            }
	        }
	        else {
	            userCb();
	        }
	    };
	    AsyncMirror.prototype.isReadOnly = function isReadOnly () { return false; };
	    AsyncMirror.prototype.supportsSynch = function supportsSynch () { return true; };
	    AsyncMirror.prototype.supportsLinks = function supportsLinks () { return false; };
	    AsyncMirror.prototype.supportsProps = function supportsProps () { return this._sync.supportsProps() && this._async.supportsProps(); };
	    AsyncMirror.prototype.renameSync = function renameSync (oldPath, newPath) {
	        this.checkInitialized();
	        this._sync.renameSync(oldPath, newPath);
	        this.enqueueOp({
	            apiMethod: 'rename',
	            arguments: [oldPath, newPath]
	        });
	    };
	    AsyncMirror.prototype.statSync = function statSync (p, isLstat) {
	        this.checkInitialized();
	        return this._sync.statSync(p, isLstat);
	    };
	    AsyncMirror.prototype.openSync = function openSync (p, flag, mode) {
	        this.checkInitialized();
	        // Sanity check: Is this open/close permitted?
	        var fd = this._sync.openSync(p, flag, mode);
	        fd.closeSync();
	        return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag('r')));
	    };
	    AsyncMirror.prototype.unlinkSync = function unlinkSync (p) {
	        this.checkInitialized();
	        this._sync.unlinkSync(p);
	        this.enqueueOp({
	            apiMethod: 'unlink',
	            arguments: [p]
	        });
	    };
	    AsyncMirror.prototype.rmdirSync = function rmdirSync (p) {
	        this.checkInitialized();
	        this._sync.rmdirSync(p);
	        this.enqueueOp({
	            apiMethod: 'rmdir',
	            arguments: [p]
	        });
	    };
	    AsyncMirror.prototype.mkdirSync = function mkdirSync (p, mode) {
	        this.checkInitialized();
	        this._sync.mkdirSync(p, mode);
	        this.enqueueOp({
	            apiMethod: 'mkdir',
	            arguments: [p, mode]
	        });
	    };
	    AsyncMirror.prototype.readdirSync = function readdirSync (p) {
	        this.checkInitialized();
	        return this._sync.readdirSync(p);
	    };
	    AsyncMirror.prototype.existsSync = function existsSync (p) {
	        this.checkInitialized();
	        return this._sync.existsSync(p);
	    };
	    AsyncMirror.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	        this.checkInitialized();
	        this._sync.chmodSync(p, isLchmod, mode);
	        this.enqueueOp({
	            apiMethod: 'chmod',
	            arguments: [p, isLchmod, mode]
	        });
	    };
	    AsyncMirror.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	        this.checkInitialized();
	        this._sync.chownSync(p, isLchown, uid, gid);
	        this.enqueueOp({
	            apiMethod: 'chown',
	            arguments: [p, isLchown, uid, gid]
	        });
	    };
	    AsyncMirror.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	        this.checkInitialized();
	        this._sync.utimesSync(p, atime, mtime);
	        this.enqueueOp({
	            apiMethod: 'utimes',
	            arguments: [p, atime, mtime]
	        });
	    };
	    AsyncMirror.prototype.checkInitialized = function checkInitialized () {
	        if (!this._isInitialized) {
	            throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
	        }
	    };
	    AsyncMirror.prototype.enqueueOp = function enqueueOp (op) {
	        var this$1 = this;
	
	        this._queue.push(op);
	        if (!this._queueRunning) {
	            this._queueRunning = true;
	            var doNextOp = function (err) {
	                if (err) {
	                    console.error(("WARNING: File system has desynchronized. Received following error: " + err + "\n$"));
	                }
	                if (this$1._queue.length > 0) {
	                    var op = this$1._queue.shift(), args = op.arguments;
	                    args.push(doNextOp);
	                    this$1._async[op.apiMethod].apply(this$1._async, args);
	                }
	                else {
	                    this$1._queueRunning = false;
	                }
	            };
	            doNextOp();
	        }
	    };
	
	    return AsyncMirror;
	}(SynchronousFileSystem));
	
	AsyncMirror.Name = "AsyncMirror";
	AsyncMirror.Options = {
	    sync: {
	        type: "object",
	        description: "The synchronous file system to mirror the asynchronous file system to."
	    },
	    async: {
	        type: "object",
	        description: "The asynchronous file system to mirror."
	    }
	};
	
	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest$1(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);
	
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}
	
	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	// Lodash rest function without function.toString()
	// remappings
	function rest(func, start) {
	    return overRest$1(func, start, identity);
	}
	
	var initialParams = function (fn) {
	    return rest(function (args/*..., callback*/) {
	        var callback = args.pop();
	        fn.call(this, args, callback);
	    });
	};
	
	function applyEach$1(eachfn) {
	    return rest(function(fns, args) {
	        var go = initialParams(function(args, callback) {
	            var that = this;
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat(cb));
	            }, callback);
	        });
	        if (args.length) {
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    });
	}
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	/** Built-in value references. */
	var Symbol$1 = root.Symbol;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];
	
	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}
	
	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]';
	var undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]';
	var funcTag = '[object Function]';
	var genTag = '[object GeneratorFunction]';
	var proxyTag = '[object Proxy]';
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	// A temporary value used to identify if the loop should be broken.
	// See #1064, #1293
	var breakLoop = {};
	
	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}
	
	function once(fn) {
	    return function () {
	        if (fn === null) { return; }
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	
	var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
	
	var getIterator = function (coll) {
	    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
	};
	
	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	
	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Built-in value references. */
	var Buffer$1 = moduleExports ? root.Buffer : undefined;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER$1 : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]';
	var arrayTag = '[object Array]';
	var boolTag = '[object Boolean]';
	var dateTag = '[object Date]';
	var errorTag = '[object Error]';
	var funcTag$1 = '[object Function]';
	var mapTag = '[object Map]';
	var numberTag = '[object Number]';
	var objectTag = '[object Object]';
	var regexpTag = '[object RegExp]';
	var setTag = '[object Set]';
	var stringTag = '[object String]';
	var weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]';
	var dataViewTag = '[object DataView]';
	var float32Tag = '[object Float32Array]';
	var float64Tag = '[object Float64Array]';
	var int8Tag = '[object Int8Array]';
	var int16Tag = '[object Int16Array]';
	var int32Tag = '[object Int32Array]';
	var uint8Tag = '[object Uint8Array]';
	var uint8ClampedTag = '[object Uint8ClampedArray]';
	var uint16Tag = '[object Uint16Array]';
	var uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	
	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}
	
	/** Detect free variable `exports`. */
	var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports$1 && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty$1.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;
	
	  return value === proto;
	}
	
	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);
	
	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	function createArrayIterator(coll) {
	    var i = -1;
	    var len = coll.length;
	    return function next() {
	        return ++i < len ? {value: coll[i], key: i} : null;
	    }
	}
	
	function createES2015Iterator(iterator) {
	    var i = -1;
	    return function next() {
	        var item = iterator.next();
	        if (item.done)
	            { return null; }
	        i++;
	        return {value: item.value, key: i};
	    }
	}
	
	function createObjectIterator(obj) {
	    var okeys = keys(obj);
	    var i = -1;
	    var len = okeys.length;
	    return function next() {
	        var key = okeys[++i];
	        return i < len ? {value: obj[key], key: key} : null;
	    };
	}
	
	function iterator(coll) {
	    if (isArrayLike(coll)) {
	        return createArrayIterator(coll);
	    }
	
	    var iterator = getIterator(coll);
	    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
	}
	
	function onlyOnce(fn) {
	    return function() {
	        if (fn === null) { throw new Error("Callback was already called."); }
	        var callFn = fn;
	        fn = null;
	        callFn.apply(this, arguments);
	    };
	}
	
	function _eachOfLimit(limit) {
	    return function (obj, iteratee, callback) {
	        callback = once(callback || noop);
	        if (limit <= 0 || !obj) {
	            return callback(null);
	        }
	        var nextElem = iterator(obj);
	        var done = false;
	        var running = 0;
	
	        function iterateeCallback(err, value) {
	            running -= 1;
	            if (err) {
	                done = true;
	                callback(err);
	            }
	            else if (value === breakLoop || (done && running <= 0)) {
	                done = true;
	                return callback(null);
	            }
	            else {
	                replenish();
	            }
	        }
	
	        function replenish () {
	            while (running < limit && !done) {
	                var elem = nextElem();
	                if (elem === null) {
	                    done = true;
	                    if (running <= 0) {
	                        callback(null);
	                    }
	                    return;
	                }
	                running += 1;
	                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
	            }
	        }
	
	        replenish();
	    };
	}
	
	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name eachOfLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A function to apply to each
	 * item in `coll`. The `key` is the item's key, or index in the case of an
	 * array. The iteratee is passed a `callback(err)` which must be called once it
	 * has completed. If no error has occurred, the callback should be run without
	 * arguments or with an explicit `null` argument. Invoked with
	 * (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	function eachOfLimit(coll, limit, iteratee, callback) {
	    _eachOfLimit(limit)(coll, iteratee, callback);
	}
	
	function doLimit(fn, limit) {
	    return function (iterable, iteratee, callback) {
	        return fn(iterable, limit, iteratee, callback);
	    };
	}
	
	// eachOf implementation optimized for array-likes
	function eachOfArrayLike(coll, iteratee, callback) {
	    callback = once(callback || noop);
	    var index = 0,
	        completed = 0,
	        length = coll.length;
	    if (length === 0) {
	        callback(null);
	    }
	
	    function iteratorCallback(err, value) {
	        if (err) {
	            callback(err);
	        } else if ((++completed === length) || value === breakLoop) {
	            callback(null);
	        }
	    }
	
	    for (; index < length; index++) {
	        iteratee(coll[index], index, onlyOnce(iteratorCallback));
	    }
	}
	
	// a generic version of eachOf which can handle array, object, and iterator cases.
	var eachOfGeneric = doLimit(eachOfLimit, Infinity);
	
	/**
	 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
	 * to the iteratee.
	 *
	 * @name eachOf
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEachOf
	 * @category Collection
	 * @see [async.each]{@link module:Collections.each}
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each
	 * item in `coll`. The `key` is the item's key, or index in the case of an
	 * array. The iteratee is passed a `callback(err)` which must be called once it
	 * has completed. If no error has occurred, the callback should be run without
	 * arguments or with an explicit `null` argument. Invoked with
	 * (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @example
	 *
	 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
	 * var configs = {};
	 *
	 * async.forEachOf(obj, function (value, key, callback) {
	 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
	 *         if (err) return callback(err);
	 *         try {
	 *             configs[key] = JSON.parse(data);
	 *         } catch (e) {
	 *             return callback(e);
	 *         }
	 *         callback();
	 *     });
	 * }, function (err) {
	 *     if (err) console.error(err.message);
	 *     // configs is now a map of JSON data
	 *     doSomethingWith(configs);
	 * });
	 */
	var eachOf = function(coll, iteratee, callback) {
	    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
	    eachOfImplementation(coll, iteratee, callback);
	};
	
	function doParallel(fn) {
	    return function (obj, iteratee, callback) {
	        return fn(eachOf, obj, iteratee, callback);
	    };
	}
	
	function _asyncMap(eachfn, arr, iteratee, callback) {
	    callback = callback || noop;
	    arr = arr || [];
	    var results = [];
	    var counter = 0;
	
	    eachfn(arr, function (value, _, callback) {
	        var index = counter++;
	        iteratee(value, function (err, v) {
	            results[index] = v;
	            callback(err);
	        });
	    }, function (err) {
	        callback(err, results);
	    });
	}
	
	/**
	 * Produces a new collection of values by mapping each value in `coll` through
	 * the `iteratee` function. The `iteratee` is called with an item from `coll`
	 * and a callback for when it has finished processing. Each of these callback
	 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
	 * `iteratee` passes an error to its callback, the main `callback` (for the
	 * `map` function) is immediately called with the error.
	 *
	 * Note, that since this function applies the `iteratee` to each item in
	 * parallel, there is no guarantee that the `iteratee` functions will complete
	 * in order. However, the results array will be in the same order as the
	 * original `coll`.
	 *
	 * If `map` is passed an Object, the results will be an Array.  The results
	 * will roughly be in the order of the original Objects' keys (but this can
	 * vary across JavaScript engines)
	 *
	 * @name map
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a
	 * transformed item. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an Array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 * @example
	 *
	 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
	 *     // results is now an array of stats for each file
	 * });
	 */
	var map = doParallel(_asyncMap);
	
	/**
	 * Applies the provided arguments to each function in the array, calling
	 * `callback` after all functions have completed. If you only provide the first
	 * argument, `fns`, then it will return a function which lets you pass in the
	 * arguments as if it were a single function call. If more arguments are
	 * provided, `callback` is required while `args` is still optional.
	 *
	 * @name applyEach
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array|Iterable|Object} fns - A collection of asynchronous functions
	 * to all call with the same arguments
	 * @param {...*} [args] - any number of separate arguments to pass to the
	 * function.
	 * @param {Function} [callback] - the final argument should be the callback,
	 * called when all functions have completed processing.
	 * @returns {Function} - If only the first argument, `fns`, is provided, it will
	 * return a function which lets you pass in the arguments as if it were a single
	 * function call. The signature is `(..args, callback)`. If invoked with any
	 * arguments, `callback` is required.
	 * @example
	 *
	 * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
	 *
	 * // partial application example:
	 * async.each(
	 *     buckets,
	 *     async.applyEach([enableSearch, updateSchema]),
	 *     callback
	 * );
	 */
	applyEach$1(map);
	
	function doParallelLimit(fn) {
	    return function (obj, limit, iteratee, callback) {
	        return fn(_eachOfLimit(limit), obj, iteratee, callback);
	    };
	}
	
	/**
	 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name mapLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.map]{@link module:Collections.map}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a transformed
	 * item. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 */
	var mapLimit = doParallelLimit(_asyncMap);
	
	/**
	 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
	 *
	 * @name mapSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.map]{@link module:Collections.map}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a
	 * transformed item. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Results is an array of the
	 * transformed items from the `coll`. Invoked with (err, results).
	 */
	var mapSeries = doLimit(mapLimit, 1);
	
	/**
	 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
	 *
	 * @name applyEachSeries
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
	 * @category Control Flow
	 * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
	 * call with the same arguments
	 * @param {...*} [args] - any number of separate arguments to pass to the
	 * function.
	 * @param {Function} [callback] - the final argument should be the callback,
	 * called when all functions have completed processing.
	 * @returns {Function} - If only the first argument is provided, it will return
	 * a function which lets you pass in the arguments as if it were a single
	 * function call.
	 */
	applyEach$1(mapSeries);
	
	/**
	 * Creates a continuation function with some arguments already applied.
	 *
	 * Useful as a shorthand when combined with other control flow functions. Any
	 * arguments passed to the returned function are added to the arguments
	 * originally passed to apply.
	 *
	 * @name apply
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {Function} function - The function you want to eventually apply all
	 * arguments to. Invokes with (arguments...).
	 * @param {...*} arguments... - Any number of arguments to automatically apply
	 * when the continuation is called.
	 * @example
	 *
	 * // using apply
	 * async.parallel([
	 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
	 *     async.apply(fs.writeFile, 'testfile2', 'test2')
	 * ]);
	 *
	 *
	 * // the same process without using apply
	 * async.parallel([
	 *     function(callback) {
	 *         fs.writeFile('testfile1', 'test1', callback);
	 *     },
	 *     function(callback) {
	 *         fs.writeFile('testfile2', 'test2', callback);
	 *     }
	 * ]);
	 *
	 * // It's possible to pass any number of additional arguments when calling the
	 * // continuation:
	 *
	 * node> var fn = async.apply(sys.puts, 'one');
	 * node> fn('two', 'three');
	 * one
	 * two
	 * three
	 */
	rest(function(fn, args) {
	    return rest(function(callArgs) {
	        return fn.apply(null, args.concat(callArgs));
	    });
	});
	
	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;
	
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	
	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;
	
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}
	
	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);
	
	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}
	
	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;
	
	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}
	
	/**
	 * Determines the best order for running the functions in `tasks`, based on
	 * their requirements. Each function can optionally depend on other functions
	 * being completed first, and each function is run as soon as its requirements
	 * are satisfied.
	 *
	 * If any of the functions pass an error to their callback, the `auto` sequence
	 * will stop. Further tasks will not execute (so any other functions depending
	 * on it will not run), and the main `callback` is immediately called with the
	 * error.
	 *
	 * Functions also receive an object containing the results of functions which
	 * have completed so far as the first argument, if they have dependencies. If a
	 * task function has no dependencies, it will only be passed a callback.
	 *
	 * @name auto
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Object} tasks - An object. Each of its properties is either a
	 * function or an array of requirements, with the function itself the last item
	 * in the array. The object's key of a property serves as the name of the task
	 * defined by that property, i.e. can be used when specifying requirements for
	 * other tasks. The function receives one or two arguments:
	 * * a `results` object, containing the results of the previously executed
	 *   functions, only passed if the task has any dependencies,
	 * * a `callback(err, result)` function, which must be called when finished,
	 *   passing an `error` (which can be `null`) and the result of the function's
	 *   execution.
	 * @param {number} [concurrency=Infinity] - An optional `integer` for
	 * determining the maximum number of tasks that can be run in parallel. By
	 * default, as many as possible.
	 * @param {Function} [callback] - An optional callback which is called when all
	 * the tasks have been completed. It receives the `err` argument if any `tasks`
	 * pass an error to their callback. Results are always returned; however, if an
	 * error occurs, no further `tasks` will be performed, and the results object
	 * will only contain partial results. Invoked with (err, results).
	 * @returns undefined
	 * @example
	 *
	 * async.auto({
	 *     // this function will just be passed a callback
	 *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
	 *     showData: ['readData', function(results, cb) {
	 *         // results.readData is the file's contents
	 *         // ...
	 *     }]
	 * }, callback);
	 *
	 * async.auto({
	 *     get_data: function(callback) {
	 *         console.log('in get_data');
	 *         // async code to get some data
	 *         callback(null, 'data', 'converted to array');
	 *     },
	 *     make_folder: function(callback) {
	 *         console.log('in make_folder');
	 *         // async code to create a directory to store a file in
	 *         // this is run at the same time as getting the data
	 *         callback(null, 'folder');
	 *     },
	 *     write_file: ['get_data', 'make_folder', function(results, callback) {
	 *         console.log('in write_file', JSON.stringify(results));
	 *         // once there is some data and the directory exists,
	 *         // write the data to a file in the directory
	 *         callback(null, 'filename');
	 *     }],
	 *     email_link: ['write_file', function(results, callback) {
	 *         console.log('in email_link', JSON.stringify(results));
	 *         // once the file is written let's email a link to it...
	 *         // results.write_file contains the filename returned by write_file.
	 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
	 *     }]
	 * }, function(err, results) {
	 *     console.log('err = ', err);
	 *     console.log('results = ', results);
	 * });
	 */
	
	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	
	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	
	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	
	/** Used to compose unicode character classes. */
	
	/** Used to compose unicode character classes. */
	var rsAstralRange$1 = '\\ud800-\\udfff';
	var rsComboMarksRange$1 = '\\u0300-\\u036f';
	var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
	var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
	var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
	var rsVarRange$1 = '\\ufe0e\\ufe0f';
	
	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange$1 + ']';
	var rsCombo = '[' + rsComboRange$1 + ']';
	var rsFitz = '\\ud83c[\\udffb-\\udfff]';
	var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
	var rsNonAstral = '[^' + rsAstralRange$1 + ']';
	var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
	var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
	var rsZWJ$1 = '\\u200d';
	
	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?';
	var rsOptVar = '[' + rsVarRange$1 + ']?';
	var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
	var rsSeq = rsOptVar + reOptMod + rsOptJoin;
	var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	
	var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
	var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
	
	function fallback(fn) {
	    setTimeout(fn, 0);
	}
	
	function wrap(defer) {
	    return rest(function (fn, args) {
	        defer(function () {
	            fn.apply(null, args);
	        });
	    });
	}
	
	var _defer;
	
	if (hasSetImmediate) {
	    _defer = setImmediate;
	} else if (hasNextTick) {
	    _defer = process.nextTick;
	} else {
	    _defer = fallback;
	}
	
	wrap(_defer);
	
	// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
	// used for queues. This implementation assumes that the node provided by the user can be modified
	// to adjust the next and last properties. We implement only the minimal functionality
	// for queue support.
	
	/**
	 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
	 *
	 * @name eachOfSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.eachOf]{@link module:Collections.eachOf}
	 * @alias forEachOfSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`. The
	 * `key` is the item's key, or index in the case of an array. The iteratee is
	 * passed a `callback(err)` which must be called once it has completed. If no
	 * error has occurred, the callback should be run without arguments or with an
	 * explicit `null` argument. Invoked with (item, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. Invoked with (err).
	 */
	var eachOfSeries = doLimit(eachOfLimit, 1);
	
	/**
	 * Reduces `coll` into a single value using an async `iteratee` to return each
	 * successive step. `memo` is the initial state of the reduction. This function
	 * only operates in series.
	 *
	 * For performance reasons, it may make sense to split a call to this function
	 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
	 * results. This function is for situations where each step in the reduction
	 * needs to be async; if you can get the data before reducing it, then it's
	 * probably a good idea to do so.
	 *
	 * @name reduce
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias inject
	 * @alias foldl
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {*} memo - The initial state of the reduction.
	 * @param {Function} iteratee - A function applied to each item in the
	 * array to produce the next step in the reduction. The `iteratee` is passed a
	 * `callback(err, reduction)` which accepts an optional error as its first
	 * argument, and the state of the reduction as the second. If an error is
	 * passed to the callback, the reduction is stopped and the main `callback` is
	 * immediately called with the error. Invoked with (memo, item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result is the reduced value. Invoked with
	 * (err, result).
	 * @example
	 *
	 * async.reduce([1,2,3], 0, function(memo, item, callback) {
	 *     // pointless async:
	 *     process.nextTick(function() {
	 *         callback(null, memo + item)
	 *     });
	 * }, function(err, result) {
	 *     // result is now equal to the last value of memo, which is 6
	 * });
	 */
	function reduce(coll, memo, iteratee, callback) {
	    callback = once(callback || noop);
	    eachOfSeries(coll, function(x, i, callback) {
	        iteratee(memo, x, function(err, v) {
	            memo = v;
	            callback(err);
	        });
	    }, function(err) {
	        callback(err, memo);
	    });
	}
	
	/**
	 * Version of the compose function that is more natural to read. Each function
	 * consumes the return value of the previous function. It is the equivalent of
	 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
	 *
	 * Each function is executed with the `this` binding of the composed function.
	 *
	 * @name seq
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.compose]{@link module:ControlFlow.compose}
	 * @category Control Flow
	 * @param {...Function} functions - the asynchronous functions to compose
	 * @returns {Function} a function that composes the `functions` in order
	 * @example
	 *
	 * // Requires lodash (or underscore), express3 and dresende's orm2.
	 * // Part of an app, that fetches cats of the logged user.
	 * // This example uses `seq` function to avoid overnesting and error
	 * // handling clutter.
	 * app.get('/cats', function(request, response) {
	 *     var User = request.models.User;
	 *     async.seq(
	 *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
	 *         function(user, fn) {
	 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
	 *         }
	 *     )(req.session.user_id, function (err, cats) {
	 *         if (err) {
	 *             console.error(err);
	 *             response.json({ status: 'error', message: err.message });
	 *         } else {
	 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
	 *         }
	 *     });
	 * });
	 */
	var seq = rest(function seq(functions) {
	    return rest(function(args) {
	        var that = this;
	
	        var cb = args[args.length - 1];
	        if (typeof cb == 'function') {
	            args.pop();
	        } else {
	            cb = noop;
	        }
	
	        reduce(functions, args, function(newargs, fn, cb) {
	            fn.apply(that, newargs.concat(rest(function(err, nextargs) {
	                cb(err, nextargs);
	            })));
	        },
	        function(err, results) {
	            cb.apply(that, [err].concat(results));
	        });
	    });
	});
	
	/**
	 * Creates a function which is a composition of the passed asynchronous
	 * functions. Each function consumes the return value of the function that
	 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
	 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
	 *
	 * Each function is executed with the `this` binding of the composed function.
	 *
	 * @name compose
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {...Function} functions - the asynchronous functions to compose
	 * @returns {Function} an asynchronous function that is the composed
	 * asynchronous `functions`
	 * @example
	 *
	 * function add1(n, callback) {
	 *     setTimeout(function () {
	 *         callback(null, n + 1);
	 *     }, 10);
	 * }
	 *
	 * function mul3(n, callback) {
	 *     setTimeout(function () {
	 *         callback(null, n * 3);
	 *     }, 10);
	 * }
	 *
	 * var add1mul3 = async.compose(mul3, add1);
	 * add1mul3(4, function (err, result) {
	 *     // result now equals 15
	 * });
	 */
	rest(function(args) {
	    return seq.apply(null, args.reverse());
	});
	
	/**
	 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
	 * the concatenated list. The `iteratee`s are called in parallel, and the
	 * results are concatenated as they return. There is no guarantee that the
	 * results array will be returned in the original order of `coll` passed to the
	 * `iteratee` function.
	 *
	 * @name concat
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, results)` which must be called once
	 * it has completed with an error (which can be `null`) and an array of results.
	 * Invoked with (item, callback).
	 * @param {Function} [callback(err)] - A callback which is called after all the
	 * `iteratee` functions have finished, or an error occurs. Results is an array
	 * containing the concatenated results of the `iteratee` function. Invoked with
	 * (err, results).
	 * @example
	 *
	 * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
	 *     // files is now a list of filenames that exist in the 3 directories
	 * });
	 */
	
	/**
	 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
	 *
	 * @name concatSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.concat]{@link module:Collections.concat}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, results)` which must be called once
	 * it has completed with an error (which can be `null`) and an array of results.
	 * Invoked with (item, callback).
	 * @param {Function} [callback(err)] - A callback which is called after all the
	 * `iteratee` functions have finished, or an error occurs. Results is an array
	 * containing the concatenated results of the `iteratee` function. Invoked with
	 * (err, results).
	 */
	
	/**
	 * Returns a function that when called, calls-back with the values provided.
	 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
	 * [`auto`]{@link module:ControlFlow.auto}.
	 *
	 * @name constant
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {...*} arguments... - Any number of arguments to automatically invoke
	 * callback with.
	 * @returns {Function} Returns a function that when invoked, automatically
	 * invokes the callback with the previous given arguments.
	 * @example
	 *
	 * async.waterfall([
	 *     async.constant(42),
	 *     function (value, next) {
	 *         // value === 42
	 *     },
	 *     //...
	 * ], callback);
	 *
	 * async.waterfall([
	 *     async.constant(filename, "utf8"),
	 *     fs.readFile,
	 *     function (fileData, next) {
	 *         //...
	 *     }
	 *     //...
	 * ], callback);
	 *
	 * async.auto({
	 *     hostname: async.constant("https://server.net/"),
	 *     port: findFreePort,
	 *     launchServer: ["hostname", "port", function (options, cb) {
	 *         startServer(options, cb);
	 *     }],
	 *     //...
	 * }, callback);
	 */
	rest(function(values) {
	    var args = [null].concat(values);
	    return initialParams(function (ignoredArgs, callback) {
	        return callback.apply(this, args);
	    });
	});
	
	/**
	 * Returns the first value in `coll` that passes an async truth test. The
	 * `iteratee` is applied in parallel, meaning the first iteratee to return
	 * `true` will fire the detect `callback` with that result. That means the
	 * result might not be the first item in the original `coll` (in terms of order)
	 * that passes the test.
	
	 * If order within the original `coll` is important, then look at
	 * [`detectSeries`]{@link module:Collections.detectSeries}.
	 *
	 * @name detect
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias find
	 * @category Collections
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, truthValue)` which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the `iteratee` functions have finished.
	 * Result will be the first item in the array that passes the truth test
	 * (iteratee) or the value `undefined` if none passed. Invoked with
	 * (err, result).
	 * @example
	 *
	 * async.detect(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, result) {
	 *     // result now equals the first file in the list that exists
	 * });
	 */
	
	/**
	 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name detectLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.detect]{@link module:Collections.detect}
	 * @alias findLimit
	 * @category Collections
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, truthValue)` which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the `iteratee` functions have finished.
	 * Result will be the first item in the array that passes the truth test
	 * (iteratee) or the value `undefined` if none passed. Invoked with
	 * (err, result).
	 */
	
	/**
	 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
	 *
	 * @name detectSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.detect]{@link module:Collections.detect}
	 * @alias findSeries
	 * @category Collections
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The iteratee is passed a `callback(err, truthValue)` which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the `iteratee` functions have finished.
	 * Result will be the first item in the array that passes the truth test
	 * (iteratee) or the value `undefined` if none passed. Invoked with
	 * (err, result).
	 */
	
	function consoleFunc(name) {
	    return rest(function (fn, args) {
	        fn.apply(null, args.concat(rest(function (err, args) {
	            if (typeof console === 'object') {
	                if (err) {
	                    if (console.error) {
	                        console.error(err);
	                    }
	                }
	                else if (console[name]) {
	                    arrayEach(args, function (x) {
	                        console[name](x);
	                    });
	                }
	            }
	        })));
	    });
	}
	
	/**
	 * Logs the result of an `async` function to the `console` using `console.dir`
	 * to display the properties of the resulting object. Only works in Node.js or
	 * in browsers that support `console.dir` and `console.error` (such as FF and
	 * Chrome). If multiple arguments are returned from the async function,
	 * `console.dir` is called on each argument in order.
	 *
	 * @name dir
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {Function} function - The function you want to eventually apply all
	 * arguments to.
	 * @param {...*} arguments... - Any number of arguments to apply to the function.
	 * @example
	 *
	 * // in a module
	 * var hello = function(name, callback) {
	 *     setTimeout(function() {
	 *         callback(null, {hello: name});
	 *     }, 1000);
	 * };
	 *
	 * // in the node repl
	 * node> async.dir(hello, 'world');
	 * {hello: 'world'}
	 */
	consoleFunc('dir');
	
	function _withoutIndex(iteratee) {
	    return function (value, index, callback) {
	        return iteratee(value, callback);
	    };
	}
	
	/**
	 * Applies the function `iteratee` to each item in `coll`, in parallel.
	 * The `iteratee` is called with an item from the list, and a callback for when
	 * it has finished. If the `iteratee` passes an error to its `callback`, the
	 * main `callback` (for the `each` function) is immediately called with the
	 * error.
	 *
	 * Note, that since this function applies `iteratee` to each item in parallel,
	 * there is no guarantee that the iteratee functions will complete in order.
	 *
	 * @name each
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias forEach
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each item
	 * in `coll`. The iteratee is passed a `callback(err)` which must be called once
	 * it has completed. If no error has occurred, the `callback` should be run
	 * without arguments or with an explicit `null` argument. The array index is not
	 * passed to the iteratee. Invoked with (item, callback). If you need the index,
	 * use `eachOf`.
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 * @example
	 *
	 * // assuming openFiles is an array of file names and saveFile is a function
	 * // to save the modified contents of that file:
	 *
	 * async.each(openFiles, saveFile, function(err){
	 *   // if any of the saves produced an error, err would equal that error
	 * });
	 *
	 * // assuming openFiles is an array of file names
	 * async.each(openFiles, function(file, callback) {
	 *
	 *     // Perform operation on file here.
	 *     console.log('Processing file ' + file);
	 *
	 *     if( file.length > 32 ) {
	 *       console.log('This file name is too long');
	 *       callback('File name too long');
	 *     } else {
	 *       // Do work to process file here
	 *       console.log('File processed');
	 *       callback();
	 *     }
	 * }, function(err) {
	 *     // if any of the file processing produced an error, err would equal that error
	 *     if( err ) {
	 *       // One of the iterations produced an error.
	 *       // All processing will now stop.
	 *       console.log('A file failed to process');
	 *     } else {
	 *       console.log('All files have been processed successfully');
	 *     }
	 * });
	 */
	function eachLimit(coll, iteratee, callback) {
	    eachOf(coll, _withoutIndex(iteratee), callback);
	}
	
	/**
	 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
	 *
	 * @name eachSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.each]{@link module:Collections.each}
	 * @alias forEachSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each
	 * item in `coll`. The iteratee is passed a `callback(err)` which must be called
	 * once it has completed. If no error has occurred, the `callback` should be run
	 * without arguments or with an explicit `null` argument. The array index is
	 * not passed to the iteratee. Invoked with (item, callback). If you need the
	 * index, use `eachOfSeries`.
	 * @param {Function} [callback] - A callback which is called when all
	 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	 */
	
	/**
	 * Returns `true` if every element in `coll` satisfies an async test. If any
	 * iteratee call returns `false`, the main `callback` is immediately called.
	 *
	 * @name every
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias all
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the
	 * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	 * which must be called with a  boolean argument once it has completed. Invoked
	 * with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result will be either `true` or `false`
	 * depending on the values of the async tests. Invoked with (err, result).
	 * @example
	 *
	 * async.every(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, result) {
	 *     // if result is true then every file exists
	 * });
	 */
	
	/**
	 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name everyLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.every]{@link module:Collections.every}
	 * @alias allLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in the
	 * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	 * which must be called with a  boolean argument once it has completed. Invoked
	 * with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result will be either `true` or `false`
	 * depending on the values of the async tests. Invoked with (err, result).
	 */
	
	/**
	 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
	 *
	 * @name everySeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.every]{@link module:Collections.every}
	 * @alias allSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the
	 * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	 * which must be called with a  boolean argument once it has completed. Invoked
	 * with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Result will be either `true` or `false`
	 * depending on the values of the async tests. Invoked with (err, result).
	 */
	
	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	
	/**
	 * Returns a new array of all the values in `coll` which pass an async truth
	 * test. This operation is performed in parallel, but the results array will be
	 * in the same order as the original.
	 *
	 * @name filter
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias select
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 * @example
	 *
	 * async.filter(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, results) {
	 *     // results now equals an array of the existing files
	 * });
	 */
	
	/**
	 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name filterLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.filter]{@link module:Collections.filter}
	 * @alias selectLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 */
	
	/**
	 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
	 *
	 * @name filterSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.filter]{@link module:Collections.filter}
	 * @alias selectSeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results)
	 */
	
	/**
	 * Logs the result of an `async` function to the `console`. Only works in
	 * Node.js or in browsers that support `console.log` and `console.error` (such
	 * as FF and Chrome). If multiple arguments are returned from the async
	 * function, `console.log` is called on each argument in order.
	 *
	 * @name log
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @category Util
	 * @param {Function} function - The function you want to eventually apply all
	 * arguments to.
	 * @param {...*} arguments... - Any number of arguments to apply to the function.
	 * @example
	 *
	 * // in a module
	 * var hello = function(name, callback) {
	 *     setTimeout(function() {
	 *         callback(null, 'hello ' + name);
	 *     }, 1000);
	 * };
	 *
	 * // in the node repl
	 * node> async.log(hello, 'world');
	 * 'hello world'
	 */
	consoleFunc('log');
	
	/**
	 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
	 *
	 * Produces a new Object by mapping each value of `obj` through the `iteratee`
	 * function. The `iteratee` is called each `value` and `key` from `obj` and a
	 * callback for when it has finished processing. Each of these callbacks takes
	 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
	 * passes an error to its callback, the main `callback` (for the `mapValues`
	 * function) is immediately called with the error.
	 *
	 * Note, the order of the keys in the result is not guaranteed.  The keys will
	 * be roughly in the order they complete, (but this is very engine-specific)
	 *
	 * @name mapValues
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @category Collection
	 * @param {Object} obj - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each value and key in
	 * `coll`. The iteratee is passed a `callback(err, transformed)` which must be
	 * called once it has completed with an error (which can be `null`) and a
	 * transformed value. Invoked with (value, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. `result` is a new object consisting
	 * of each key from `obj`, with each transformed value on the right-hand side.
	 * Invoked with (err, result).
	 * @example
	 *
	 * async.mapValues({
	 *     f1: 'file1',
	 *     f2: 'file2',
	 *     f3: 'file3'
	 * }, function (file, key, callback) {
	 *   fs.stat(file, callback);
	 * }, function(err, result) {
	 *     // result is now a map of stats for each file, e.g.
	 *     // {
	 *     //     f1: [stats for file1],
	 *     //     f2: [stats for file2],
	 *     //     f3: [stats for file3]
	 *     // }
	 * });
	 */
	
	/**
	 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
	 *
	 * @name mapValuesSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.mapValues]{@link module:Collections.mapValues}
	 * @category Collection
	 * @param {Object} obj - A collection to iterate over.
	 * @param {Function} iteratee - A function to apply to each value in `obj`.
	 * The iteratee is passed a `callback(err, transformed)` which must be called
	 * once it has completed with an error (which can be `null`) and a
	 * transformed value. Invoked with (value, key, callback).
	 * @param {Function} [callback] - A callback which is called when all `iteratee`
	 * functions have finished, or an error occurs. `result` is a new object consisting
	 * of each key from `obj`, with each transformed value on the right-hand side.
	 * Invoked with (err, result).
	 */
	
	/**
	 * Calls `callback` on a later loop around the event loop. In Node.js this just
	 * calls `setImmediate`.  In the browser it will use `setImmediate` if
	 * available, otherwise `setTimeout(callback, 0)`, which means other higher
	 * priority events may precede the execution of `callback`.
	 *
	 * This is used internally for browser-compatibility purposes.
	 *
	 * @name nextTick
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @alias setImmediate
	 * @category Util
	 * @param {Function} callback - The function to call on a later loop around
	 * the event loop. Invoked with (args...).
	 * @param {...*} args... - any number of additional arguments to pass to the
	 * callback on the next tick.
	 * @example
	 *
	 * var call_order = [];
	 * async.nextTick(function() {
	 *     call_order.push('two');
	 *     // call_order now equals ['one','two']
	 * });
	 * call_order.push('one');
	 *
	 * async.setImmediate(function (a, b, c) {
	 *     // a, b, and c equal 1, 2, and 3
	 * }, 1, 2, 3);
	 */
	var _defer$1;
	
	if (hasNextTick) {
	    _defer$1 = process.nextTick;
	} else if (hasSetImmediate) {
	    _defer$1 = setImmediate;
	} else {
	    _defer$1 = fallback;
	}
	
	wrap(_defer$1);
	
	/**
	 * Calls `callback` on a later loop around the event loop. In Node.js this just
	 * calls `setImmediate`.  In the browser it will use `setImmediate` if
	 * available, otherwise `setTimeout(callback, 0)`, which means other higher
	 * priority events may precede the execution of `callback`.
	 *
	 * This is used internally for browser-compatibility purposes.
	 *
	 * @name setImmediate
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @alias nextTick
	 * @category Util
	 * @param {Function} callback - The function to call on a later loop around
	 * the event loop. Invoked with (args...).
	 * @param {...*} args... - any number of additional arguments to pass to the
	 * callback on the next tick.
	 * @example
	 *
	 * var call_order = [];
	 * async.nextTick(function() {
	 *     call_order.push('two');
	 *     // call_order now equals ['one','two']
	 * });
	 * call_order.push('one');
	 *
	 * async.setImmediate(function (a, b, c) {
	 *     // a, b, and c equal 1, 2, and 3
	 * }, 1, 2, 3);
	 */
	
	/**
	 * A queue of tasks for the worker function to complete.
	 * @typedef {Object} QueueObject
	 * @memberOf module:ControlFlow
	 * @property {Function} length - a function returning the number of items
	 * waiting to be processed. Invoke with `queue.length()`.
	 * @property {boolean} started - a boolean indicating whether or not any
	 * items have been pushed and processed by the queue.
	 * @property {Function} running - a function returning the number of items
	 * currently being processed. Invoke with `queue.running()`.
	 * @property {Function} workersList - a function returning the array of items
	 * currently being processed. Invoke with `queue.workersList()`.
	 * @property {Function} idle - a function returning false if there are items
	 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
	 * @property {number} concurrency - an integer for determining how many `worker`
	 * functions should be run in parallel. This property can be changed after a
	 * `queue` is created to alter the concurrency on-the-fly.
	 * @property {Function} push - add a new task to the `queue`. Calls `callback`
	 * once the `worker` has finished processing the task. Instead of a single task,
	 * a `tasks` array can be submitted. The respective callback is used for every
	 * task in the list. Invoke with `queue.push(task, [callback])`,
	 * @property {Function} unshift - add a new task to the front of the `queue`.
	 * Invoke with `queue.unshift(task, [callback])`.
	 * @property {Function} saturated - a callback that is called when the number of
	 * running workers hits the `concurrency` limit, and further tasks will be
	 * queued.
	 * @property {Function} unsaturated - a callback that is called when the number
	 * of running workers is less than the `concurrency` & `buffer` limits, and
	 * further tasks will not be queued.
	 * @property {number} buffer - A minimum threshold buffer in order to say that
	 * the `queue` is `unsaturated`.
	 * @property {Function} empty - a callback that is called when the last item
	 * from the `queue` is given to a `worker`.
	 * @property {Function} drain - a callback that is called when the last item
	 * from the `queue` has returned from the `worker`.
	 * @property {Function} error - a callback that is called when a task errors.
	 * Has the signature `function(error, task)`.
	 * @property {boolean} paused - a boolean for determining whether the queue is
	 * in a paused state.
	 * @property {Function} pause - a function that pauses the processing of tasks
	 * until `resume()` is called. Invoke with `queue.pause()`.
	 * @property {Function} resume - a function that resumes the processing of
	 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
	 * @property {Function} kill - a function that removes the `drain` callback and
	 * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.
	 */
	
	/**
	 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
	 * `queue` are processed in parallel (up to the `concurrency` limit). If all
	 * `worker`s are in progress, the task is queued until one becomes available.
	 * Once a `worker` completes a `task`, that `task`'s callback is called.
	 *
	 * @name queue
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Function} worker - An asynchronous function for processing a queued
	 * task, which must call its `callback(err)` argument when finished, with an
	 * optional `error` as an argument.  If you want to handle errors from an
	 * individual task, pass a callback to `q.push()`. Invoked with
	 * (task, callback).
	 * @param {number} [concurrency=1] - An `integer` for determining how many
	 * `worker` functions should be run in parallel.  If omitted, the concurrency
	 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
	 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
	 * attached as certain properties to listen for specific events during the
	 * lifecycle of the queue.
	 * @example
	 *
	 * // create a queue object with concurrency 2
	 * var q = async.queue(function(task, callback) {
	 *     console.log('hello ' + task.name);
	 *     callback();
	 * }, 2);
	 *
	 * // assign a callback
	 * q.drain = function() {
	 *     console.log('all items have been processed');
	 * };
	 *
	 * // add some items to the queue
	 * q.push({name: 'foo'}, function(err) {
	 *     console.log('finished processing foo');
	 * });
	 * q.push({name: 'bar'}, function (err) {
	 *     console.log('finished processing bar');
	 * });
	 *
	 * // add some items to the queue (batch-wise)
	 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
	 *     console.log('finished processing item');
	 * });
	 *
	 * // add some items to the front of the queue
	 * q.unshift({name: 'bar'}, function (err) {
	 *     console.log('finished processing bar');
	 * });
	 */
	
	/**
	 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
	 * completed in ascending priority order.
	 *
	 * @name priorityQueue
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.queue]{@link module:ControlFlow.queue}
	 * @category Control Flow
	 * @param {Function} worker - An asynchronous function for processing a queued
	 * task, which must call its `callback(err)` argument when finished, with an
	 * optional `error` as an argument.  If you want to handle errors from an
	 * individual task, pass a callback to `q.push()`. Invoked with
	 * (task, callback).
	 * @param {number} concurrency - An `integer` for determining how many `worker`
	 * functions should be run in parallel.  If omitted, the concurrency defaults to
	 * `1`.  If the concurrency is `0`, an error is thrown.
	 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
	 * differences between `queue` and `priorityQueue` objects:
	 * * `push(task, priority, [callback])` - `priority` should be a number. If an
	 *   array of `tasks` is given, all tasks will be assigned the same priority.
	 * * The `unshift` method was removed.
	 */
	
	/**
	 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
	 *
	 * @name reject
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.filter]{@link module:Collections.filter}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 * @example
	 *
	 * async.reject(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, results) {
	 *     // results now equals an array of missing files
	 *     createFiles(results);
	 * });
	 */
	
	/**
	 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
	 * time.
	 *
	 * @name rejectLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.reject]{@link module:Collections.reject}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 */
	
	/**
	 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
	 *
	 * @name rejectSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.reject]{@link module:Collections.reject}
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	 * with a boolean argument once it has completed. Invoked with (item, callback).
	 * @param {Function} [callback] - A callback which is called after all the
	 * `iteratee` functions have finished. Invoked with (err, results).
	 */
	
	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	
	/**
	 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it
	 * retryable, rather than immediately calling it with retries.
	 *
	 * @name retryable
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.retry]{@link module:ControlFlow.retry}
	 * @category Control Flow
	 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
	 * options, exactly the same as from `retry`
	 * @param {Function} task - the asynchronous function to wrap
	 * @returns {Functions} The wrapped function, which when invoked, will retry on
	 * an error, based on the parameters specified in `opts`.
	 * @example
	 *
	 * async.auto({
	 *     dep1: async.retryable(3, getFromFlakyService),
	 *     process: ["dep1", async.retryable(3, function (results, cb) {
	 *         maybeProcessData(results.dep1, cb);
	 *     })]
	 * }, callback);
	 */
	
	/**
	 * Returns `true` if at least one element in the `coll` satisfies an async test.
	 * If any iteratee call returns `true`, the main `callback` is immediately
	 * called.
	 *
	 * @name some
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @alias any
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the array
	 * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	 * be called with a boolean argument once it has completed. Invoked with
	 * (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the iteratee functions have finished.
	 * Result will be either `true` or `false` depending on the values of the async
	 * tests. Invoked with (err, result).
	 * @example
	 *
	 * async.some(['file1','file2','file3'], function(filePath, callback) {
	 *     fs.access(filePath, function(err) {
	 *         callback(null, !err)
	 *     });
	 * }, function(err, result) {
	 *     // if result is true then at least one of the files exists
	 * });
	 */
	
	/**
	 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
	 *
	 * @name someLimit
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.some]{@link module:Collections.some}
	 * @alias anyLimit
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {number} limit - The maximum number of async operations at a time.
	 * @param {Function} iteratee - A truth test to apply to each item in the array
	 * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	 * be called with a boolean argument once it has completed. Invoked with
	 * (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the iteratee functions have finished.
	 * Result will be either `true` or `false` depending on the values of the async
	 * tests. Invoked with (err, result).
	 */
	
	/**
	 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
	 *
	 * @name someSeries
	 * @static
	 * @memberOf module:Collections
	 * @method
	 * @see [async.some]{@link module:Collections.some}
	 * @alias anySeries
	 * @category Collection
	 * @param {Array|Iterable|Object} coll - A collection to iterate over.
	 * @param {Function} iteratee - A truth test to apply to each item in the array
	 * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	 * be called with a boolean argument once it has completed. Invoked with
	 * (item, callback).
	 * @param {Function} [callback] - A callback which is called as soon as any
	 * iteratee returns `true`, or after all the iteratee functions have finished.
	 * Result will be either `true` or `false` depending on the values of the async
	 * tests. Invoked with (err, result).
	 */
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil;
	var nativeMax$1 = Math.max;
	
	/**
	 * Calls the `iteratee` function `n` times, and accumulates results in the same
	 * manner you would use with [map]{@link module:Collections.map}.
	 *
	 * @name times
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.map]{@link module:Collections.map}
	 * @category Control Flow
	 * @param {number} n - The number of times to run the function.
	 * @param {Function} iteratee - The function to call `n` times. Invoked with the
	 * iteration index and a callback (n, next).
	 * @param {Function} callback - see {@link module:Collections.map}.
	 * @example
	 *
	 * // Pretend this is some complicated async factory
	 * var createUser = function(id, callback) {
	 *     callback(null, {
	 *         id: 'user' + id
	 *     });
	 * };
	 *
	 * // generate 5 users
	 * async.times(5, function(n, next) {
	 *     createUser(n, function(err, user) {
	 *         next(err, user);
	 *     });
	 * }, function(err, users) {
	 *     // we should now have 5 users
	 * });
	 */
	
	/**
	 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
	 *
	 * @name timesSeries
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @see [async.times]{@link module:ControlFlow.times}
	 * @category Control Flow
	 * @param {number} n - The number of times to run the function.
	 * @param {Function} iteratee - The function to call `n` times. Invoked with the
	 * iteration index and a callback (n, next).
	 * @param {Function} callback - see {@link module:Collections.map}.
	 */
	
	/**
	 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
	 * unmemoized form. Handy for testing.
	 *
	 * @name unmemoize
	 * @static
	 * @memberOf module:Utils
	 * @method
	 * @see [async.memoize]{@link module:Utils.memoize}
	 * @category Util
	 * @param {Function} fn - the memoized function
	 * @returns {Function} a function that calls the original unmemoized function
	 */
	
	/**
	 * Runs the `tasks` array of functions in series, each passing their results to
	 * the next in the array. However, if any of the `tasks` pass an error to their
	 * own callback, the next function is not executed, and the main `callback` is
	 * immediately called with the error.
	 *
	 * @name waterfall
	 * @static
	 * @memberOf module:ControlFlow
	 * @method
	 * @category Control Flow
	 * @param {Array} tasks - An array of functions to run, each function is passed
	 * a `callback(err, result1, result2, ...)` it must call on completion. The
	 * first argument is an error (which can be `null`) and any further arguments
	 * will be passed as arguments in order to the next task.
	 * @param {Function} [callback] - An optional callback to run once all the
	 * functions have completed. This will be passed the results of the last task's
	 * callback. Invoked with (err, [results]).
	 * @returns undefined
	 * @example
	 *
	 * async.waterfall([
	 *     function(callback) {
	 *         callback(null, 'one', 'two');
	 *     },
	 *     function(arg1, arg2, callback) {
	 *         // arg1 now equals 'one' and arg2 now equals 'two'
	 *         callback(null, 'three');
	 *     },
	 *     function(arg1, callback) {
	 *         // arg1 now equals 'three'
	 *         callback(null, 'done');
	 *     }
	 * ], function (err, result) {
	 *     // result now equals 'done'
	 * });
	 *
	 * // Or, with named functions:
	 * async.waterfall([
	 *     myFirstFunction,
	 *     mySecondFunction,
	 *     myLastFunction,
	 * ], function (err, result) {
	 *     // result now equals 'done'
	 * });
	 * function myFirstFunction(callback) {
	 *     callback(null, 'one', 'two');
	 * }
	 * function mySecondFunction(arg1, arg2, callback) {
	 *     // arg1 now equals 'one' and arg2 now equals 'two'
	 *     callback(null, 'three');
	 * }
	 * function myLastFunction(arg1, callback) {
	 *     // arg1 now equals 'three'
	 *     callback(null, 'done');
	 * }
	 */
	
	/**
	 * Async is a utility module which provides straight-forward, powerful functions
	 * for working with asynchronous JavaScript. Although originally designed for
	 * use with [Node.js](http://nodejs.org) and installable via
	 * `npm install --save async`, it can also be used directly in the browser.
	 * @module async
	 */
	
	/**
	 * A collection of `async` functions for manipulating collections, such as
	 * arrays and objects.
	 * @module Collections
	 */
	
	/**
	 * A collection of `async` functions for controlling the flow through a script.
	 * @module ControlFlow
	 */
	
	 /**
	  * A collection of `async` utility functions.
	  * @module Utils
	  */
	
	/**
	 * @hidden
	 */
	var errorCodeLookup;
	/**
	 * Lazily construct error code lookup, since DropboxJS might be loaded *after* BrowserFS (or not at all!)
	 * @hidden
	 */
	function constructErrorCodeLookup() {
	    if (errorCodeLookup) {
	        return;
	    }
	    errorCodeLookup = {};
	    // This indicates a network transmission error on modern browsers. Internet Explorer might cause this code to be reported on some API server errors.
	    errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO;
	    // This happens when the contentHash parameter passed to a Dropbox.Client#readdir or Dropbox.Client#stat matches the most recent content, so the API call response is omitted, to save bandwidth.
	    // errorCodeLookup[Dropbox.ApiError.NO_CONTENT];
	    // The error property on {Dropbox.ApiError#response} should indicate which input parameter is invalid and why.
	    errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL;
	    // The OAuth token used for the request will never become valid again, so the user should be re-authenticated.
	    errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM;
	    // This indicates a bug in dropbox.js and should never occur under normal circumstances.
	    // ^ Actually, that's false. This occurs when you try to move folders to themselves, or move a file over another file.
	    errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM;
	    // This happens when trying to read from a non-existing file, readdir a non-existing directory, write a file into a non-existing directory, etc.
	    errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT;
	    // This indicates a bug in dropbox.js and should never occur under normal circumstances.
	    errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL;
	    // This happens when a Dropbox.Client#readdir or Dropbox.Client#stat call would return more than a maximum amount of directory entries.
	    errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL;
	    // This is used by some backend methods to indicate that the client needs to download server-side changes and perform conflict resolution. Under normal usage, errors with this code should never surface to the code using dropbox.js.
	    errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL;
	    // Status value indicating that the application is making too many requests.
	    errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY;
	    // The request should be retried after some time.
	    errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY;
	    // Status value indicating that the user's Dropbox is over its storage quota.
	    errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
	}
	/**
	 * @hidden
	 */
	function isFileInfo(cache) {
	    return cache && cache.stat.isFile;
	}
	/**
	 * @hidden
	 */
	function isDirInfo(cache) {
	    return cache && cache.stat.isFolder;
	}
	/**
	 * @hidden
	 */
	function isArrayBuffer(ab) {
	    // Accept null / undefined, too.
	    return ab === null || ab === undefined || (typeof (ab) === 'object' && typeof (ab['byteLength']) === 'number');
	}
	/**
	 * Wraps a Dropbox client and caches operations.
	 * @hidden
	 */
	var CachedDropboxClient = function CachedDropboxClient(client) {
	    this._cache = {};
	    this._client = client;
	};
	CachedDropboxClient.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	    var cacheInfo = this.getCachedDirInfo(p);
	    this._wrap(function (interceptCb) {
	        if (cacheInfo !== null && cacheInfo.contents) {
	            this$1._client.readdir(p, {
	                contentHash: cacheInfo.stat.contentHash
	            }, interceptCb);
	        }
	        else {
	            this$1._client.readdir(p, interceptCb);
	        }
	    }, function (err, filenames, stat, folderEntries) {
	        if (err) {
	            if (err.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
	                cb(null, cacheInfo.contents.slice(0));
	            }
	            else {
	                cb(err);
	            }
	        }
	        else {
	            this$1.updateCachedDirInfo(p, stat, filenames.slice(0));
	            folderEntries.forEach(function (entry) {
	                this$1.updateCachedInfo(path.join(p, entry.name), entry);
	            });
	            cb(null, filenames);
	        }
	    });
	};
	CachedDropboxClient.prototype.remove = function remove (p, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.remove(p, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat);
	        }
	        cb(err);
	    });
	};
	CachedDropboxClient.prototype.move = function move (src, dest, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.move(src, dest, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.deleteCachedInfo(src);
	            this$1.updateCachedInfo(dest, stat);
	        }
	        cb(err);
	    });
	};
	CachedDropboxClient.prototype.stat = function stat (p, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.stat(p, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat);
	        }
	        cb(err, stat);
	    });
	};
	CachedDropboxClient.prototype.readFile = function readFile (p, cb) {
	        var this$1 = this;
	
	    var cacheInfo = this.getCachedFileInfo(p);
	    if (cacheInfo !== null && cacheInfo.contents !== null) {
	        // Try to use cached info; issue a stat to see if contents are up-to-date.
	        this.stat(p, function (error, stat) {
	            if (error) {
	                cb(error);
	            }
	            else if (stat.contentHash === cacheInfo.stat.contentHash) {
	                // No file changes.
	                cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
	            }
	            else {
	                // File changes; rerun to trigger actual readFile.
	                this$1.readFile(p, cb);
	            }
	        });
	    }
	    else {
	        this._wrap(function (interceptCb) {
	            this$1._client.readFile(p, { arrayBuffer: true }, interceptCb);
	        }, function (err, contents, stat) {
	            if (!err) {
	                this$1.updateCachedInfo(p, stat, contents.slice(0));
	            }
	            cb(err, contents, stat);
	        });
	    }
	};
	CachedDropboxClient.prototype.writeFile = function writeFile (p, contents, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.writeFile(p, contents, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat, contents.slice(0));
	        }
	        cb(err, stat);
	    });
	};
	CachedDropboxClient.prototype.mkdir = function mkdir (p, cb) {
	        var this$1 = this;
	
	    this._wrap(function (interceptCb) {
	        this$1._client.mkdir(p, interceptCb);
	    }, function (err, stat) {
	        if (!err) {
	            this$1.updateCachedInfo(p, stat, []);
	        }
	        cb(err);
	    });
	};
	/**
	 * Wraps an operation such that we retry a failed operation 3 times.
	 * Necessary to deal with Dropbox rate limiting.
	 *
	 * @param performOp Function that performs the operation. Will be called up to three times.
	 * @param cb Called when the operation succeeds, fails in a non-temporary manner, or fails three times.
	 */
	CachedDropboxClient.prototype._wrap = function _wrap (performOp, cb) {
	    var numRun = 0;
	    var interceptCb = function (error) {
	        // Timeout duration, in seconds.
	        var timeoutDuration = 2;
	        if (error && 3 > (++numRun)) {
	            switch (error.status) {
	                case Dropbox.ApiError.SERVER_ERROR:
	                case Dropbox.ApiError.NETWORK_ERROR:
	                case Dropbox.ApiError.RATE_LIMITED:
	                    setTimeout(function () {
	                        performOp(interceptCb);
	                    }, timeoutDuration * 1000);
	                    break;
	                default:
	                    cb.apply(null, arguments);
	                    break;
	            }
	        }
	        else {
	            cb.apply(null, arguments);
	        }
	    };
	    performOp(interceptCb);
	};
	CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo (p) {
	    return this._cache[p.toLowerCase()];
	};
	CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo (p, cache) {
	    this._cache[p.toLowerCase()] = cache;
	};
	CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo (p) {
	    delete this._cache[p.toLowerCase()];
	};
	CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo (p) {
	    var info = this.getCachedInfo(p);
	    if (isDirInfo(info)) {
	        return info;
	    }
	    else {
	        return null;
	    }
	};
	CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo (p) {
	    var info = this.getCachedInfo(p);
	    if (isFileInfo(info)) {
	        return info;
	    }
	    else {
	        return null;
	    }
	};
	CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo (p, stat, contents) {
	        if ( contents === void 0 ) contents = null;
	
	    var cachedInfo = this.getCachedInfo(p);
	    // Dropbox uses the *contentHash* property for directories.
	    // Ignore stat objects w/o a contentHash defined; those actually exist!!!
	    // (Example: readdir returns an array of stat objs; stat objs for dirs in that context have no contentHash)
	    if (stat.contentHash !== null && (cachedInfo === undefined || cachedInfo.stat.contentHash !== stat.contentHash)) {
	        this.putCachedInfo(p, {
	            stat: stat,
	            contents: contents
	        });
	    }
	};
	CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo (p, stat, contents) {
	        if ( contents === void 0 ) contents = null;
	
	    var cachedInfo = this.getCachedInfo(p);
	    // Dropbox uses the *versionTag* property for files.
	    // Ignore stat objects w/o a versionTag defined.
	    if (stat.versionTag !== null && (cachedInfo === undefined || cachedInfo.stat.versionTag !== stat.versionTag)) {
	        this.putCachedInfo(p, {
	            stat: stat,
	            contents: contents
	        });
	    }
	};
	CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo (p, stat, contents) {
	        if ( contents === void 0 ) contents = null;
	
	    if (stat.isFile && isArrayBuffer(contents)) {
	        this.updateCachedFileInfo(p, stat, contents);
	    }
	    else if (stat.isFolder && Array.isArray(contents)) {
	        this.updateCachedDirInfo(p, stat, contents);
	    }
	};
	var DropboxFile = (function (PreloadFile$$1) {
	    function DropboxFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile$$1 ) DropboxFile.__proto__ = PreloadFile$$1;
	    DropboxFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    DropboxFile.prototype.constructor = DropboxFile;
	    DropboxFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (this.isDirty()) {
	            var buffer$$1 = this.getBuffer(), arrayBuffer = buffer2ArrayBuffer(buffer$$1);
	            this._fs._writeFileStrict(this.getPath(), arrayBuffer, function (e) {
	                if (!e) {
	                    this$1.resetDirty();
	                }
	                cb(e);
	            });
	        }
	        else {
	            cb();
	        }
	    };
	    DropboxFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	
	    return DropboxFile;
	}(PreloadFile));
	/**
	 * A read/write file system backed by Dropbox cloud storage.
	 *
	 * Uses the Dropbox V1 API.
	 *
	 * NOTE: You must use the v0.10 version of the [Dropbox JavaScript SDK](https://www.npmjs.com/package/dropbox).
	 */
	var DropboxFileSystem = (function (BaseFileSystem$$1) {
	    function DropboxFileSystem(client, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        this._client = new CachedDropboxClient(client);
	        deprecationMessage(deprecateMsg, DropboxFileSystem.Name, { client: "authenticated dropbox client instance" });
	        constructErrorCodeLookup();
	    }
	
	    if ( BaseFileSystem$$1 ) DropboxFileSystem.__proto__ = BaseFileSystem$$1;
	    DropboxFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    DropboxFileSystem.prototype.constructor = DropboxFileSystem;
	    /**
	     * Creates a new DropboxFileSystem instance with the given options.
	     * Must be given an *authenticated* DropboxJS client from the old v0.10 version of the Dropbox JS SDK.
	     */
	    DropboxFileSystem.Create = function Create (opts, cb) {
	        cb(null, new DropboxFileSystem(opts.client, false));
	    };
	    DropboxFileSystem.isAvailable = function isAvailable () {
	        // Checks if the Dropbox library is loaded.
	        return typeof Dropbox !== 'undefined';
	    };
	    DropboxFileSystem.prototype.getName = function getName () {
	        return DropboxFileSystem.Name;
	    };
	    DropboxFileSystem.prototype.isReadOnly = function isReadOnly () {
	        return false;
	    };
	    // Dropbox doesn't support symlinks, properties, or synchronous calls
	    DropboxFileSystem.prototype.supportsSymlinks = function supportsSymlinks () {
	        return false;
	    };
	    DropboxFileSystem.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    DropboxFileSystem.prototype.supportsSynch = function supportsSynch () {
	        return false;
	    };
	    DropboxFileSystem.prototype.empty = function empty (mainCb) {
	        var this$1 = this;
	
	        this._client.readdir('/', function (error, files) {
	            if (error) {
	                mainCb(this$1.convert(error, '/'));
	            }
	            else {
	                var deleteFile = function (file, cb) {
	                    var p = path.join('/', file);
	                    this$1._client.remove(p, function (err) {
	                        cb(err ? this$1.convert(err, p) : null);
	                    });
	                };
	                var finished = function (err) {
	                    if (err) {
	                        mainCb(err);
	                    }
	                    else {
	                        mainCb();
	                    }
	                };
	                // XXX: <any> typing is to get around overly-restrictive ErrorCallback typing.
	                eachLimit(files, deleteFile, finished);
	            }
	        });
	    };
	    DropboxFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        this._client.move(oldPath, newPath, function (error) {
	            if (error) {
	                // the move is permitted if newPath is a file.
	                // Check if this is the case, and remove if so.
	                this$1._client.stat(newPath, function (error2, stat) {
	                    if (error2 || stat.isFolder) {
	                        var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
	                        cb(this$1.convert(error, missingPath));
	                    }
	                    else {
	                        // Delete file, repeat rename.
	                        this$1._client.remove(newPath, function (error2) {
	                            if (error2) {
	                                cb(this$1.convert(error2, newPath));
	                            }
	                            else {
	                                this$1.rename(oldPath, newPath, cb);
	                            }
	                        });
	                    }
	                });
	            }
	            else {
	                cb();
	            }
	        });
	    };
	    DropboxFileSystem.prototype.stat = function stat (path$$1, isLstat, cb) {
	        var this$1 = this;
	
	        // Ignore lstat case -- Dropbox doesn't support symlinks
	        // Stat the file
	        this._client.stat(path$$1, function (error, stat) {
	            if (error) {
	                cb(this$1.convert(error, path$$1));
	            }
	            else if (stat && stat.isRemoved) {
	                // Dropbox keeps track of deleted files, so if a file has existed in the
	                // past but doesn't any longer, you wont get an error
	                cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
	            }
	            else {
	                var stats = new Stats(this$1._statType(stat), stat.size);
	                return cb(null, stats);
	            }
	        });
	    };
	    DropboxFileSystem.prototype.open = function open (path$$1, flags, mode, cb) {
	        var this$1 = this;
	
	        // Try and get the file's contents
	        this._client.readFile(path$$1, function (error, content, dbStat) {
	            if (error) {
	                // If the file's being opened for reading and doesn't exist, return an
	                // error
	                if (flags.isReadable()) {
	                    cb(this$1.convert(error, path$$1));
	                }
	                else {
	                    switch (error.status) {
	                        // If it's being opened for writing or appending, create it so that
	                        // it can be written to
	                        case Dropbox.ApiError.NOT_FOUND:
	                            var ab = new ArrayBuffer(0);
	                            return this$1._writeFileStrict(path$$1, ab, function (error2, stat) {
	                                if (error2) {
	                                    cb(error2);
	                                }
	                                else {
	                                    var file = this$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));
	                                    cb(null, file);
	                                }
	                            });
	                        default:
	                            return cb(this$1.convert(error, path$$1));
	                    }
	                }
	            }
	            else {
	                // No error
	                var buffer$$1;
	                // Dropbox.js seems to set `content` to `null` rather than to an empty
	                // buffer when reading an empty file. Not sure why this is.
	                if (content === null) {
	                    buffer$$1 = emptyBuffer();
	                }
	                else {
	                    buffer$$1 = arrayBuffer2Buffer(content);
	                }
	                var file = this$1._makeFile(path$$1, flags, dbStat, buffer$$1);
	                return cb(null, file);
	            }
	        });
	    };
	    DropboxFileSystem.prototype._writeFileStrict = function _writeFileStrict (p, data, cb) {
	        var this$1 = this;
	
	        var parent = path.dirname(p);
	        this.stat(parent, false, function (error, stat) {
	            if (error) {
	                cb(ApiError.FileError(ErrorCode.ENOENT, parent));
	            }
	            else {
	                this$1._client.writeFile(p, data, function (error2, stat) {
	                    if (error2) {
	                        cb(this$1.convert(error2, p));
	                    }
	                    else {
	                        cb(null, stat);
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Private
	     * Returns a BrowserFS object representing the type of a Dropbox.js stat object
	     */
	    DropboxFileSystem.prototype._statType = function _statType (stat) {
	        return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
	    };
	    /**
	     * Private
	     * Returns a BrowserFS object representing a File, created from the data
	     * returned by calls to the Dropbox API.
	     */
	    DropboxFileSystem.prototype._makeFile = function _makeFile (path$$1, flag, stat, buffer$$1) {
	        var type = this._statType(stat);
	        var stats = new Stats(type, stat.size);
	        return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
	    };
	    /**
	     * Private
	     * Delete a file or directory from Dropbox
	     * isFile should reflect which call was made to remove the it (`unlink` or
	     * `rmdir`). If this doesn't match what's actually at `path`, an error will be
	     * returned
	     */
	    DropboxFileSystem.prototype._remove = function _remove (path$$1, cb, isFile) {
	        var this$1 = this;
	
	        this._client.stat(path$$1, function (error, stat) {
	            if (error) {
	                cb(this$1.convert(error, path$$1));
	            }
	            else {
	                if (stat.isFile && !isFile) {
	                    cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
	                }
	                else if (!stat.isFile && isFile) {
	                    cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
	                }
	                else {
	                    this$1._client.remove(path$$1, function (error) {
	                        if (error) {
	                            cb(this$1.convert(error, path$$1));
	                        }
	                        else {
	                            cb(null);
	                        }
	                    });
	                }
	            }
	        });
	    };
	    /**
	     * Delete a file
	     */
	    DropboxFileSystem.prototype.unlink = function unlink (path$$1, cb) {
	        this._remove(path$$1, cb, true);
	    };
	    /**
	     * Delete a directory
	     */
	    DropboxFileSystem.prototype.rmdir = function rmdir (path$$1, cb) {
	        this._remove(path$$1, cb, false);
	    };
	    /**
	     * Create a directory
	     */
	    DropboxFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	        var this$1 = this;
	
	        // Dropbox.js' client.mkdir() behaves like `mkdir -p`, i.e. it creates a
	        // directory and all its ancestors if they don't exist.
	        // Node's fs.mkdir() behaves like `mkdir`, i.e. it throws an error if an attempt
	        // is made to create a directory without a parent.
	        // To handle this inconsistency, a check for the existence of `path`'s parent
	        // must be performed before it is created, and an error thrown if it does
	        // not exist
	        var parent = path.dirname(p);
	        this._client.stat(parent, function (error, stat) {
	            if (error) {
	                cb(this$1.convert(error, parent));
	            }
	            else {
	                this$1._client.mkdir(p, function (error) {
	                    if (error) {
	                        cb(ApiError.FileError(ErrorCode.EEXIST, p));
	                    }
	                    else {
	                        cb(null);
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Get the names of the files in a directory
	     */
	    DropboxFileSystem.prototype.readdir = function readdir (path$$1, cb) {
	        var this$1 = this;
	
	        this._client.readdir(path$$1, function (error, files) {
	            if (error) {
	                return cb(this$1.convert(error));
	            }
	            else {
	                return cb(null, files);
	            }
	        });
	    };
	    /**
	     * Converts a Dropbox-JS error into a BFS error.
	     */
	    DropboxFileSystem.prototype.convert = function convert (err, path$$1) {
	        if ( path$$1 === void 0 ) path$$1 = null;
	
	        var errorCode = errorCodeLookup[err.status];
	        if (errorCode === undefined) {
	            errorCode = ErrorCode.EIO;
	        }
	        if (!path$$1) {
	            return new ApiError(errorCode);
	        }
	        else {
	            return ApiError.FileError(errorCode, path$$1);
	        }
	    };
	
	    return DropboxFileSystem;
	}(BaseFileSystem));
	
	DropboxFileSystem.Name = "Dropbox";
	DropboxFileSystem.Options = {
	    client: {
	        type: "object",
	        description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
	        validator: function (opt, cb) {
	            if (opt.isAuthenticated && opt.isAuthenticated()) {
	                cb();
	            }
	            else {
	                cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
	            }
	        }
	    }
	};
	
	/**
	 * @hidden
	 */
	function convertError(e, path$$1) {
	    if ( path$$1 === void 0 ) path$$1 = '';
	
	    var errno = e.errno;
	    var parent = e.node;
	    var paths = [];
	    while (parent) {
	        paths.unshift(parent.name);
	        if (parent === parent.parent) {
	            break;
	        }
	        parent = parent.parent;
	    }
	    return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? '/' + paths.join('/') : path$$1);
	}
	var EmscriptenFile = (function (BaseFile$$1) {
	    function EmscriptenFile(_fs, _FS, _path, _stream) {
	        BaseFile$$1.call(this);
	        this._fs = _fs;
	        this._FS = _FS;
	        this._path = _path;
	        this._stream = _stream;
	    }
	
	    if ( BaseFile$$1 ) EmscriptenFile.__proto__ = BaseFile$$1;
	    EmscriptenFile.prototype = Object.create( BaseFile$$1 && BaseFile$$1.prototype );
	    EmscriptenFile.prototype.constructor = EmscriptenFile;
	    EmscriptenFile.prototype.getPos = function getPos () {
	        return undefined;
	    };
	    EmscriptenFile.prototype.close = function close (cb) {
	        var err = null;
	        try {
	            this.closeSync();
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.closeSync = function closeSync () {
	        try {
	            this._FS.close(this._stream);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.stat = function stat (cb) {
	        try {
	            cb(null, this.statSync());
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    EmscriptenFile.prototype.statSync = function statSync () {
	        try {
	            return this._fs.statSync(this._path, false);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.truncate = function truncate (len, cb) {
	        var err = null;
	        try {
	            this.truncateSync(len);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.truncateSync = function truncateSync (len) {
	        try {
	            this._FS.ftruncate(this._stream.fd, len);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.write = function write (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    EmscriptenFile.prototype.writeSync = function writeSync (buffer$$1, offset, length, position) {
	        try {
	            var u8 = buffer2Uint8array(buffer$$1);
	            // Emscripten is particular about what position is set to.
	            var emPosition = position === null ? undefined : position;
	            return this._FS.write(this._stream, u8, offset, length, emPosition);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.read = function read (buffer$$1, offset, length, position, cb) {
	        try {
	            cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    EmscriptenFile.prototype.readSync = function readSync (buffer$$1, offset, length, position) {
	        try {
	            var u8 = buffer2Uint8array(buffer$$1);
	            // Emscripten is particular about what position is set to.
	            var emPosition = position === null ? undefined : position;
	            return this._FS.read(this._stream, u8, offset, length, emPosition);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.sync = function sync (cb) {
	        // NOP.
	        cb();
	    };
	    EmscriptenFile.prototype.syncSync = function syncSync () {
	        // NOP.
	    };
	    EmscriptenFile.prototype.chown = function chown (uid, gid, cb) {
	        var err = null;
	        try {
	            this.chownSync(uid, gid);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.chownSync = function chownSync (uid, gid) {
	        try {
	            this._FS.fchown(this._stream.fd, uid, gid);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.chmod = function chmod (mode, cb) {
	        var err = null;
	        try {
	            this.chmodSync(mode);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.chmodSync = function chmodSync (mode) {
	        try {
	            this._FS.fchmod(this._stream.fd, mode);
	        }
	        catch (e) {
	            throw convertError(e, this._path);
	        }
	    };
	    EmscriptenFile.prototype.utimes = function utimes (atime, mtime, cb) {
	        var err = null;
	        try {
	            this.utimesSync(atime, mtime);
	        }
	        catch (e) {
	            err = e;
	        }
	        finally {
	            cb(err);
	        }
	    };
	    EmscriptenFile.prototype.utimesSync = function utimesSync (atime, mtime) {
	        this._fs.utimesSync(this._path, atime, mtime);
	    };
	
	    return EmscriptenFile;
	}(BaseFile));
	/**
	 * Mounts an Emscripten file system into the BrowserFS file system.
	 */
	var EmscriptenFileSystem = (function (SynchronousFileSystem$$1) {
	    function EmscriptenFileSystem(_FS) {
	        SynchronousFileSystem$$1.call(this);
	        this._FS = _FS;
	    }
	
	    if ( SynchronousFileSystem$$1 ) EmscriptenFileSystem.__proto__ = SynchronousFileSystem$$1;
	    EmscriptenFileSystem.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    EmscriptenFileSystem.prototype.constructor = EmscriptenFileSystem;
	    /**
	     * Create an EmscriptenFileSystem instance with the given options.
	     */
	    EmscriptenFileSystem.Create = function Create (opts, cb) {
	        cb(null, new EmscriptenFileSystem(opts.FS));
	    };
	    EmscriptenFileSystem.isAvailable = function isAvailable () { return true; };
	    EmscriptenFileSystem.prototype.getName = function getName () { return this._FS.DB_NAME(); };
	    EmscriptenFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
	    EmscriptenFileSystem.prototype.supportsLinks = function supportsLinks () { return true; };
	    EmscriptenFileSystem.prototype.supportsProps = function supportsProps () { return true; };
	    EmscriptenFileSystem.prototype.supportsSynch = function supportsSynch () { return true; };
	    EmscriptenFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	        try {
	            this._FS.rename(oldPath, newPath);
	        }
	        catch (e) {
	            if (e.errno === ErrorCode.ENOENT) {
	                throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
	            }
	            else {
	                throw convertError(e);
	            }
	        }
	    };
	    EmscriptenFileSystem.prototype.statSync = function statSync (p, isLstat) {
	        try {
	            var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
	            var itemType = this.modeToFileType(stats.mode);
	            return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.openSync = function openSync (p, flag, mode) {
	        try {
	            var stream = this._FS.open(p, flag.getFlagString(), mode);
	            if (this._FS.isDir(stream.node.mode)) {
	                this._FS.close(stream);
	                throw ApiError.EISDIR(p);
	            }
	            return new EmscriptenFile(this, this._FS, p, stream);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.unlinkSync = function unlinkSync (p) {
	        try {
	            this._FS.unlink(p);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	        try {
	            this._FS.rmdir(p);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
	        try {
	            this._FS.mkdir(p, mode);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.readdirSync = function readdirSync (p) {
	        try {
	            // Emscripten returns items for '.' and '..'. Node does not.
	            return this._FS.readdir(p).filter(function (p) { return p !== '.' && p !== '..'; });
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.truncateSync = function truncateSync (p, len) {
	        try {
	            this._FS.truncate(p, len);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.readFileSync = function readFileSync (p, encoding, flag) {
	        try {
	            var data = this._FS.readFile(p, { flags: flag.getFlagString() });
	            var buff = uint8Array2Buffer(data);
	            if (encoding) {
	                return buff.toString(encoding);
	            }
	            else {
	                return buff;
	            }
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.writeFileSync = function writeFileSync (p, data, encoding, flag, mode) {
	        try {
	            if (encoding) {
	                data = Buffer.from(data, encoding);
	            }
	            var u8 = buffer2Uint8array(data);
	            this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: 'binary' });
	            this._FS.chmod(p, mode);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	        try {
	            isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	        try {
	            isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	        try {
	            this._FS.symlink(srcpath, dstpath);
	        }
	        catch (e) {
	            throw convertError(e);
	        }
	    };
	    EmscriptenFileSystem.prototype.readlinkSync = function readlinkSync (p) {
	        try {
	            return this._FS.readlink(p);
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	        try {
	            this._FS.utime(p, atime.getTime(), mtime.getTime());
	        }
	        catch (e) {
	            throw convertError(e, p);
	        }
	    };
	    EmscriptenFileSystem.prototype.modeToFileType = function modeToFileType (mode) {
	        if (this._FS.isDir(mode)) {
	            return FileType.DIRECTORY;
	        }
	        else if (this._FS.isFile(mode)) {
	            return FileType.FILE;
	        }
	        else if (this._FS.isLink(mode)) {
	            return FileType.SYMLINK;
	        }
	        else {
	            throw ApiError.EPERM(("Invalid mode: " + mode));
	        }
	    };
	
	    return EmscriptenFileSystem;
	}(SynchronousFileSystem));
	
	EmscriptenFileSystem.Name = "EmscriptenFileSystem";
	EmscriptenFileSystem.Options = {
	    FS: {
	        type: "object",
	        description: "The Emscripten file system to use (the `FS` variable)"
	    }
	};
	
	/**
	 * The FolderAdapter file system wraps a file system, and scopes all interactions to a subfolder of that file system.
	 *
	 * Example: Given a file system `foo` with folder `bar` and file `bar/baz`...
	 *
	 * ```javascript
	 * BrowserFS.configure({
	 *   fs: "FolderAdapter",
	 *   options: {
	 *     folder: "bar",
	 *     wrapped: foo
	 *   }
	 * }, function(e) {
	 *   var fs = BrowserFS.BFSRequire('fs');
	 *   fs.readdirSync('/'); // ['baz']
	 * });
	 * ```
	 */
	var FolderAdapter = (function (BaseFileSystem$$1) {
	    function FolderAdapter(folder, wrapped) {
	        BaseFileSystem$$1.call(this);
	        this._folder = folder;
	        this._wrapped = wrapped;
	    }
	
	    if ( BaseFileSystem$$1 ) FolderAdapter.__proto__ = BaseFileSystem$$1;
	    FolderAdapter.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    FolderAdapter.prototype.constructor = FolderAdapter;
	    /**
	     * Creates a FolderAdapter instance with the given options.
	     */
	    FolderAdapter.Create = function Create (opts, cb) {
	        cb(null, new FolderAdapter(opts.folder, opts.wrapped));
	    };
	    FolderAdapter.isAvailable = function isAvailable () {
	        return true;
	    };
	    /**
	     * Initialize the file system. Ensures that the wrapped file system
	     * has the given folder.
	     */
	    FolderAdapter.prototype.initialize = function initialize (cb) {
	        var this$1 = this;
	
	        this._wrapped.exists(this._folder, function (exists) {
	            if (exists) {
	                cb();
	            }
	            else if (this$1._wrapped.isReadOnly()) {
	                cb(ApiError.ENOENT(this$1._folder));
	            }
	            else {
	                this$1._wrapped.mkdir(this$1._folder, 0x1ff, cb);
	            }
	        });
	    };
	    FolderAdapter.prototype.getName = function getName () { return this._wrapped.getName(); };
	    FolderAdapter.prototype.isReadOnly = function isReadOnly () { return this._wrapped.isReadOnly(); };
	    FolderAdapter.prototype.supportsProps = function supportsProps () { return this._wrapped.supportsProps(); };
	    FolderAdapter.prototype.supportsSynch = function supportsSynch () { return this._wrapped.supportsSynch(); };
	    FolderAdapter.prototype.supportsLinks = function supportsLinks () { return false; };
	
	    return FolderAdapter;
	}(BaseFileSystem));
	
	FolderAdapter.Name = "FolderAdapter";
	FolderAdapter.Options = {
	    folder: {
	        type: "string",
	        description: "The folder to use as the root directory"
	    },
	    wrapped: {
	        type: "object",
	        description: "The file system to wrap"
	    }
	};
	/**
	 * @hidden
	 */
	function translateError(folder, e) {
	    if (e !== null && typeof e === 'object') {
	        var err = e;
	        var p = err.path;
	        if (p) {
	            p = '/' + path.relative(folder, p);
	            err.message = err.message.replace(err.path, p);
	            err.path = p;
	        }
	    }
	    return e;
	}
	/**
	 * @hidden
	 */
	function wrapCallback(folder, cb) {
	    if (typeof cb === 'function') {
	        return function (err) {
	            if (arguments.length > 0) {
	                arguments[0] = translateError(folder, err);
	            }
	            cb.apply(null, arguments);
	        };
	    }
	    else {
	        return cb;
	    }
	}
	/**
	 * @hidden
	 */
	function wrapFunction(name, wrapFirst, wrapSecond) {
	    if (name.slice(name.length - 4) !== 'Sync') {
	        // Async function. Translate error in callback.
	        return function () {
	            if (arguments.length > 0) {
	                if (wrapFirst) {
	                    arguments[0] = path.join(this._folder, arguments[0]);
	                }
	                if (wrapSecond) {
	                    arguments[1] = path.join(this._folder, arguments[1]);
	                }
	                arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
	            }
	            return this._wrapped[name].apply(this._wrapped, arguments);
	        };
	    }
	    else {
	        // Sync function. Translate error in catch.
	        return function () {
	            try {
	                if (wrapFirst) {
	                    arguments[0] = path.join(this._folder, arguments[0]);
	                }
	                if (wrapSecond) {
	                    arguments[1] = path.join(this._folder, arguments[1]);
	                }
	                return this._wrapped[name].apply(this._wrapped, arguments);
	            }
	            catch (e) {
	                throw translateError(this._folder, e);
	            }
	        };
	    }
	}
	// First argument is a path.
	['diskSpace', 'stat', 'statSync', 'open', 'openSync', 'unlink', 'unlinkSync',
	    'rmdir', 'rmdirSync', 'mkdir', 'mkdirSync', 'readdir', 'readdirSync', 'exists',
	    'existsSync', 'realpath', 'realpathSync', 'truncate', 'truncateSync', 'readFile',
	    'readFileSync', 'writeFile', 'writeFileSync', 'appendFile', 'appendFileSync',
	    'chmod', 'chmodSync', 'chown', 'chownSync', 'utimes', 'utimesSync', 'readlink',
	    'readlinkSync'].forEach(function (name) {
	    FolderAdapter.prototype[name] = wrapFunction(name, true, false);
	});
	// First and second arguments are paths.
	['rename', 'renameSync', 'link', 'linkSync', 'symlink', 'symlinkSync'].forEach(function (name) {
	    FolderAdapter.prototype[name] = wrapFunction(name, true, true);
	});
	
	/**
	 * @hidden
	 */
	var toExport;
	if (typeof (window) !== 'undefined') {
	    toExport = window;
	}
	else if (typeof (self) !== 'undefined') {
	    toExport = self;
	}
	else {
	    toExport = global;
	}
	var global$1 = toExport;
	
	/**
	 * @hidden
	 */
	function isDirectoryEntry(entry) {
	    return entry.isDirectory;
	}
	/**
	 * @hidden
	 */
	var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
	/**
	 * @hidden
	 */
	function _requestQuota(type, size, success, errorCallback) {
	    // We cast navigator and window to '<any>' because everything here is
	    // nonstandard functionality, despite the fact that Chrome has the only
	    // implementation of the HTML5FS and is likely driving the standardization
	    // process. Thus, these objects defined off of navigator and window are not
	    // present in the DefinitelyTyped TypeScript typings for FileSystem.
	    if (typeof navigator['webkitPersistentStorage'] !== 'undefined') {
	        switch (type) {
	            case global$1.PERSISTENT:
	                navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
	                break;
	            case global$1.TEMPORARY:
	                navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
	                break;
	            default:
	                errorCallback(new TypeError(("Invalid storage type: " + type)));
	                break;
	        }
	    }
	    else {
	        global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
	    }
	}
	/**
	 * @hidden
	 */
	function _toArray(list) {
	    return Array.prototype.slice.call(list || [], 0);
	}
	/**
	 * Converts the given DOMError into an appropriate ApiError.
	 * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError
	 * @hidden
	 */
	function convertError$1(err, p, expectedDir) {
	    switch (err.name) {
	        /* The user agent failed to create a file or directory due to the existence of a file or
	            directory with the same path.  */
	        case "PathExistsError":
	            return ApiError.EEXIST(p);
	        /* The operation failed because it would cause the application to exceed its storage quota.  */
	        case 'QuotaExceededError':
	            return ApiError.FileError(ErrorCode.ENOSPC, p);
	        /*  A required file or directory could not be found at the time an operation was processed.   */
	        case 'NotFoundError':
	            return ApiError.ENOENT(p);
	        /* This is a security error code to be used in situations not covered by any other error codes.
	            - A required file was unsafe for access within a Web application
	            - Too many calls are being made on filesystem resources */
	        case 'SecurityError':
	            return ApiError.FileError(ErrorCode.EACCES, p);
	        /* The modification requested was illegal. Examples of invalid modifications include moving a
	            directory into its own child, moving a file into its parent directory without changing its name,
	            or copying a directory to a path occupied by a file.  */
	        case 'InvalidModificationError':
	            return ApiError.FileError(ErrorCode.EPERM, p);
	        /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type
	            [e.g. is a DirectoryEntry when the user requested a FileEntry].  */
	        case 'TypeMismatchError':
	            return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);
	        /* A path or URL supplied to the API was malformed.  */
	        case "EncodingError":
	        /* An operation depended on state cached in an interface object, but that state that has changed
	            since it was read from disk.  */
	        case "InvalidStateError":
	        /* The user attempted to write to a file or directory which could not be modified due to the state
	            of the underlying filesystem.  */
	        case "NoModificationAllowedError":
	        default:
	            return ApiError.FileError(ErrorCode.EINVAL, p);
	    }
	}
	// A note about getFile and getDirectory options:
	// These methods are called at numerous places in this file, and are passed
	// some combination of these two options:
	//   - create: If true, the entry will be created if it doesn't exist.
	//             If false, an error will be thrown if it doesn't exist.
	//   - exclusive: If true, only create the entry if it doesn't already exist,
	//                and throw an error if it does.
	var HTML5FSFile = (function (PreloadFile$$1) {
	    function HTML5FSFile(fs, entry, path$$1, flag, stat, contents) {
	        PreloadFile$$1.call(this, fs, path$$1, flag, stat, contents);
	        this._entry = entry;
	    }
	
	    if ( PreloadFile$$1 ) HTML5FSFile.__proto__ = PreloadFile$$1;
	    HTML5FSFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    HTML5FSFile.prototype.constructor = HTML5FSFile;
	    HTML5FSFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (!this.isDirty()) {
	            return cb();
	        }
	        this._entry.createWriter(function (writer) {
	            var buffer$$1 = this$1.getBuffer();
	            var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
	            var length = blob.size;
	            writer.onwriteend = function (err) {
	                writer.onwriteend = null;
	                writer.onerror = null;
	                writer.truncate(length);
	                this$1.resetDirty();
	                cb();
	            };
	            writer.onerror = function (err) {
	                cb(convertError$1(err, this$1.getPath(), false));
	            };
	            writer.write(blob);
	        });
	    };
	    HTML5FSFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	
	    return HTML5FSFile;
	}(PreloadFile));
	/**
	 * A read-write filesystem backed by the HTML5 FileSystem API.
	 *
	 * As the HTML5 FileSystem is only implemented in Blink, this interface is
	 * only available in Chrome.
	 */
	var HTML5FS = (function (BaseFileSystem$$1) {
	    function HTML5FS(size, type, deprecateMsg) {
	        if ( size === void 0 ) size = 5;
	        if ( type === void 0 ) type = global$1.PERSISTENT;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        // Convert MB to bytes.
	        this.size = 1024 * 1024 * size;
	        this.type = type;
	        deprecationMessage(deprecateMsg, HTML5FS.Name, { size: size, type: type });
	    }
	
	    if ( BaseFileSystem$$1 ) HTML5FS.__proto__ = BaseFileSystem$$1;
	    HTML5FS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    HTML5FS.prototype.constructor = HTML5FS;
	    /**
	     * Creates an HTML5FS instance with the given options.
	     */
	    HTML5FS.Create = function Create (opts, cb) {
	        var fs = new HTML5FS(opts.size, opts.type, false);
	        fs.allocate(function (e) { return e ? cb(e) : cb(null, fs); }, false);
	    };
	    HTML5FS.isAvailable = function isAvailable () {
	        return !!_getFS;
	    };
	    HTML5FS.prototype.getName = function getName () {
	        return HTML5FS.Name;
	    };
	    HTML5FS.prototype.isReadOnly = function isReadOnly () {
	        return false;
	    };
	    HTML5FS.prototype.supportsSymlinks = function supportsSymlinks () {
	        return false;
	    };
	    HTML5FS.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    HTML5FS.prototype.supportsSynch = function supportsSynch () {
	        return false;
	    };
	    /**
	     * **Deprecated. Please use Create() method instead to create and allocate an HTML5FS.**
	     *
	     * Requests a storage quota from the browser to back this FS.
	     * Must be called before file system can be used!
	     */
	    HTML5FS.prototype.allocate = function allocate (cb, deprecateMsg) {
	        var this$1 = this;
	        if ( cb === void 0 ) cb = function () { };
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn(("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + (this.type) + ", size: " + (this.size) + "}, cb)' to create and allocate HTML5FS instances."));
	        }
	        var success = function (fs) {
	            this$1.fs = fs;
	            cb();
	        };
	        var error = function (err) {
	            cb(convertError$1(err, "/", true));
	        };
	        if (this.type === global$1.PERSISTENT) {
	            _requestQuota(this.type, this.size, function (granted) {
	                _getFS(this$1.type, granted, success, error);
	            }, error);
	        }
	        else {
	            _getFS(this.type, this.size, success, error);
	        }
	    };
	    /**
	     * Deletes everything in the FS. Used for testing.
	     * Karma clears the storage after you quit it but not between runs of the test
	     * suite, and the tests expect an empty FS every time.
	     */
	    HTML5FS.prototype.empty = function empty (mainCb) {
	        // Get a list of all entries in the root directory to delete them
	        this._readdir('/', function (err, entries) {
	            if (err) {
	                console.error('Failed to empty FS');
	                mainCb(err);
	            }
	            else {
	                // Called when every entry has been operated on
	                var finished = function (er) {
	                    if (err) {
	                        console.error("Failed to empty FS");
	                        mainCb(err);
	                    }
	                    else {
	                        mainCb();
	                    }
	                };
	                // Removes files and recursively removes directories
	                var deleteEntry = function (entry, cb) {
	                    var succ = function () {
	                        cb();
	                    };
	                    var error = function (err) {
	                        cb(convertError$1(err, entry.fullPath, !entry.isDirectory));
	                    };
	                    if (isDirectoryEntry(entry)) {
	                        entry.removeRecursively(succ, error);
	                    }
	                    else {
	                        entry.remove(succ, error);
	                    }
	                };
	                // Loop through the entries and remove them, then call the callback
	                // when they're all finished.
	                eachLimit(entries, deleteEntry, finished);
	            }
	        });
	    };
	    HTML5FS.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        var semaphore = 2;
	        var successCount = 0;
	        var root = this.fs.root;
	        var currentPath = oldPath;
	        var error = function (err) {
	            if (--semaphore <= 0) {
	                cb(convertError$1(err, currentPath, false));
	            }
	        };
	        var success = function (file) {
	            if (++successCount === 2) {
	                return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
	            }
	            // SPECIAL CASE: If newPath === oldPath, and the path exists, then
	            // this operation trivially succeeds.
	            if (oldPath === newPath) {
	                return cb();
	            }
	            // Get the new parent directory.
	            currentPath = path.dirname(newPath);
	            root.getDirectory(currentPath, {}, function (parentDir) {
	                currentPath = path.basename(newPath);
	                file.moveTo(parentDir, currentPath, function (entry) { cb(); }, function (err) {
	                    // SPECIAL CASE: If oldPath is a directory, and newPath is a
	                    // file, rename should delete the file and perform the move.
	                    if (file.isDirectory) {
	                        currentPath = newPath;
	                        // Unlink only works on files. Try to delete newPath.
	                        this$1.unlink(newPath, function (e) {
	                            if (e) {
	                                // newPath is probably a directory.
	                                error(err);
	                            }
	                            else {
	                                // Recur, now that newPath doesn't exist.
	                                this$1.rename(oldPath, newPath, cb);
	                            }
	                        });
	                    }
	                    else {
	                        error(err);
	                    }
	                });
	            }, error);
	        };
	        // We don't know if oldPath is a *file* or a *directory*, and there's no
	        // way to stat items. So launch both requests, see which one succeeds.
	        root.getFile(oldPath, {}, success, error);
	        root.getDirectory(oldPath, {}, success, error);
	    };
	    HTML5FS.prototype.stat = function stat (path$$1, isLstat, cb) {
	        var this$1 = this;
	
	        // Throw an error if the entry doesn't exist, because then there's nothing
	        // to stat.
	        var opts = {
	            create: false
	        };
	        // Called when the path has been successfully loaded as a file.
	        var loadAsFile = function (entry) {
	            var fileFromEntry = function (file) {
	                var stat = new Stats(FileType.FILE, file.size);
	                cb(null, stat);
	            };
	            entry.file(fileFromEntry, failedToLoad);
	        };
	        // Called when the path has been successfully loaded as a directory.
	        var loadAsDir = function (dir$$1) {
	            // Directory entry size can't be determined from the HTML5 FS API, and is
	            // implementation-dependant anyway, so a dummy value is used.
	            var size = 4096;
	            var stat = new Stats(FileType.DIRECTORY, size);
	            cb(null, stat);
	        };
	        // Called when the path couldn't be opened as a directory or a file.
	        var failedToLoad = function (err) {
	            cb(convertError$1(err, path$$1, false /* Unknown / irrelevant */));
	        };
	        // Called when the path couldn't be opened as a file, but might still be a
	        // directory.
	        var failedToLoadAsFile = function () {
	            this$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
	        };
	        // No method currently exists to determine whether a path refers to a
	        // directory or a file, so this implementation tries both and uses the first
	        // one that succeeds.
	        this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
	    };
	    HTML5FS.prototype.open = function open (p, flags, mode, cb) {
	        var this$1 = this;
	
	        // XXX: err is a DOMError
	        var error = function (err) {
	            if (err.name === 'InvalidModificationError' && flags.isExclusive()) {
	                cb(ApiError.EEXIST(p));
	            }
	            else {
	                cb(convertError$1(err, p, false));
	            }
	        };
	        this.fs.root.getFile(p, {
	            create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
	            exclusive: flags.isExclusive()
	        }, function (entry) {
	            // Try to fetch corresponding file.
	            entry.file(function (file) {
	                var reader = new FileReader();
	                reader.onloadend = function (event) {
	                    var bfsFile = this$1._makeFile(p, entry, flags, file, reader.result);
	                    cb(null, bfsFile);
	                };
	                reader.onerror = function (ev) {
	                    error(reader.error);
	                };
	                reader.readAsArrayBuffer(file);
	            }, error);
	        }, error);
	    };
	    HTML5FS.prototype.unlink = function unlink (path$$1, cb) {
	        this._remove(path$$1, cb, true);
	    };
	    HTML5FS.prototype.rmdir = function rmdir (path$$1, cb) {
	        var this$1 = this;
	
	        // Check if directory is non-empty, first.
	        this.readdir(path$$1, function (e, files) {
	            if (e) {
	                cb(e);
	            }
	            else if (files.length > 0) {
	                cb(ApiError.ENOTEMPTY(path$$1));
	            }
	            else {
	                this$1._remove(path$$1, cb, false);
	            }
	        });
	    };
	    HTML5FS.prototype.mkdir = function mkdir (path$$1, mode, cb) {
	        // Create the directory, but throw an error if it already exists, as per
	        // mkdir(1)
	        var opts = {
	            create: true,
	            exclusive: true
	        };
	        var success = function (dir$$1) {
	            cb();
	        };
	        var error = function (err) {
	            cb(convertError$1(err, path$$1, true));
	        };
	        this.fs.root.getDirectory(path$$1, opts, success, error);
	    };
	    /**
	     * Map _readdir's list of `FileEntry`s to their names and return that.
	     */
	    HTML5FS.prototype.readdir = function readdir (path$$1, cb) {
	        this._readdir(path$$1, function (e, entries) {
	            if (entries) {
	                var rv = [];
	                for (var i = 0, list = entries; i < list.length; i += 1) {
	                    var entry = list[i];
	
	                    rv.push(entry.name);
	                }
	                cb(null, rv);
	            }
	            else {
	                return cb(e);
	            }
	        });
	    };
	    /**
	     * Returns a BrowserFS object representing a File.
	     */
	    HTML5FS.prototype._makeFile = function _makeFile (path$$1, entry, flag, stat, data) {
	        if ( data === void 0 ) data = new ArrayBuffer(0);
	
	        var stats = new Stats(FileType.FILE, stat.size);
	        var buffer$$1 = arrayBuffer2Buffer(data);
	        return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
	    };
	    /**
	     * Returns an array of `FileEntry`s. Used internally by empty and readdir.
	     */
	    HTML5FS.prototype._readdir = function _readdir (path$$1, cb) {
	        var error = function (err) {
	            cb(convertError$1(err, path$$1, true));
	        };
	        // Grab the requested directory.
	        this.fs.root.getDirectory(path$$1, { create: false }, function (dirEntry) {
	            var reader = dirEntry.createReader();
	            var entries = [];
	            // Call the reader.readEntries() until no more results are returned.
	            var readEntries = function () {
	                reader.readEntries((function (results) {
	                    if (results.length) {
	                        entries = entries.concat(_toArray(results));
	                        readEntries();
	                    }
	                    else {
	                        cb(null, entries);
	                    }
	                }), error);
	            };
	            readEntries();
	        }, error);
	    };
	    /**
	     * Delete a file or directory from the file system
	     * isFile should reflect which call was made to remove the it (`unlink` or
	     * `rmdir`). If this doesn't match what's actually at `path`, an error will be
	     * returned
	     */
	    HTML5FS.prototype._remove = function _remove (path$$1, cb, isFile) {
	        var success = function (entry) {
	            var succ = function () {
	                cb();
	            };
	            var err = function (err) {
	                cb(convertError$1(err, path$$1, !isFile));
	            };
	            entry.remove(succ, err);
	        };
	        var error = function (err) {
	            cb(convertError$1(err, path$$1, !isFile));
	        };
	        // Deleting the entry, so don't create it
	        var opts = {
	            create: false
	        };
	        if (isFile) {
	            this.fs.root.getFile(path$$1, opts, success, error);
	        }
	        else {
	            this.fs.root.getDirectory(path$$1, opts, success, error);
	        }
	    };
	
	    return HTML5FS;
	}(BaseFileSystem));
	
	HTML5FS.Name = "HTML5FS";
	HTML5FS.Options = {
	    size: {
	        type: "number",
	        optional: true,
	        description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
	    },
	    type: {
	        type: "number",
	        optional: true,
	        description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
	    }
	};
	
	/**
	 * Generic inode definition that can easily be serialized.
	 */
	var Inode = function Inode(id, size, mode, atime, mtime, ctime) {
	    this.id = id;
	    this.size = size;
	    this.mode = mode;
	    this.atime = atime;
	    this.mtime = mtime;
	    this.ctime = ctime;
	};
	/**
	 * Converts the buffer into an Inode.
	 */
	Inode.fromBuffer = function fromBuffer (buffer$$1) {
	    if (buffer$$1 === undefined) {
	        throw new Error("NO");
	    }
	    return new Inode(buffer$$1.toString('ascii', 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
	};
	/**
	 * Handy function that converts the Inode to a Node Stats object.
	 */
	Inode.prototype.toStats = function toStats () {
	    return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
	};
	/**
	 * Get the size of this Inode, in bytes.
	 */
	Inode.prototype.getSize = function getSize () {
	    // ASSUMPTION: ID is ASCII (1 byte per char).
	    return 30 + this.id.length;
	};
	/**
	 * Writes the inode into the start of the buffer.
	 */
	Inode.prototype.toBuffer = function toBuffer (buff) {
	        if ( buff === void 0 ) buff = Buffer.alloc(this.getSize());
	
	    buff.writeUInt32LE(this.size, 0);
	    buff.writeUInt16LE(this.mode, 4);
	    buff.writeDoubleLE(this.atime, 6);
	    buff.writeDoubleLE(this.mtime, 14);
	    buff.writeDoubleLE(this.ctime, 22);
	    buff.write(this.id, 30, this.id.length, 'ascii');
	    return buff;
	};
	/**
	 * Updates the Inode using information from the stats object. Used by file
	 * systems at sync time, e.g.:
	 * - Program opens file and gets a File object.
	 * - Program mutates file. File object is responsible for maintaining
	 *   metadata changes locally -- typically in a Stats object.
	 * - Program closes file. File object's metadata changes are synced with the
	 *   file system.
	 * @return True if any changes have occurred.
	 */
	Inode.prototype.update = function update (stats) {
	    var hasChanged = false;
	    if (this.size !== stats.size) {
	        this.size = stats.size;
	        hasChanged = true;
	    }
	    if (this.mode !== stats.mode) {
	        this.mode = stats.mode;
	        hasChanged = true;
	    }
	    var atimeMs = stats.atime.getTime();
	    if (this.atime !== atimeMs) {
	        this.atime = atimeMs;
	        hasChanged = true;
	    }
	    var mtimeMs = stats.mtime.getTime();
	    if (this.mtime !== mtimeMs) {
	        this.mtime = mtimeMs;
	        hasChanged = true;
	    }
	    var ctimeMs = stats.ctime.getTime();
	    if (this.ctime !== ctimeMs) {
	        this.ctime = ctimeMs;
	        hasChanged = true;
	    }
	    return hasChanged;
	};
	// XXX: Copied from Stats. Should reconcile these two into something more
	//  compact.
	/**
	 * @return [Boolean] True if this item is a file.
	 */
	Inode.prototype.isFile = function isFile () {
	    return (this.mode & 0xF000) === FileType.FILE;
	};
	/**
	 * @return [Boolean] True if this item is a directory.
	 */
	Inode.prototype.isDirectory = function isDirectory () {
	    return (this.mode & 0xF000) === FileType.DIRECTORY;
	};
	
	/**
	 * @hidden
	 */
	var ROOT_NODE_ID = "/";
	/**
	 * @hidden
	 */
	var emptyDirNode = null;
	/**
	 * Returns an empty directory node.
	 * @hidden
	 */
	function getEmptyDirNode() {
	    if (emptyDirNode) {
	        return emptyDirNode;
	    }
	    return emptyDirNode = Buffer.from("{}");
	}
	/**
	 * Generates a random ID.
	 * @hidden
	 */
	function GenerateRandomID() {
	    // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
	    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	        var r = Math.random() * 16 | 0;
	        var v = c === 'x' ? r : (r & 0x3 | 0x8);
	        return v.toString(16);
	    });
	}
	/**
	 * Helper function. Checks if 'e' is defined. If so, it triggers the callback
	 * with 'e' and returns false. Otherwise, returns true.
	 * @hidden
	 */
	function noError(e, cb) {
	    if (e) {
	        cb(e);
	        return false;
	    }
	    return true;
	}
	/**
	 * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,
	 * triggers the callback with 'e', and returns false. Otherwise, returns true.
	 * @hidden
	 */
	function noErrorTx(e, tx, cb) {
	    if (e) {
	        tx.abort(function () {
	            cb(e);
	        });
	        return false;
	    }
	    return true;
	}
	/**
	 * A simple RW transaction for simple synchronous key-value stores.
	 */
	var SimpleSyncRWTransaction = function SimpleSyncRWTransaction(store) {
	    this.store = store;
	    /**
	     * Stores data in the keys we modify prior to modifying them.
	     * Allows us to roll back commits.
	     */
	    this.originalData = {};
	    /**
	     * List of keys modified in this transaction, if any.
	     */
	    this.modifiedKeys = [];
	};
	SimpleSyncRWTransaction.prototype.get = function get (key) {
	    var val = this.store.get(key);
	    this.stashOldValue(key, val);
	    return val;
	};
	SimpleSyncRWTransaction.prototype.put = function put (key, data, overwrite) {
	    this.markModified(key);
	    return this.store.put(key, data, overwrite);
	};
	SimpleSyncRWTransaction.prototype.del = function del (key) {
	    this.markModified(key);
	    this.store.del(key);
	};
	SimpleSyncRWTransaction.prototype.commit = function commit () { };
	SimpleSyncRWTransaction.prototype.abort = function abort () {
	        var this$1 = this;
	
	    // Rollback old values.
	    for (var i = 0, list = this$1.modifiedKeys; i < list.length; i += 1) {
	        var key = list[i];
	
	            var value = this$1.originalData[key];
	        if (!value) {
	            // Key didn't exist.
	            this$1.store.del(key);
	        }
	        else {
	            // Key existed. Store old value.
	            this$1.store.put(key, value, true);
	        }
	    }
	};
	/**
	 * Stashes given key value pair into `originalData` if it doesn't already
	 * exist. Allows us to stash values the program is requesting anyway to
	 * prevent needless `get` requests if the program modifies the data later
	 * on during the transaction.
	 */
	SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue (key, value) {
	    // Keep only the earliest value in the transaction.
	    if (!this.originalData.hasOwnProperty(key)) {
	        this.originalData[key] = value;
	    }
	};
	/**
	 * Marks the given key as modified, and stashes its value if it has not been
	 * stashed already.
	 */
	SimpleSyncRWTransaction.prototype.markModified = function markModified (key) {
	    if (this.modifiedKeys.indexOf(key) === -1) {
	        this.modifiedKeys.push(key);
	        if (!this.originalData.hasOwnProperty(key)) {
	            this.originalData[key] = this.store.get(key);
	        }
	    }
	};
	var SyncKeyValueFile = (function (PreloadFile$$1) {
	    function SyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile$$1 ) SyncKeyValueFile.__proto__ = PreloadFile$$1;
	    SyncKeyValueFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    SyncKeyValueFile.prototype.constructor = SyncKeyValueFile;
	    SyncKeyValueFile.prototype.syncSync = function syncSync () {
	        if (this.isDirty()) {
	            this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());
	            this.resetDirty();
	        }
	    };
	    SyncKeyValueFile.prototype.closeSync = function closeSync () {
	        this.syncSync();
	    };
	
	    return SyncKeyValueFile;
	}(PreloadFile));
	/**
	 * A "Synchronous key-value file system". Stores data to/retrieves data from an
	 * underlying key-value store.
	 *
	 * We use a unique ID for each node in the file system. The root node has a
	 * fixed ID.
	 * @todo Introduce Node ID caching.
	 * @todo Check modes.
	 */
	var SyncKeyValueFileSystem = (function (SynchronousFileSystem$$1) {
	    function SyncKeyValueFileSystem(options) {
	        SynchronousFileSystem$$1.call(this);
	        this.store = options.store;
	        // INVARIANT: Ensure that the root exists.
	        this.makeRootDirectory();
	    }
	
	    if ( SynchronousFileSystem$$1 ) SyncKeyValueFileSystem.__proto__ = SynchronousFileSystem$$1;
	    SyncKeyValueFileSystem.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    SyncKeyValueFileSystem.prototype.constructor = SyncKeyValueFileSystem;
	    SyncKeyValueFileSystem.isAvailable = function isAvailable () { return true; };
	
	    SyncKeyValueFileSystem.prototype.getName = function getName () { return this.store.name(); };
	    SyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
	    SyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks () { return false; };
	    SyncKeyValueFileSystem.prototype.supportsProps = function supportsProps () { return false; };
	    SyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch () { return true; };
	    /**
	     * Delete all contents stored in the file system.
	     */
	    SyncKeyValueFileSystem.prototype.empty = function empty () {
	        this.store.clear();
	        // INVARIANT: Root always exists.
	        this.makeRootDirectory();
	    };
	    SyncKeyValueFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	        var tx = this.store.beginTransaction('readwrite'), oldParent = path.dirname(oldPath), oldName = path.basename(oldPath), newParent = path.dirname(newPath), newName = path.basename(newPath), 
	        // Remove oldPath from parent's directory listing.
	        oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);
	        if (!oldDirList[oldName]) {
	            throw ApiError.ENOENT(oldPath);
	        }
	        var nodeId = oldDirList[oldName];
	        delete oldDirList[oldName];
	        // Invariant: Can't move a folder inside itself.
	        // This funny little hack ensures that the check passes only if oldPath
	        // is a subpath of newParent. We append '/' to avoid matching folders that
	        // are a substring of the bottom-most folder in the path.
	        if ((newParent + '/').indexOf(oldPath + '/') === 0) {
	            throw new ApiError(ErrorCode.EBUSY, oldParent);
	        }
	        // Add newPath to parent's directory listing.
	        var newDirNode, newDirList;
	        if (newParent === oldParent) {
	            // Prevent us from re-grabbing the same directory listing, which still
	            // contains oldName.
	            newDirNode = oldDirNode;
	            newDirList = oldDirList;
	        }
	        else {
	            newDirNode = this.findINode(tx, newParent);
	            newDirList = this.getDirListing(tx, newParent, newDirNode);
	        }
	        if (newDirList[newName]) {
	            // If it's a file, delete it.
	            var newNameNode = this.getINode(tx, newPath, newDirList[newName]);
	            if (newNameNode.isFile()) {
	                try {
	                    tx.del(newNameNode.id);
	                    tx.del(newDirList[newName]);
	                }
	                catch (e) {
	                    tx.abort();
	                    throw e;
	                }
	            }
	            else {
	                // If it's a directory, throw a permissions error.
	                throw ApiError.EPERM(newPath);
	            }
	        }
	        newDirList[newName] = nodeId;
	        // Commit the two changed directory listings.
	        try {
	            tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);
	            tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        tx.commit();
	    };
	    SyncKeyValueFileSystem.prototype.statSync = function statSync (p, isLstat) {
	        // Get the inode to the item, convert it into a Stats object.
	        return this.findINode(this.store.beginTransaction('readonly'), p).toStats();
	    };
	    SyncKeyValueFileSystem.prototype.createFileSync = function createFileSync (p, flag, mode) {
	        var tx = this.store.beginTransaction('readwrite'), data = emptyBuffer(), newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);
	        // Open the file.
	        return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
	    };
	    SyncKeyValueFileSystem.prototype.openFileSync = function openFileSync (p, flag) {
	        var tx = this.store.beginTransaction('readonly'), node = this.findINode(tx, p), data = tx.get(node.id);
	        if (data === undefined) {
	            throw ApiError.ENOENT(p);
	        }
	        return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
	    };
	    SyncKeyValueFileSystem.prototype.unlinkSync = function unlinkSync (p) {
	        this.removeEntry(p, false);
	    };
	    SyncKeyValueFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	        // Check first if directory is empty.
	        if (this.readdirSync(p).length > 0) {
	            throw ApiError.ENOTEMPTY(p);
	        }
	        else {
	            this.removeEntry(p, true);
	        }
	    };
	    SyncKeyValueFileSystem.prototype.mkdirSync = function mkdirSync (p, mode) {
	        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');
	        this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
	    };
	    SyncKeyValueFileSystem.prototype.readdirSync = function readdirSync (p) {
	        var tx = this.store.beginTransaction('readonly');
	        return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
	    };
	    SyncKeyValueFileSystem.prototype._syncSync = function _syncSync (p, data, stats) {
	        // @todo Ensure mtime updates properly, and use that to determine if a data
	        //       update is required.
	        var tx = this.store.beginTransaction('readwrite'), 
	        // We use the _findInode helper because we actually need the INode id.
	        fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);
	        try {
	            // Sync data.
	            tx.put(fileInode.id, data, true);
	            // Sync metadata.
	            if (inodeChanged) {
	                tx.put(fileInodeId, fileInode.toBuffer(), true);
	            }
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        tx.commit();
	    };
	    /**
	     * Checks if the root directory exists. Creates it if it doesn't.
	     */
	    SyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory () {
	        var tx = this.store.beginTransaction('readwrite');
	        if (tx.get(ROOT_NODE_ID) === undefined) {
	            // Create new inode.
	            var currTime = (new Date()).getTime(), 
	            // Mode 0666
	            dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
	            // If the root doesn't exist, the first random ID shouldn't exist,
	            // either.
	            tx.put(dirInode.id, getEmptyDirNode(), false);
	            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
	            tx.commit();
	        }
	    };
	    /**
	     * Helper function for findINode.
	     * @param parent The parent directory of the file we are attempting to find.
	     * @param filename The filename of the inode we are attempting to find, minus
	     *   the parent.
	     * @return string The ID of the file's inode in the file system.
	     */
	    SyncKeyValueFileSystem.prototype._findINode = function _findINode (tx, parent, filename) {
	        var this$1 = this;
	
	        var readDirectory = function (inode) {
	            // Get the root's directory listing.
	            var dirList = this$1.getDirListing(tx, parent, inode);
	            // Get the file's ID.
	            if (dirList[filename]) {
	                return dirList[filename];
	            }
	            else {
	                throw ApiError.ENOENT(path.resolve(parent, filename));
	            }
	        };
	        if (parent === '/') {
	            if (filename === '') {
	                // BASE CASE #1: Return the root's ID.
	                return ROOT_NODE_ID;
	            }
	            else {
	                // BASE CASE #2: Find the item in the root ndoe.
	                return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
	            }
	        }
	        else {
	            return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));
	        }
	    };
	    /**
	     * Finds the Inode of the given path.
	     * @param p The path to look up.
	     * @return The Inode of the path p.
	     * @todo memoize/cache
	     */
	    SyncKeyValueFileSystem.prototype.findINode = function findINode (tx, p) {
	        return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));
	    };
	    /**
	     * Given the ID of a node, retrieves the corresponding Inode.
	     * @param tx The transaction to use.
	     * @param p The corresponding path to the file (used for error messages).
	     * @param id The ID to look up.
	     */
	    SyncKeyValueFileSystem.prototype.getINode = function getINode (tx, p, id) {
	        var inode = tx.get(id);
	        if (inode === undefined) {
	            throw ApiError.ENOENT(p);
	        }
	        return Inode.fromBuffer(inode);
	    };
	    /**
	     * Given the Inode of a directory, retrieves the corresponding directory
	     * listing.
	     */
	    SyncKeyValueFileSystem.prototype.getDirListing = function getDirListing (tx, p, inode) {
	        if (!inode.isDirectory()) {
	            throw ApiError.ENOTDIR(p);
	        }
	        var data = tx.get(inode.id);
	        if (data === undefined) {
	            throw ApiError.ENOENT(p);
	        }
	        return JSON.parse(data.toString());
	    };
	    /**
	     * Creates a new node under a random ID. Retries 5 times before giving up in
	     * the exceedingly unlikely chance that we try to reuse a random GUID.
	     * @return The GUID that the data was stored under.
	     */
	    SyncKeyValueFileSystem.prototype.addNewNode = function addNewNode (tx, data) {
	        var retries = 0;
	        var currId;
	        while (retries < 5) {
	            try {
	                currId = GenerateRandomID();
	                tx.put(currId, data, false);
	                return currId;
	            }
	            catch (e) {
	                // Ignore and reroll.
	            }
	        }
	        throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');
	    };
	    /**
	     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
	     * the given mode.
	     * Note: This will commit the transaction.
	     * @param p The path to the new file.
	     * @param type The type of the new file.
	     * @param mode The mode to create the new file with.
	     * @param data The data to store at the file's data node.
	     * @return The Inode for the new file.
	     */
	    SyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile (tx, p, type, mode, data) {
	        var parentDir = path.dirname(p), fname = path.basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = (new Date()).getTime();
	        // Invariant: The root always exists.
	        // If we don't check this prior to taking steps below, we will create a
	        // file with name '' in root should p == '/'.
	        if (p === '/') {
	            throw ApiError.EEXIST(p);
	        }
	        // Check if file already exists.
	        if (dirListing[fname]) {
	            throw ApiError.EEXIST(p);
	        }
	        var fileNode;
	        try {
	            // Commit data.
	            var dataId = this.addNewNode(tx, data);
	            fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
	            // Commit file node.
	            var fileNodeId = this.addNewNode(tx, fileNode.toBuffer());
	            // Update and commit parent directory listing.
	            dirListing[fname] = fileNodeId;
	            tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        tx.commit();
	        return fileNode;
	    };
	    /**
	     * Remove all traces of the given path from the file system.
	     * @param p The path to remove from the file system.
	     * @param isDir Does the path belong to a directory, or a file?
	     * @todo Update mtime.
	     */
	    SyncKeyValueFileSystem.prototype.removeEntry = function removeEntry (p, isDir) {
	        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = path.basename(p);
	        if (!parentListing[fileName]) {
	            throw ApiError.ENOENT(p);
	        }
	        // Remove from directory listing of parent.
	        var fileNodeId = parentListing[fileName];
	        delete parentListing[fileName];
	        // Get file inode.
	        var fileNode = this.getINode(tx, p, fileNodeId);
	        if (!isDir && fileNode.isDirectory()) {
	            throw ApiError.EISDIR(p);
	        }
	        else if (isDir && !fileNode.isDirectory()) {
	            throw ApiError.ENOTDIR(p);
	        }
	        try {
	            // Delete data.
	            tx.del(fileNode.id);
	            // Delete node.
	            tx.del(fileNodeId);
	            // Update directory listing.
	            tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);
	        }
	        catch (e) {
	            tx.abort();
	            throw e;
	        }
	        // Success.
	        tx.commit();
	    };
	
	    return SyncKeyValueFileSystem;
	}(SynchronousFileSystem));
	var AsyncKeyValueFile = (function (PreloadFile$$1) {
	    function AsyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	    }
	
	    if ( PreloadFile$$1 ) AsyncKeyValueFile.__proto__ = PreloadFile$$1;
	    AsyncKeyValueFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    AsyncKeyValueFile.prototype.constructor = AsyncKeyValueFile;
	    AsyncKeyValueFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (this.isDirty()) {
	            this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function (e) {
	                if (!e) {
	                    this$1.resetDirty();
	                }
	                cb(e);
	            });
	        }
	        else {
	            cb();
	        }
	    };
	    AsyncKeyValueFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	
	    return AsyncKeyValueFile;
	}(PreloadFile));
	/**
	 * An "Asynchronous key-value file system". Stores data to/retrieves data from
	 * an underlying asynchronous key-value store.
	 */
	var AsyncKeyValueFileSystem = (function (BaseFileSystem$$1) {
	    function AsyncKeyValueFileSystem () {
	        BaseFileSystem$$1.apply(this, arguments);
	    }
	
	    if ( BaseFileSystem$$1 ) AsyncKeyValueFileSystem.__proto__ = BaseFileSystem$$1;
	    AsyncKeyValueFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    AsyncKeyValueFileSystem.prototype.constructor = AsyncKeyValueFileSystem;
	
	    AsyncKeyValueFileSystem.isAvailable = function isAvailable () { return true; };
	    /**
	     * Initializes the file system. Typically called by subclasses' async
	     * constructors.
	     */
	    AsyncKeyValueFileSystem.prototype.init = function init (store, cb) {
	        this.store = store;
	        // INVARIANT: Ensure that the root exists.
	        this.makeRootDirectory(cb);
	    };
	    AsyncKeyValueFileSystem.prototype.getName = function getName () { return this.store.name(); };
	    AsyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly () { return false; };
	    AsyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks () { return false; };
	    AsyncKeyValueFileSystem.prototype.supportsProps = function supportsProps () { return false; };
	    AsyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch () { return false; };
	    /**
	     * Delete all contents stored in the file system.
	     */
	    AsyncKeyValueFileSystem.prototype.empty = function empty (cb) {
	        var this$1 = this;
	
	        this.store.clear(function (e) {
	            if (noError(e, cb)) {
	                // INVARIANT: Root always exists.
	                this$1.makeRootDirectory(cb);
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readwrite');
	        var oldParent = path.dirname(oldPath), oldName = path.basename(oldPath);
	        var newParent = path.dirname(newPath), newName = path.basename(newPath);
	        var inodes = {};
	        var lists = {};
	        var errorOccurred = false;
	        // Invariant: Can't move a folder inside itself.
	        // This funny little hack ensures that the check passes only if oldPath
	        // is a subpath of newParent. We append '/' to avoid matching folders that
	        // are a substring of the bottom-most folder in the path.
	        if ((newParent + '/').indexOf(oldPath + '/') === 0) {
	            return cb(new ApiError(ErrorCode.EBUSY, oldParent));
	        }
	        /**
	         * Responsible for Phase 2 of the rename operation: Modifying and
	         * committing the directory listings. Called once we have successfully
	         * retrieved both the old and new parent's inodes and listings.
	         */
	        var theOleSwitcharoo = function () {
	            // Sanity check: Ensure both paths are present, and no error has occurred.
	            if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
	                return;
	            }
	            var oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];
	            // Delete file from old parent.
	            if (!oldParentList[oldName]) {
	                cb(ApiError.ENOENT(oldPath));
	            }
	            else {
	                var fileId = oldParentList[oldName];
	                delete oldParentList[oldName];
	                // Finishes off the renaming process by adding the file to the new
	                // parent.
	                var completeRename = function () {
	                    newParentList[newName] = fileId;
	                    // Commit old parent's list.
	                    tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, function (e) {
	                        if (noErrorTx(e, tx, cb)) {
	                            if (oldParent === newParent) {
	                                // DONE!
	                                tx.commit(cb);
	                            }
	                            else {
	                                // Commit new parent's list.
	                                tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, function (e) {
	                                    if (noErrorTx(e, tx, cb)) {
	                                        tx.commit(cb);
	                                    }
	                                });
	                            }
	                        }
	                    });
	                };
	                if (newParentList[newName]) {
	                    // 'newPath' already exists. Check if it's a file or a directory, and
	                    // act accordingly.
	                    this$1.getINode(tx, newPath, newParentList[newName], function (e, inode) {
	                        if (noErrorTx(e, tx, cb)) {
	                            if (inode.isFile()) {
	                                // Delete the file and continue.
	                                tx.del(inode.id, function (e) {
	                                    if (noErrorTx(e, tx, cb)) {
	                                        tx.del(newParentList[newName], function (e) {
	                                            if (noErrorTx(e, tx, cb)) {
	                                                completeRename();
	                                            }
	                                        });
	                                    }
	                                });
	                            }
	                            else {
	                                // Can't overwrite a directory using rename.
	                                tx.abort(function (e) {
	                                    cb(ApiError.EPERM(newPath));
	                                });
	                            }
	                        }
	                    });
	                }
	                else {
	                    completeRename();
	                }
	            }
	        };
	        /**
	         * Grabs a path's inode and directory listing, and shoves it into the
	         * inodes and lists hashes.
	         */
	        var processInodeAndListings = function (p) {
	            this$1.findINodeAndDirListing(tx, p, function (e, node, dirList) {
	                if (e) {
	                    if (!errorOccurred) {
	                        errorOccurred = true;
	                        tx.abort(function () {
	                            cb(e);
	                        });
	                    }
	                    // If error has occurred already, just stop here.
	                }
	                else {
	                    inodes[p] = node;
	                    lists[p] = dirList;
	                    theOleSwitcharoo();
	                }
	            });
	        };
	        processInodeAndListings(oldParent);
	        if (oldParent !== newParent) {
	            processInodeAndListings(newParent);
	        }
	    };
	    AsyncKeyValueFileSystem.prototype.stat = function stat (p, isLstat, cb) {
	        var tx = this.store.beginTransaction('readonly');
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                cb(null, inode.toStats());
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.createFile = function createFile (p, flag, mode, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readwrite'), data = emptyBuffer();
	        this.commitNewFile(tx, p, FileType.FILE, mode, data, function (e, newFile) {
	            if (noError(e, cb)) {
	                cb(null, new AsyncKeyValueFile(this$1, p, flag, newFile.toStats(), data));
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.openFile = function openFile (p, flag, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readonly');
	        // Step 1: Grab the file's inode.
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                // Step 2: Grab the file's data.
	                tx.get(inode.id, function (e, data) {
	                    if (noError(e, cb)) {
	                        if (data === undefined) {
	                            cb(ApiError.ENOENT(p));
	                        }
	                        else {
	                            cb(null, new AsyncKeyValueFile(this$1, p, flag, inode.toStats(), data));
	                        }
	                    }
	                });
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.unlink = function unlink (p, cb) {
	        this.removeEntry(p, false, cb);
	    };
	    AsyncKeyValueFileSystem.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	        // Check first if directory is empty.
	        this.readdir(p, function (err, files) {
	            if (err) {
	                cb(err);
	            }
	            else if (files.length > 0) {
	                cb(ApiError.ENOTEMPTY(p));
	            }
	            else {
	                this$1.removeEntry(p, true, cb);
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype.mkdir = function mkdir (p, mode, cb) {
	        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');
	        this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
	    };
	    AsyncKeyValueFileSystem.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readonly');
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                this$1.getDirListing(tx, p, inode, function (e, dirListing) {
	                    if (noError(e, cb)) {
	                        cb(null, Object.keys(dirListing));
	                    }
	                });
	            }
	        });
	    };
	    AsyncKeyValueFileSystem.prototype._sync = function _sync (p, data, stats, cb) {
	        var this$1 = this;
	
	        // @todo Ensure mtime updates properly, and use that to determine if a data
	        //       update is required.
	        var tx = this.store.beginTransaction('readwrite');
	        // Step 1: Get the file node's ID.
	        this._findINode(tx, path.dirname(p), path.basename(p), function (e, fileInodeId) {
	            if (noErrorTx(e, tx, cb)) {
	                // Step 2: Get the file inode.
	                this$1.getINode(tx, p, fileInodeId, function (e, fileInode) {
	                    if (noErrorTx(e, tx, cb)) {
	                        var inodeChanged = fileInode.update(stats);
	                        // Step 3: Sync the data.
	                        tx.put(fileInode.id, data, true, function (e) {
	                            if (noErrorTx(e, tx, cb)) {
	                                // Step 4: Sync the metadata (if it changed)!
	                                if (inodeChanged) {
	                                    tx.put(fileInodeId, fileInode.toBuffer(), true, function (e) {
	                                        if (noErrorTx(e, tx, cb)) {
	                                            tx.commit(cb);
	                                        }
	                                    });
	                                }
	                                else {
	                                    // No need to sync metadata; return.
	                                    tx.commit(cb);
	                                }
	                            }
	                        });
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Checks if the root directory exists. Creates it if it doesn't.
	     */
	    AsyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory (cb) {
	        var tx = this.store.beginTransaction('readwrite');
	        tx.get(ROOT_NODE_ID, function (e, data) {
	            if (e || data === undefined) {
	                // Create new inode.
	                var currTime = (new Date()).getTime(), 
	                // Mode 0666
	                dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);
	                // If the root doesn't exist, the first random ID shouldn't exist,
	                // either.
	                tx.put(dirInode.id, getEmptyDirNode(), false, function (e) {
	                    if (noErrorTx(e, tx, cb)) {
	                        tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function (e) {
	                            if (e) {
	                                tx.abort(function () { cb(e); });
	                            }
	                            else {
	                                tx.commit(cb);
	                            }
	                        });
	                    }
	                });
	            }
	            else {
	                // We're good.
	                tx.commit(cb);
	            }
	        });
	    };
	    /**
	     * Helper function for findINode.
	     * @param parent The parent directory of the file we are attempting to find.
	     * @param filename The filename of the inode we are attempting to find, minus
	     *   the parent.
	     * @param cb Passed an error or the ID of the file's inode in the file system.
	     */
	    AsyncKeyValueFileSystem.prototype._findINode = function _findINode (tx, parent, filename, cb) {
	        var this$1 = this;
	
	        var handleDirectoryListings = function (e, inode, dirList) {
	            if (e) {
	                cb(e);
	            }
	            else if (dirList[filename]) {
	                cb(null, dirList[filename]);
	            }
	            else {
	                cb(ApiError.ENOENT(path.resolve(parent, filename)));
	            }
	        };
	        if (parent === '/') {
	            if (filename === '') {
	                // BASE CASE #1: Return the root's ID.
	                cb(null, ROOT_NODE_ID);
	            }
	            else {
	                // BASE CASE #2: Find the item in the root node.
	                this.getINode(tx, parent, ROOT_NODE_ID, function (e, inode) {
	                    if (noError(e, cb)) {
	                        this$1.getDirListing(tx, parent, inode, function (e, dirList) {
	                            // handle_directory_listings will handle e for us.
	                            handleDirectoryListings(e, inode, dirList);
	                        });
	                    }
	                });
	            }
	        }
	        else {
	            // Get the parent directory's INode, and find the file in its directory
	            // listing.
	            this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
	        }
	    };
	    /**
	     * Finds the Inode of the given path.
	     * @param p The path to look up.
	     * @param cb Passed an error or the Inode of the path p.
	     * @todo memoize/cache
	     */
	    AsyncKeyValueFileSystem.prototype.findINode = function findINode (tx, p, cb) {
	        var this$1 = this;
	
	        this._findINode(tx, path.dirname(p), path.basename(p), function (e, id) {
	            if (noError(e, cb)) {
	                this$1.getINode(tx, p, id, cb);
	            }
	        });
	    };
	    /**
	     * Given the ID of a node, retrieves the corresponding Inode.
	     * @param tx The transaction to use.
	     * @param p The corresponding path to the file (used for error messages).
	     * @param id The ID to look up.
	     * @param cb Passed an error or the inode under the given id.
	     */
	    AsyncKeyValueFileSystem.prototype.getINode = function getINode (tx, p, id, cb) {
	        tx.get(id, function (e, data) {
	            if (noError(e, cb)) {
	                if (data === undefined) {
	                    cb(ApiError.ENOENT(p));
	                }
	                else {
	                    cb(null, Inode.fromBuffer(data));
	                }
	            }
	        });
	    };
	    /**
	     * Given the Inode of a directory, retrieves the corresponding directory
	     * listing.
	     */
	    AsyncKeyValueFileSystem.prototype.getDirListing = function getDirListing (tx, p, inode, cb) {
	        if (!inode.isDirectory()) {
	            cb(ApiError.ENOTDIR(p));
	        }
	        else {
	            tx.get(inode.id, function (e, data) {
	                if (noError(e, cb)) {
	                    try {
	                        cb(null, JSON.parse(data.toString()));
	                    }
	                    catch (e) {
	                        // Occurs when data is undefined, or corresponds to something other
	                        // than a directory listing. The latter should never occur unless
	                        // the file system is corrupted.
	                        cb(ApiError.ENOENT(p));
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * Given a path to a directory, retrieves the corresponding INode and
	     * directory listing.
	     */
	    AsyncKeyValueFileSystem.prototype.findINodeAndDirListing = function findINodeAndDirListing (tx, p, cb) {
	        var this$1 = this;
	
	        this.findINode(tx, p, function (e, inode) {
	            if (noError(e, cb)) {
	                this$1.getDirListing(tx, p, inode, function (e, listing) {
	                    if (noError(e, cb)) {
	                        cb(null, inode, listing);
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Adds a new node under a random ID. Retries 5 times before giving up in
	     * the exceedingly unlikely chance that we try to reuse a random GUID.
	     * @param cb Passed an error or the GUID that the data was stored under.
	     */
	    AsyncKeyValueFileSystem.prototype.addNewNode = function addNewNode (tx, data, cb) {
	        var retries = 0, currId;
	        var reroll = function () {
	            if (++retries === 5) {
	                // Max retries hit. Return with an error.
	                cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));
	            }
	            else {
	                // Try again.
	                currId = GenerateRandomID();
	                tx.put(currId, data, false, function (e, committed) {
	                    if (e || !committed) {
	                        reroll();
	                    }
	                    else {
	                        // Successfully stored under 'currId'.
	                        cb(null, currId);
	                    }
	                });
	            }
	        };
	        reroll();
	    };
	    /**
	     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
	     * the given mode.
	     * Note: This will commit the transaction.
	     * @param p The path to the new file.
	     * @param type The type of the new file.
	     * @param mode The mode to create the new file with.
	     * @param data The data to store at the file's data node.
	     * @param cb Passed an error or the Inode for the new file.
	     */
	    AsyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile (tx, p, type, mode, data, cb) {
	        var this$1 = this;
	
	        var parentDir = path.dirname(p), fname = path.basename(p), currTime = (new Date()).getTime();
	        // Invariant: The root always exists.
	        // If we don't check this prior to taking steps below, we will create a
	        // file with name '' in root should p == '/'.
	        if (p === '/') {
	            return cb(ApiError.EEXIST(p));
	        }
	        // Let's build a pyramid of code!
	        // Step 1: Get the parent directory's inode and directory listing
	        this.findINodeAndDirListing(tx, parentDir, function (e, parentNode, dirListing) {
	            if (noErrorTx(e, tx, cb)) {
	                if (dirListing[fname]) {
	                    // File already exists.
	                    tx.abort(function () {
	                        cb(ApiError.EEXIST(p));
	                    });
	                }
	                else {
	                    // Step 2: Commit data to store.
	                    this$1.addNewNode(tx, data, function (e, dataId) {
	                        if (noErrorTx(e, tx, cb)) {
	                            // Step 3: Commit the file's inode to the store.
	                            var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
	                            this$1.addNewNode(tx, fileInode.toBuffer(), function (e, fileInodeId) {
	                                if (noErrorTx(e, tx, cb)) {
	                                    // Step 4: Update parent directory's listing.
	                                    dirListing[fname] = fileInodeId;
	                                    tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, function (e) {
	                                        if (noErrorTx(e, tx, cb)) {
	                                            // Step 5: Commit and return the new inode.
	                                            tx.commit(function (e) {
	                                                if (noErrorTx(e, tx, cb)) {
	                                                    cb(null, fileInode);
	                                                }
	                                            });
	                                        }
	                                    });
	                                }
	                            });
	                        }
	                    });
	                }
	            }
	        });
	    };
	    /**
	     * Remove all traces of the given path from the file system.
	     * @param p The path to remove from the file system.
	     * @param isDir Does the path belong to a directory, or a file?
	     * @todo Update mtime.
	     */
	    AsyncKeyValueFileSystem.prototype.removeEntry = function removeEntry (p, isDir, cb) {
	        var this$1 = this;
	
	        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), fileName = path.basename(p);
	        // Step 1: Get parent directory's node and directory listing.
	        this.findINodeAndDirListing(tx, parent, function (e, parentNode, parentListing) {
	            if (noErrorTx(e, tx, cb)) {
	                if (!parentListing[fileName]) {
	                    tx.abort(function () {
	                        cb(ApiError.ENOENT(p));
	                    });
	                }
	                else {
	                    // Remove from directory listing of parent.
	                    var fileNodeId = parentListing[fileName];
	                    delete parentListing[fileName];
	                    // Step 2: Get file inode.
	                    this$1.getINode(tx, p, fileNodeId, function (e, fileNode) {
	                        if (noErrorTx(e, tx, cb)) {
	                            if (!isDir && fileNode.isDirectory()) {
	                                tx.abort(function () {
	                                    cb(ApiError.EISDIR(p));
	                                });
	                            }
	                            else if (isDir && !fileNode.isDirectory()) {
	                                tx.abort(function () {
	                                    cb(ApiError.ENOTDIR(p));
	                                });
	                            }
	                            else {
	                                // Step 3: Delete data.
	                                tx.del(fileNode.id, function (e) {
	                                    if (noErrorTx(e, tx, cb)) {
	                                        // Step 4: Delete node.
	                                        tx.del(fileNodeId, function (e) {
	                                            if (noErrorTx(e, tx, cb)) {
	                                                // Step 5: Update directory listing.
	                                                tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, function (e) {
	                                                    if (noErrorTx(e, tx, cb)) {
	                                                        tx.commit(cb);
	                                                    }
	                                                });
	                                            }
	                                        });
	                                    }
	                                });
	                            }
	                        }
	                    });
	                }
	            }
	        });
	    };
	
	    return AsyncKeyValueFileSystem;
	}(BaseFileSystem));
	
	/**
	 * A simple in-memory key-value store backed by a JavaScript object.
	 */
	var InMemoryStore = function InMemoryStore() {
	    this.store = {};
	};
	InMemoryStore.prototype.name = function name () { return InMemoryFileSystem.Name; };
	InMemoryStore.prototype.clear = function clear () { this.store = {}; };
	InMemoryStore.prototype.beginTransaction = function beginTransaction (type) {
	    return new SimpleSyncRWTransaction(this);
	};
	InMemoryStore.prototype.get = function get (key) {
	    return this.store[key];
	};
	InMemoryStore.prototype.put = function put (key, data, overwrite) {
	    if (!overwrite && this.store.hasOwnProperty(key)) {
	        return false;
	    }
	    this.store[key] = data;
	    return true;
	};
	InMemoryStore.prototype.del = function del (key) {
	    delete this.store[key];
	};
	/**
	 * A simple in-memory file system backed by an InMemoryStore.
	 * Files are not persisted across page loads.
	 */
	var InMemoryFileSystem = (function (SyncKeyValueFileSystem$$1) {
	    function InMemoryFileSystem() {
	        SyncKeyValueFileSystem$$1.call(this, { store: new InMemoryStore() });
	    }
	
	    if ( SyncKeyValueFileSystem$$1 ) InMemoryFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
	    InMemoryFileSystem.prototype = Object.create( SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype );
	    InMemoryFileSystem.prototype.constructor = InMemoryFileSystem;
	    /**
	     * Creates an InMemoryFileSystem instance.
	     */
	    InMemoryFileSystem.Create = function Create (options, cb) {
	        cb(null, new InMemoryFileSystem());
	    };
	
	    return InMemoryFileSystem;
	}(SyncKeyValueFileSystem));
	
	InMemoryFileSystem.Name = "InMemory";
	InMemoryFileSystem.Options = {};
	
	/**
	 * Get the indexedDB constructor for the current browser.
	 * @hidden
	 */
	var indexedDB = global$1.indexedDB ||
	    global$1.mozIndexedDB ||
	    global$1.webkitIndexedDB ||
	    global$1.msIndexedDB;
	/**
	 * Converts a DOMException or a DOMError from an IndexedDB event into a
	 * standardized BrowserFS API error.
	 * @hidden
	 */
	function convertError$2(e, message) {
	    if ( message === void 0 ) message = e.toString();
	
	    switch (e.name) {
	        case "NotFoundError":
	            return new ApiError(ErrorCode.ENOENT, message);
	        case "QuotaExceededError":
	            return new ApiError(ErrorCode.ENOSPC, message);
	        default:
	            // The rest do not seem to map cleanly to standard error codes.
	            return new ApiError(ErrorCode.EIO, message);
	    }
	}
	/**
	 * Produces a new onerror handler for IDB. Our errors are always fatal, so we
	 * handle them generically: Call the user-supplied callback with a translated
	 * version of the error, and let the error bubble up.
	 * @hidden
	 */
	function onErrorHandler(cb, code, message) {
	    if ( code === void 0 ) code = ErrorCode.EIO;
	    if ( message === void 0 ) message = null;
	
	    return function (e) {
	        // Prevent the error from canceling the transaction.
	        e.preventDefault();
	        cb(new ApiError(code, message !== null ? message : undefined));
	    };
	}
	/**
	 * @hidden
	 */
	var IndexedDBROTransaction = function IndexedDBROTransaction(tx, store) {
	    this.tx = tx;
	    this.store = store;
	};
	IndexedDBROTransaction.prototype.get = function get (key, cb) {
	    try {
	        var r = this.store.get(key);
	        r.onerror = onErrorHandler(cb);
	        r.onsuccess = function (event) {
	            // IDB returns the value 'undefined' when you try to get keys that
	            // don't exist. The caller expects this behavior.
	            var result = event.target.result;
	            if (result === undefined) {
	                cb(null, result);
	            }
	            else {
	                // IDB data is stored as an ArrayBuffer
	                cb(null, arrayBuffer2Buffer(result));
	            }
	        };
	    }
	    catch (e) {
	        cb(convertError$2(e));
	    }
	};
	/**
	 * @hidden
	 */
	var IndexedDBRWTransaction = (function (IndexedDBROTransaction) {
	    function IndexedDBRWTransaction(tx, store) {
	        IndexedDBROTransaction.call(this, tx, store);
	    }
	
	    if ( IndexedDBROTransaction ) IndexedDBRWTransaction.__proto__ = IndexedDBROTransaction;
	    IndexedDBRWTransaction.prototype = Object.create( IndexedDBROTransaction && IndexedDBROTransaction.prototype );
	    IndexedDBRWTransaction.prototype.constructor = IndexedDBRWTransaction;
	    IndexedDBRWTransaction.prototype.put = function put (key, data, overwrite, cb) {
	        try {
	            var arraybuffer = buffer2ArrayBuffer(data);
	            var r;
	            if (overwrite) {
	                r = this.store.put(arraybuffer, key);
	            }
	            else {
	                // 'add' will never overwrite an existing key.
	                r = this.store.add(arraybuffer, key);
	            }
	            // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.
	            r.onerror = onErrorHandler(cb);
	            r.onsuccess = function (event) {
	                cb(null, true);
	            };
	        }
	        catch (e) {
	            cb(convertError$2(e));
	        }
	    };
	    IndexedDBRWTransaction.prototype.del = function del (key, cb) {
	        try {
	            // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string
	            // like this.
	            // http://stackoverflow.com/a/26479152
	            var r = this.store['delete'](key);
	            r.onerror = onErrorHandler(cb);
	            r.onsuccess = function (event) {
	                cb();
	            };
	        }
	        catch (e) {
	            cb(convertError$2(e));
	        }
	    };
	    IndexedDBRWTransaction.prototype.commit = function commit (cb) {
	        // Return to the event loop to commit the transaction.
	        setTimeout(cb, 0);
	    };
	    IndexedDBRWTransaction.prototype.abort = function abort (cb) {
	        var _e = null;
	        try {
	            this.tx.abort();
	        }
	        catch (e) {
	            _e = convertError$2(e);
	        }
	        finally {
	            cb(_e);
	        }
	    };
	
	    return IndexedDBRWTransaction;
	}(IndexedDBROTransaction));
	var IndexedDBStore = function IndexedDBStore(cb, storeName) {
	    var this$1 = this;
	    if ( storeName === void 0 ) storeName = 'browserfs';
	
	    this.storeName = storeName;
	    var openReq = indexedDB.open(this.storeName, 1);
	    openReq.onupgradeneeded = function (event) {
	        var db = event.target.result;
	        // Huh. This should never happen; we're at version 1. Why does another
	        // database exist?
	        if (db.objectStoreNames.contains(this$1.storeName)) {
	            db.deleteObjectStore(this$1.storeName);
	        }
	        db.createObjectStore(this$1.storeName);
	    };
	    openReq.onsuccess = function (event) {
	        this$1.db = event.target.result;
	        cb(null, this$1);
	    };
	    openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
	};
	IndexedDBStore.prototype.name = function name () {
	    return IndexedDBFileSystem.Name + " - " + this.storeName;
	};
	IndexedDBStore.prototype.clear = function clear (cb) {
	    try {
	        var tx = this.db.transaction(this.storeName, 'readwrite'), objectStore = tx.objectStore(this.storeName), r = objectStore.clear();
	        r.onsuccess = function (event) {
	            // Use setTimeout to commit transaction.
	            setTimeout(cb, 0);
	        };
	        r.onerror = onErrorHandler(cb);
	    }
	    catch (e) {
	        cb(convertError$2(e));
	    }
	};
	IndexedDBStore.prototype.beginTransaction = function beginTransaction (type) {
	        if ( type === void 0 ) type = 'readonly';
	
	    var tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);
	    if (type === 'readwrite') {
	        return new IndexedDBRWTransaction(tx, objectStore);
	    }
	    else if (type === 'readonly') {
	        return new IndexedDBROTransaction(tx, objectStore);
	    }
	    else {
	        throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');
	    }
	};
	/**
	 * A file system that uses the IndexedDB key value file system.
	 */
	var IndexedDBFileSystem = (function (AsyncKeyValueFileSystem$$1) {
	    function IndexedDBFileSystem(cb, storeName, deprecateMsg) {
	        var this$1 = this;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        AsyncKeyValueFileSystem$$1.call(this);
	        this.store = new IndexedDBStore(function (e) {
	            if (e) {
	                cb(e);
	            }
	            else {
	                this$1.init(this$1.store, function (e) {
	                    cb(e, this$1);
	                });
	            }
	        }, storeName);
	        deprecationMessage(deprecateMsg, IndexedDBFileSystem.Name, { storeName: storeName });
	    }
	
	    if ( AsyncKeyValueFileSystem$$1 ) IndexedDBFileSystem.__proto__ = AsyncKeyValueFileSystem$$1;
	    IndexedDBFileSystem.prototype = Object.create( AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype );
	    IndexedDBFileSystem.prototype.constructor = IndexedDBFileSystem;
	    /**
	     * Constructs an IndexedDB file system with the given options.
	     */
	    IndexedDBFileSystem.Create = function Create (opts, cb) {
	        // tslint:disable-next-line:no-unused-new
	        new IndexedDBFileSystem(cb, opts.storeName, false);
	        // tslint:enable-next-line:no-unused-new
	    };
	    IndexedDBFileSystem.isAvailable = function isAvailable () {
	        // In Safari's private browsing mode, indexedDB.open returns NULL.
	        // In Firefox, it throws an exception.
	        // In Chrome, it "just works", and clears the database when you leave the page.
	        // Untested: Opera, IE.
	        try {
	            return typeof indexedDB !== 'undefined' && null !== indexedDB.open("__browserfs_test__");
	        }
	        catch (e) {
	            return false;
	        }
	    };
	
	    return IndexedDBFileSystem;
	}(AsyncKeyValueFileSystem));
	
	IndexedDBFileSystem.Name = "IndexedDB";
	IndexedDBFileSystem.Options = {
	    storeName: {
	        type: "string",
	        optional: true,
	        description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
	    }
	};
	
	/**
	 * Some versions of FF and all versions of IE do not support the full range of
	 * 16-bit numbers encoded as characters, as they enforce UTF-16 restrictions.
	 * @url http://stackoverflow.com/questions/11170716/are-there-any-characters-that-are-not-allowed-in-localstorage/11173673#11173673
	 * @hidden
	 */
	var supportsBinaryString = false;
	var binaryEncoding;
	try {
	    global$1.localStorage.setItem("__test__", String.fromCharCode(0xD800));
	    supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
	}
	catch (e) {
	    // IE throws an exception.
	    supportsBinaryString = false;
	}
	binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';
	if (!Buffer.isEncoding(binaryEncoding)) {
	    // Fallback for non BrowserFS implementations of buffer that lack a
	    // binary_string format.
	    binaryEncoding = "base64";
	}
	/**
	 * A synchronous key-value store backed by localStorage.
	 */
	var LocalStorageStore = function LocalStorageStore () {};
	
	LocalStorageStore.prototype.name = function name () {
	    return LocalStorageFileSystem.Name;
	};
	LocalStorageStore.prototype.clear = function clear () {
	    global$1.localStorage.clear();
	};
	LocalStorageStore.prototype.beginTransaction = function beginTransaction (type) {
	    // No need to differentiate.
	    return new SimpleSyncRWTransaction(this);
	};
	LocalStorageStore.prototype.get = function get (key) {
	    try {
	        var data = global$1.localStorage.getItem(key);
	        if (data !== null) {
	            return Buffer.from(data, binaryEncoding);
	        }
	    }
	    catch (e) {
	        // Do nothing.
	    }
	    // Key doesn't exist, or a failure occurred.
	    return undefined;
	};
	LocalStorageStore.prototype.put = function put (key, data, overwrite) {
	    try {
	        if (!overwrite && global$1.localStorage.getItem(key) !== null) {
	            // Don't want to overwrite the key!
	            return false;
	        }
	        global$1.localStorage.setItem(key, data.toString(binaryEncoding));
	        return true;
	    }
	    catch (e) {
	        throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
	    }
	};
	LocalStorageStore.prototype.del = function del (key) {
	    try {
	        global$1.localStorage.removeItem(key);
	    }
	    catch (e) {
	        throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
	    }
	};
	/**
	 * A synchronous file system backed by localStorage. Connects our
	 * LocalStorageStore to our SyncKeyValueFileSystem.
	 */
	var LocalStorageFileSystem = (function (SyncKeyValueFileSystem$$1) {
	    function LocalStorageFileSystem() { SyncKeyValueFileSystem$$1.call(this, { store: new LocalStorageStore() }); }
	
	    if ( SyncKeyValueFileSystem$$1 ) LocalStorageFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
	    LocalStorageFileSystem.prototype = Object.create( SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype );
	    LocalStorageFileSystem.prototype.constructor = LocalStorageFileSystem;
	    /**
	     * Creates a LocalStorageFileSystem instance.
	     */
	    LocalStorageFileSystem.Create = function Create (options, cb) {
	        cb(null, new LocalStorageFileSystem());
	    };
	    LocalStorageFileSystem.isAvailable = function isAvailable () {
	        return typeof global$1.localStorage !== 'undefined';
	    };
	
	    return LocalStorageFileSystem;
	}(SyncKeyValueFileSystem));
	
	LocalStorageFileSystem.Name = "LocalStorage";
	LocalStorageFileSystem.Options = {};
	
	/**
	 * The MountableFileSystem allows you to mount multiple backend types or
	 * multiple instantiations of the same backend into a single file system tree.
	 * The file systems do not need to know about each other; all interactions are
	 * automatically facilitated through this interface.
	 *
	 * For example, if a file system is mounted at /mnt/blah, and a request came in
	 * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.
	 *
	 * You can mount file systems when you configure the file system:
	 * ```javascript
	 * BrowserFS.configure({
	 *   fs: "MountableFileSystem",
	 *   options: {
	 *     '/data': { fs: 'XmlHttpRequest', options: { index: "http://mysite.com/files/index.json" } },
	 *     '/home': { fs: 'LocalStorage' }
	 *   }
	 * }, function(e) {
	 *
	 * });
	 * ```
	 *
	 * For advanced users, you can also mount file systems *after* MFS is constructed:
	 * ```javascript
	 * BrowserFS.FileSystem.XmlHttpRequest.Create({
	 *   index: "http://mysite.com/files/index.json"
	 * }, function(e, xhrfs) {
	 *   BrowserFS.FileSystem.MountableFileSystem.Create({
	 *     '/data': xhrfs
	 *   }, function(e, mfs) {
	 *     BrowserFS.initialize(mfs);
	 *
	 *     // Added after-the-fact...
	 *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {
	 *       mfs.mount('/home', lsfs);
	 *     });
	 *   });
	 * });
	 * ```
	 *
	 * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.
	 *
	 * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.
	 */
	var MountableFileSystem = (function (BaseFileSystem$$1) {
	    function MountableFileSystem() {
	        BaseFileSystem$$1.call(this);
	        // Contains the list of mount points in mntMap, sorted by string length in decreasing order.
	        // Ensures that we scan the most specific mount points for a match first, which lets us
	        // nest mount points.
	        this.mountList = [];
	        this.mntMap = {};
	        // The InMemory file system serves purely to provide directory listings for
	        // mounted file systems.
	        this.rootFs = new InMemoryFileSystem();
	    }
	
	    if ( BaseFileSystem$$1 ) MountableFileSystem.__proto__ = BaseFileSystem$$1;
	    MountableFileSystem.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    MountableFileSystem.prototype.constructor = MountableFileSystem;
	    /**
	     * Creates a MountableFileSystem instance with the given options.
	     */
	    MountableFileSystem.Create = function Create (opts, cb) {
	        var fs = new MountableFileSystem();
	        Object.keys(opts).forEach(function (mountPoint) {
	            fs.mount(mountPoint, opts[mountPoint]);
	        });
	        cb(null, fs);
	    };
	    MountableFileSystem.isAvailable = function isAvailable () {
	        return true;
	    };
	    /**
	     * Mounts the file system at the given mount point.
	     */
	    MountableFileSystem.prototype.mount = function mount (mountPoint, fs) {
	        if (mountPoint[0] !== '/') {
	            mountPoint = "/" + mountPoint;
	        }
	        mountPoint = path.resolve(mountPoint);
	        if (this.mntMap[mountPoint]) {
	            throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
	        }
	        mkdirpSync(mountPoint, 0x1ff, this.rootFs);
	        this.mntMap[mountPoint] = fs;
	        this.mountList.push(mountPoint);
	        this.mountList = this.mountList.sort(function (a, b) { return b.length - a.length; });
	    };
	    MountableFileSystem.prototype.umount = function umount (mountPoint) {
	        var this$1 = this;
	
	        if (mountPoint[0] !== '/') {
	            mountPoint = "/" + mountPoint;
	        }
	        mountPoint = path.resolve(mountPoint);
	        if (!this.mntMap[mountPoint]) {
	            throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
	        }
	        delete this.mntMap[mountPoint];
	        this.mountList.splice(this.mountList.indexOf(mountPoint), 1);
	        while (mountPoint !== '/') {
	            if (this$1.rootFs.readdirSync(mountPoint).length === 0) {
	                this$1.rootFs.rmdirSync(mountPoint);
	                mountPoint = path.dirname(mountPoint);
	            }
	            else {
	                break;
	            }
	        }
	    };
	    /**
	     * Returns the file system that the path points to.
	     */
	    MountableFileSystem.prototype._getFs = function _getFs (path$$1) {
	        var this$1 = this;
	
	        var mountList = this.mountList, len = mountList.length;
	        for (var i = 0; i < len; i++) {
	            var mountPoint = mountList[i];
	            // We know path is normalized, so it is a substring of the mount point.
	            if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
	                path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);
	                if (path$$1 === '') {
	                    path$$1 = '/';
	                }
	                return { fs: this$1.mntMap[mountPoint], path: path$$1 };
	            }
	        }
	        // Query our root file system.
	        return { fs: this.rootFs, path: path$$1 };
	    };
	    // Global information methods
	    MountableFileSystem.prototype.getName = function getName () {
	        return MountableFileSystem.Name;
	    };
	    MountableFileSystem.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        cb(0, 0);
	    };
	    MountableFileSystem.prototype.isReadOnly = function isReadOnly () {
	        return false;
	    };
	    MountableFileSystem.prototype.supportsLinks = function supportsLinks () {
	        // I'm not ready for cross-FS links yet.
	        return false;
	    };
	    MountableFileSystem.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    MountableFileSystem.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    /**
	     * Fixes up error messages so they mention the mounted file location relative
	     * to the MFS root, not to the particular FS's root.
	     * Mutates the input error, and returns it.
	     */
	    MountableFileSystem.prototype.standardizeError = function standardizeError (err, path$$1, realPath) {
	        var index = err.message.indexOf(path$$1);
	        if (index !== -1) {
	            err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path$$1.length);
	            err.path = realPath;
	        }
	        return err;
	    };
	    // The following methods involve multiple file systems, and thus have custom
	    // logic.
	    // Note that we go through the Node API to use its robust default argument
	    // processing.
	    MountableFileSystem.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        // Scenario 1: old and new are on same FS.
	        var fs1rv = this._getFs(oldPath);
	        var fs2rv = this._getFs(newPath);
	        if (fs1rv.fs === fs2rv.fs) {
	            return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function (e) {
	                if (e) {
	                    this$1.standardizeError(this$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
	                }
	                cb(e);
	            });
	        }
	        // Scenario 2: Different file systems.
	        // Read old file, write new file, delete old file.
	        return _fsMock.readFile(oldPath, function (err, data) {
	            if (err) {
	                return cb(err);
	            }
	            _fsMock.writeFile(newPath, data, function (err) {
	                if (err) {
	                    return cb(err);
	                }
	                _fsMock.unlink(oldPath, cb);
	            });
	        });
	    };
	    MountableFileSystem.prototype.renameSync = function renameSync (oldPath, newPath) {
	        // Scenario 1: old and new are on same FS.
	        var fs1rv = this._getFs(oldPath);
	        var fs2rv = this._getFs(newPath);
	        if (fs1rv.fs === fs2rv.fs) {
	            try {
	                return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
	            }
	            catch (e) {
	                this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
	                throw e;
	            }
	        }
	        // Scenario 2: Different file systems.
	        var data = _fsMock.readFileSync(oldPath);
	        _fsMock.writeFileSync(newPath, data);
	        return _fsMock.unlinkSync(oldPath);
	    };
	    MountableFileSystem.prototype.readdirSync = function readdirSync (p) {
	        var fsInfo = this._getFs(p);
	        // If null, rootfs did not have the directory
	        // (or the target FS is the root fs).
	        var rv = null;
	        // Mount points are all defined in the root FS.
	        // Ensure that we list those, too.
	        if (fsInfo.fs !== this.rootFs) {
	            try {
	                rv = this.rootFs.readdirSync(p);
	            }
	            catch (e) {
	                // Ignore.
	            }
	        }
	        try {
	            var rv2 = fsInfo.fs.readdirSync(fsInfo.path);
	            if (rv === null) {
	                return rv2;
	            }
	            else {
	                // Filter out duplicates.
	                return rv2.concat(rv.filter(function (val) { return rv2.indexOf(val) === -1; }));
	            }
	        }
	        catch (e) {
	            if (rv === null) {
	                throw this.standardizeError(e, fsInfo.path, p);
	            }
	            else {
	                // The root FS had something.
	                return rv;
	            }
	        }
	    };
	    MountableFileSystem.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	        var fsInfo = this._getFs(p);
	        fsInfo.fs.readdir(fsInfo.path, function (err, files) {
	            if (fsInfo.fs !== this$1.rootFs) {
	                try {
	                    var rv = this$1.rootFs.readdirSync(p);
	                    if (files) {
	                        // Filter out duplicates.
	                        files = files.concat(rv.filter(function (val) { return files.indexOf(val) === -1; }));
	                    }
	                    else {
	                        files = rv;
	                    }
	                }
	                catch (e) {
	                    // Root FS and target FS did not have directory.
	                    if (err) {
	                        return cb(this$1.standardizeError(err, fsInfo.path, p));
	                    }
	                }
	            }
	            else if (err) {
	                // Root FS and target FS are the same, and did not have directory.
	                return cb(this$1.standardizeError(err, fsInfo.path, p));
	            }
	            cb(null, files);
	        });
	    };
	    MountableFileSystem.prototype.rmdirSync = function rmdirSync (p) {
	        var fsInfo = this._getFs(p);
	        if (this._containsMountPt(p)) {
	            throw ApiError.ENOTEMPTY(p);
	        }
	        else {
	            try {
	                fsInfo.fs.rmdirSync(fsInfo.path);
	            }
	            catch (e) {
	                throw this.standardizeError(e, fsInfo.path, p);
	            }
	        }
	    };
	    MountableFileSystem.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	        var fsInfo = this._getFs(p);
	        if (this._containsMountPt(p)) {
	            cb(ApiError.ENOTEMPTY(p));
	        }
	        else {
	            fsInfo.fs.rmdir(fsInfo.path, function (err) {
	                cb(err ? this$1.standardizeError(err, fsInfo.path, p) : null);
	            });
	        }
	    };
	    /**
	     * Returns true if the given path contains a mount point.
	     */
	    MountableFileSystem.prototype._containsMountPt = function _containsMountPt (p) {
	        var mountPoints = this.mountList, len = mountPoints.length;
	        for (var i = 0; i < len; i++) {
	            var pt = mountPoints[i];
	            if (pt.length >= p.length && pt.slice(0, p.length) === p) {
	                return true;
	            }
	        }
	        return false;
	    };
	
	    return MountableFileSystem;
	}(BaseFileSystem));
	
	MountableFileSystem.Name = "MountableFileSystem";
	MountableFileSystem.Options = {};
	/**
	 * Tricky: Define all of the functions that merely forward arguments to the
	 * relevant file system, or return/throw an error.
	 * Take advantage of the fact that the *first* argument is always the path, and
	 * the *last* is the callback function (if async).
	 * @todo Can use numArgs to make proxying more efficient.
	 * @hidden
	 */
	function defineFcn(name, isSync, numArgs) {
	    if (isSync) {
	        return function () {
	            var args = [], len = arguments.length;
	            while ( len-- ) args[ len ] = arguments[ len ];
	
	            var path$$1 = args[0];
	            var rv = this._getFs(path$$1);
	            args[0] = rv.path;
	            try {
	                return rv.fs[name].apply(rv.fs, args);
	            }
	            catch (e) {
	                this.standardizeError(e, rv.path, path$$1);
	                throw e;
	            }
	        };
	    }
	    else {
	        return function () {
	            var this$1 = this;
	            var args = [], len = arguments.length;
	            while ( len-- ) args[ len ] = arguments[ len ];
	
	            var path$$1 = args[0];
	            var rv = this._getFs(path$$1);
	            args[0] = rv.path;
	            if (typeof args[args.length - 1] === 'function') {
	                var cb = args[args.length - 1];
	                args[args.length - 1] = function () {
	                    var args = [], len = arguments.length;
	                    while ( len-- ) args[ len ] = arguments[ len ];
	
	                    if (args.length > 0 && args[0] instanceof ApiError) {
	                        this$1.standardizeError(args[0], rv.path, path$$1);
	                    }
	                    cb.apply(null, args);
	                };
	            }
	            return rv.fs[name].apply(rv.fs, args);
	        };
	    }
	}
	/**
	 * @hidden
	 */
	var fsCmdMap = [
	    // 1 arg functions
	    ['exists', 'unlink', 'readlink'],
	    // 2 arg functions
	    ['stat', 'mkdir', 'realpath', 'truncate'],
	    // 3 arg functions
	    ['open', 'readFile', 'chmod', 'utimes'],
	    // 4 arg functions
	    ['chown'],
	    // 5 arg functions
	    ['writeFile', 'appendFile']
	];
	for (var i = 0; i < fsCmdMap.length; i++) {
	    var cmds = fsCmdMap[i];
	    for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
	        var fnName = list[i$1];
	
	        MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
	        MountableFileSystem.prototype[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);
	    }
	}
	
	/**
	 * @hidden
	 */
	var bfsSetImmediate;
	if (typeof (setImmediate) !== "undefined") {
	    bfsSetImmediate = setImmediate;
	}
	else {
	    var gScope = global$1;
	    var timeouts = [];
	    var messageName = "zero-timeout-message";
	    var canUsePostMessage = function () {
	        if (typeof gScope.importScripts !== 'undefined' || !gScope.postMessage) {
	            return false;
	        }
	        var postMessageIsAsync = true;
	        var oldOnMessage = gScope.onmessage;
	        gScope.onmessage = function () {
	            postMessageIsAsync = false;
	        };
	        gScope.postMessage('', '*');
	        gScope.onmessage = oldOnMessage;
	        return postMessageIsAsync;
	    };
	    if (canUsePostMessage()) {
	        bfsSetImmediate = function (fn) {
	            timeouts.push(fn);
	            gScope.postMessage(messageName, "*");
	        };
	        var handleMessage = function (event) {
	            if (event.source === self && event.data === messageName) {
	                if (event.stopPropagation) {
	                    event.stopPropagation();
	                }
	                else {
	                    event.cancelBubble = true;
	                }
	                if (timeouts.length > 0) {
	                    var fn = timeouts.shift();
	                    return fn();
	                }
	            }
	        };
	        if (gScope.addEventListener) {
	            gScope.addEventListener('message', handleMessage, true);
	        }
	        else {
	            gScope.attachEvent('onmessage', handleMessage);
	        }
	    }
	    else if (gScope.MessageChannel) {
	        // WebWorker MessageChannel
	        var channel = new gScope.MessageChannel();
	        channel.port1.onmessage = function (event) {
	            if (timeouts.length > 0) {
	                return timeouts.shift()();
	            }
	        };
	        bfsSetImmediate = function (fn) {
	            timeouts.push(fn);
	            channel.port2.postMessage('');
	        };
	    }
	    else {
	        bfsSetImmediate = function (fn) {
	            return setTimeout(fn, 0);
	        };
	    }
	}
	var setImmediate$3 = bfsSetImmediate;
	
	/**
	 * Non-recursive mutex
	 * @hidden
	 */
	var Mutex = function Mutex() {
	    this._locked = false;
	    this._waiters = [];
	};
	Mutex.prototype.lock = function lock (cb) {
	    if (this._locked) {
	        this._waiters.push(cb);
	        return;
	    }
	    this._locked = true;
	    cb();
	};
	Mutex.prototype.unlock = function unlock () {
	    if (!this._locked) {
	        throw new Error('unlock of a non-locked mutex');
	    }
	    var next = this._waiters.shift();
	    // don't unlock - we want to queue up next for the
	    // _end_ of the current task execution, but we don't
	    // want it to be called inline with whatever the
	    // current stack is.  This way we still get the nice
	    // behavior that an unlock immediately followed by a
	    // lock won't cause starvation.
	    if (next) {
	        setImmediate$3(next);
	        return;
	    }
	    this._locked = false;
	};
	Mutex.prototype.tryLock = function tryLock () {
	    if (this._locked) {
	        return false;
	    }
	    this._locked = true;
	    return true;
	};
	Mutex.prototype.isLocked = function isLocked () {
	    return this._locked;
	};
	
	/**
	 * This class serializes access to an underlying async filesystem.
	 * For example, on an OverlayFS instance with an async lower
	 * directory operations like rename and rmdir may involve multiple
	 * requests involving both the upper and lower filesystems -- they
	 * are not executed in a single atomic step.  OverlayFS uses this
	 * LockedFS to avoid having to reason about the correctness of
	 * multiple requests interleaving.
	 */
	var LockedFS = function LockedFS(fs) {
	    this._fs = fs;
	    this._mu = new Mutex();
	};
	LockedFS.prototype.getName = function getName () {
	    return 'LockedFS<' + this._fs.getName() + '>';
	};
	LockedFS.prototype.getFSUnlocked = function getFSUnlocked () {
	    return this._fs;
	};
	LockedFS.prototype.initialize = function initialize (cb) {
	    // FIXME: check to see if FS supports initialization
	    this._fs.initialize(cb);
	};
	LockedFS.prototype.diskSpace = function diskSpace (p, cb) {
	    // FIXME: should this lock?
	    this._fs.diskSpace(p, cb);
	};
	LockedFS.prototype.isReadOnly = function isReadOnly () {
	    return this._fs.isReadOnly();
	};
	LockedFS.prototype.supportsLinks = function supportsLinks () {
	    return this._fs.supportsLinks();
	};
	LockedFS.prototype.supportsProps = function supportsProps () {
	    return this._fs.supportsProps();
	};
	LockedFS.prototype.supportsSynch = function supportsSynch () {
	    return this._fs.supportsSynch();
	};
	LockedFS.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.rename(oldPath, newPath, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.renameSync = function renameSync (oldPath, newPath) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.renameSync(oldPath, newPath);
	};
	LockedFS.prototype.stat = function stat (p, isLstat, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.stat(p, isLstat, function (err, stat) {
	            this$1._mu.unlock();
	            cb(err, stat);
	        });
	    });
	};
	LockedFS.prototype.statSync = function statSync (p, isLstat) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.statSync(p, isLstat);
	};
	LockedFS.prototype.open = function open (p, flag, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.open(p, flag, mode, function (err, fd) {
	            this$1._mu.unlock();
	            cb(err, fd);
	        });
	    });
	};
	LockedFS.prototype.openSync = function openSync (p, flag, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.openSync(p, flag, mode);
	};
	LockedFS.prototype.unlink = function unlink (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.unlink(p, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.unlinkSync = function unlinkSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.unlinkSync(p);
	};
	LockedFS.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.rmdir(p, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.rmdirSync = function rmdirSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.rmdirSync(p);
	};
	LockedFS.prototype.mkdir = function mkdir (p, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.mkdir(p, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.mkdirSync = function mkdirSync (p, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.mkdirSync(p, mode);
	};
	LockedFS.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.readdir(p, function (err, files) {
	            this$1._mu.unlock();
	            cb(err, files);
	        });
	    });
	};
	LockedFS.prototype.readdirSync = function readdirSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.readdirSync(p);
	};
	LockedFS.prototype.exists = function exists (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.exists(p, function (exists) {
	            this$1._mu.unlock();
	            cb(exists);
	        });
	    });
	};
	LockedFS.prototype.existsSync = function existsSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.existsSync(p);
	};
	LockedFS.prototype.realpath = function realpath (p, cache, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.realpath(p, cache, function (err, resolvedPath) {
	            this$1._mu.unlock();
	            cb(err, resolvedPath);
	        });
	    });
	};
	LockedFS.prototype.realpathSync = function realpathSync (p, cache) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.realpathSync(p, cache);
	};
	LockedFS.prototype.truncate = function truncate (p, len, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.truncate(p, len, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.truncateSync = function truncateSync (p, len) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.truncateSync(p, len);
	};
	LockedFS.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.readFile(fname, encoding, flag, function (err, data) {
	            this$1._mu.unlock();
	            cb(err, data);
	        });
	    });
	};
	LockedFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.readFileSync(fname, encoding, flag);
	};
	LockedFS.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.writeFile(fname, data, encoding, flag, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.writeFileSync = function writeFileSync (fname, data, encoding, flag, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.writeFileSync(fname, data, encoding, flag, mode);
	};
	LockedFS.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.appendFile(fname, data, encoding, flag, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.appendFileSync = function appendFileSync (fname, data, encoding, flag, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.appendFileSync(fname, data, encoding, flag, mode);
	};
	LockedFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.chmod(p, isLchmod, mode, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.chmodSync(p, isLchmod, mode);
	};
	LockedFS.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.chown(p, isLchown, uid, gid, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.chownSync(p, isLchown, uid, gid);
	};
	LockedFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.utimes(p, atime, mtime, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.utimesSync(p, atime, mtime);
	};
	LockedFS.prototype.link = function link (srcpath, dstpath, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.link(srcpath, dstpath, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.linkSync = function linkSync (srcpath, dstpath) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.linkSync(srcpath, dstpath);
	};
	LockedFS.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.symlink(srcpath, dstpath, type, function (err) {
	            this$1._mu.unlock();
	            cb(err);
	        });
	    });
	};
	LockedFS.prototype.symlinkSync = function symlinkSync (srcpath, dstpath, type) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.symlinkSync(srcpath, dstpath, type);
	};
	LockedFS.prototype.readlink = function readlink (p, cb) {
	        var this$1 = this;
	
	    this._mu.lock(function () {
	        this$1._fs.readlink(p, function (err, linkString) {
	            this$1._mu.unlock();
	            cb(err, linkString);
	        });
	    });
	};
	LockedFS.prototype.readlinkSync = function readlinkSync (p) {
	    if (this._mu.isLocked()) {
	        throw new Error('invalid sync call');
	    }
	    return this._fs.readlinkSync(p);
	};
	
	/**
	 * @hidden
	 */
	var deletionLogPath = '/.deletedFiles.log';
	/**
	 * Given a read-only mode, makes it writable.
	 * @hidden
	 */
	function makeModeWritable(mode) {
	    return 146 | mode;
	}
	/**
	 * @hidden
	 */
	function getFlag(f) {
	    return FileFlag.getFileFlag(f);
	}
	/**
	 * Overlays a RO file to make it writable.
	 */
	var OverlayFile = (function (PreloadFile$$1) {
	    function OverlayFile(fs, path$$1, flag, stats, data) {
	        PreloadFile$$1.call(this, fs, path$$1, flag, stats, data);
	    }
	
	    if ( PreloadFile$$1 ) OverlayFile.__proto__ = PreloadFile$$1;
	    OverlayFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    OverlayFile.prototype.constructor = OverlayFile;
	    OverlayFile.prototype.sync = function sync (cb) {
	        var this$1 = this;
	
	        if (!this.isDirty()) {
	            cb(null);
	            return;
	        }
	        this._fs._syncAsync(this, function (err) {
	            this$1.resetDirty();
	            cb(err);
	        });
	    };
	    OverlayFile.prototype.syncSync = function syncSync () {
	        if (this.isDirty()) {
	            this._fs._syncSync(this);
	            this.resetDirty();
	        }
	    };
	    OverlayFile.prototype.close = function close (cb) {
	        this.sync(cb);
	    };
	    OverlayFile.prototype.closeSync = function closeSync () {
	        this.syncSync();
	    };
	
	    return OverlayFile;
	}(PreloadFile));
	/**
	 * *INTERNAL, DO NOT USE DIRECTLY!*
	 *
	 * Core OverlayFS class that contains no locking whatsoever. We wrap these objects
	 * in a LockedFS to prevent races.
	 */
	var UnlockedOverlayFS = (function (BaseFileSystem$$1) {
	    function UnlockedOverlayFS(writable, readable) {
	        BaseFileSystem$$1.call(this);
	        this._isInitialized = false;
	        this._initializeCallbacks = [];
	        this._deletedFiles = {};
	        this._deleteLog = '';
	        // If 'true', we have scheduled a delete log update.
	        this._deleteLogUpdatePending = false;
	        // If 'true', a delete log update is needed after the scheduled delete log
	        // update finishes.
	        this._deleteLogUpdateNeeded = false;
	        // If there was an error updating the delete log...
	        this._deleteLogError = null;
	        this._writable = writable;
	        this._readable = readable;
	        if (this._writable.isReadOnly()) {
	            throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
	        }
	    }
	
	    if ( BaseFileSystem$$1 ) UnlockedOverlayFS.__proto__ = BaseFileSystem$$1;
	    UnlockedOverlayFS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    UnlockedOverlayFS.prototype.constructor = UnlockedOverlayFS;
	    UnlockedOverlayFS.isAvailable = function isAvailable () {
	        return true;
	    };
	    UnlockedOverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems () {
	        return {
	            readable: this._readable,
	            writable: this._writable
	        };
	    };
	    UnlockedOverlayFS.prototype._syncAsync = function _syncAsync (file, cb) {
	        var this$1 = this;
	
	        this.createParentDirectoriesAsync(file.getPath(), function (err) {
	            if (err) {
	                return cb(err);
	            }
	            this$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode, cb);
	        });
	    };
	    UnlockedOverlayFS.prototype._syncSync = function _syncSync (file) {
	        this.createParentDirectories(file.getPath());
	        this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode);
	    };
	    UnlockedOverlayFS.prototype.getName = function getName () {
	        return OverlayFS.Name;
	    };
	    /**
	     * Called once to load up metadata stored on the writable file system.
	     */
	    UnlockedOverlayFS.prototype.initialize = function initialize (cb) {
	        var this$1 = this;
	
	        var callbackArray = this._initializeCallbacks;
	        var end = function (e) {
	            this$1._isInitialized = !e;
	            this$1._initializeCallbacks = [];
	            callbackArray.forEach((function (cb) { return cb(e); }));
	        };
	        // if we're already initialized, immediately invoke the callback
	        if (this._isInitialized) {
	            return cb();
	        }
	        callbackArray.push(cb);
	        // The first call to initialize initializes, the rest wait for it to complete.
	        if (callbackArray.length !== 1) {
	            return;
	        }
	        // Read deletion log, process into metadata.
	        this._writable.readFile(deletionLogPath, 'utf8', getFlag('r'), function (err, data) {
	            if (err) {
	                // ENOENT === Newly-instantiated file system, and thus empty log.
	                if (err.errno !== ErrorCode.ENOENT) {
	                    return end(err);
	                }
	            }
	            else {
	                this$1._deleteLog = data;
	            }
	            this$1._reparseDeletionLog();
	            end();
	        });
	    };
	    UnlockedOverlayFS.prototype.isReadOnly = function isReadOnly () { return false; };
	    UnlockedOverlayFS.prototype.supportsSynch = function supportsSynch () { return this._readable.supportsSynch() && this._writable.supportsSynch(); };
	    UnlockedOverlayFS.prototype.supportsLinks = function supportsLinks () { return false; };
	    UnlockedOverlayFS.prototype.supportsProps = function supportsProps () { return this._readable.supportsProps() && this._writable.supportsProps(); };
	    UnlockedOverlayFS.prototype.getDeletionLog = function getDeletionLog () {
	        return this._deleteLog;
	    };
	    UnlockedOverlayFS.prototype.restoreDeletionLog = function restoreDeletionLog (log) {
	        this._deleteLog = log;
	        this._reparseDeletionLog();
	        this.updateLog('');
	    };
	    UnlockedOverlayFS.prototype.rename = function rename (oldPath, newPath, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
	            return;
	        }
	        if (oldPath === deletionLogPath || newPath === deletionLogPath) {
	            return cb(ApiError.EPERM('Cannot rename deletion log.'));
	        }
	        // nothing to do if paths match
	        if (oldPath === newPath) {
	            return cb();
	        }
	        this.stat(oldPath, false, function (oldErr, oldStats) {
	            if (oldErr) {
	                return cb(oldErr);
	            }
	            return this$1.stat(newPath, false, function (newErr, newStats) {
	                var self = this$1;
	                // precondition: both oldPath and newPath exist and are dirs.
	                // decreases: |files|
	                // Need to move *every file/folder* currently stored on
	                // readable to its new location on writable.
	                function copyDirContents(files) {
	                    var file = files.shift();
	                    if (!file) {
	                        return cb();
	                    }
	                    var oldFile = path.resolve(oldPath, file);
	                    var newFile = path.resolve(newPath, file);
	                    // Recursion! Should work for any nested files / folders.
	                    self.rename(oldFile, newFile, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        copyDirContents(files);
	                    });
	                }
	                var mode = 511;
	                // from linux's rename(2) manpage: oldpath can specify a
	                // directory.  In this case, newpath must either not exist, or
	                // it must specify an empty directory.
	                if (oldStats.isDirectory()) {
	                    if (newErr) {
	                        if (newErr.errno !== ErrorCode.ENOENT) {
	                            return cb(newErr);
	                        }
	                        return this$1._writable.exists(oldPath, function (exists) {
	                            // simple case - both old and new are on the writable layer
	                            if (exists) {
	                                return this$1._writable.rename(oldPath, newPath, cb);
	                            }
	                            this$1._writable.mkdir(newPath, mode, function (mkdirErr) {
	                                if (mkdirErr) {
	                                    return cb(mkdirErr);
	                                }
	                                this$1._readable.readdir(oldPath, function (err, files) {
	                                    if (err) {
	                                        return cb();
	                                    }
	                                    copyDirContents(files);
	                                });
	                            });
	                        });
	                    }
	                    mode = newStats.mode;
	                    if (!newStats.isDirectory()) {
	                        return cb(ApiError.ENOTDIR(newPath));
	                    }
	                    this$1.readdir(newPath, function (readdirErr, files) {
	                        if (files && files.length) {
	                            return cb(ApiError.ENOTEMPTY(newPath));
	                        }
	                        this$1._readable.readdir(oldPath, function (err, files) {
	                            if (err) {
	                                return cb();
	                            }
	                            copyDirContents(files);
	                        });
	                    });
	                }
	                if (newStats && newStats.isDirectory()) {
	                    return cb(ApiError.EISDIR(newPath));
	                }
	                this$1.readFile(oldPath, null, getFlag('r'), function (err, data) {
	                    if (err) {
	                        return cb(err);
	                    }
	                    return this$1.writeFile(newPath, data, null, getFlag('w'), oldStats.mode, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        return this$1.unlink(oldPath, cb);
	                    });
	                });
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.renameSync = function renameSync (oldPath, newPath) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.checkPath(oldPath);
	        this.checkPath(newPath);
	        if (oldPath === deletionLogPath || newPath === deletionLogPath) {
	            throw ApiError.EPERM('Cannot rename deletion log.');
	        }
	        // Write newPath using oldPath's contents, delete oldPath.
	        var oldStats = this.statSync(oldPath, false);
	        if (oldStats.isDirectory()) {
	            // Optimization: Don't bother moving if old === new.
	            if (oldPath === newPath) {
	                return;
	            }
	            var mode = 511;
	            if (this.existsSync(newPath)) {
	                var stats = this.statSync(newPath, false);
	                mode = stats.mode;
	                if (stats.isDirectory()) {
	                    if (this.readdirSync(newPath).length > 0) {
	                        throw ApiError.ENOTEMPTY(newPath);
	                    }
	                }
	                else {
	                    throw ApiError.ENOTDIR(newPath);
	                }
	            }
	            // Take care of writable first. Move any files there, or create an empty directory
	            // if it doesn't exist.
	            if (this._writable.existsSync(oldPath)) {
	                this._writable.renameSync(oldPath, newPath);
	            }
	            else if (!this._writable.existsSync(newPath)) {
	                this._writable.mkdirSync(newPath, mode);
	            }
	            // Need to move *every file/folder* currently stored on readable to its new location
	            // on writable.
	            if (this._readable.existsSync(oldPath)) {
	                this._readable.readdirSync(oldPath).forEach(function (name) {
	                    // Recursion! Should work for any nested files / folders.
	                    this$1.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name));
	                });
	            }
	        }
	        else {
	            if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
	                throw ApiError.EISDIR(newPath);
	            }
	            this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag('r')), null, getFlag('w'), oldStats.mode);
	        }
	        if (oldPath !== newPath && this.existsSync(oldPath)) {
	            this.unlinkSync(oldPath);
	        }
	    };
	    UnlockedOverlayFS.prototype.stat = function stat (p, isLstat, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this._writable.stat(p, isLstat, function (err, stat) {
	            if (err && err.errno === ErrorCode.ENOENT) {
	                if (this$1._deletedFiles[p]) {
	                    cb(ApiError.ENOENT(p));
	                }
	                this$1._readable.stat(p, isLstat, function (err, stat) {
	                    if (stat) {
	                        // Make the oldStat's mode writable. Preserve the topmost
	                        // part of the mode, which specifies if it is a file or a
	                        // directory.
	                        stat = stat.clone();
	                        stat.mode = makeModeWritable(stat.mode);
	                    }
	                    cb(err, stat);
	                });
	            }
	            else {
	                cb(err, stat);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.statSync = function statSync (p, isLstat) {
	        this.checkInitialized();
	        try {
	            return this._writable.statSync(p, isLstat);
	        }
	        catch (e) {
	            if (this._deletedFiles[p]) {
	                throw ApiError.ENOENT(p);
	            }
	            var oldStat = this._readable.statSync(p, isLstat).clone();
	            // Make the oldStat's mode writable. Preserve the topmost part of the
	            // mode, which specifies if it is a file or a directory.
	            oldStat.mode = makeModeWritable(oldStat.mode);
	            return oldStat;
	        }
	    };
	    UnlockedOverlayFS.prototype.open = function open (p, flag, mode, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
	            return;
	        }
	        this.stat(p, false, function (err, stats) {
	            if (stats) {
	                switch (flag.pathExistsAction()) {
	                    case ActionType.TRUNCATE_FILE:
	                        return this$1.createParentDirectoriesAsync(p, function (err) {
	                            if (err) {
	                                return cb(err);
	                            }
	                            this$1._writable.open(p, flag, mode, cb);
	                        });
	                    case ActionType.NOP:
	                        return this$1._writable.exists(p, function (exists) {
	                            if (exists) {
	                                this$1._writable.open(p, flag, mode, cb);
	                            }
	                            else {
	                                // at this point we know the stats object we got is from
	                                // the readable FS.
	                                stats = stats.clone();
	                                stats.mode = mode;
	                                this$1._readable.readFile(p, null, getFlag('r'), function (readFileErr, data) {
	                                    if (readFileErr) {
	                                        return cb(readFileErr);
	                                    }
	                                    if (stats.size === -1) {
	                                        stats.size = data.length;
	                                    }
	                                    var f = new OverlayFile(this$1, p, flag, stats, data);
	                                    cb(null, f);
	                                });
	                            }
	                        });
	                    default:
	                        return cb(ApiError.EEXIST(p));
	                }
	            }
	            else {
	                switch (flag.pathNotExistsAction()) {
	                    case ActionType.CREATE_FILE:
	                        return this$1.createParentDirectoriesAsync(p, function (err) {
	                            if (err) {
	                                return cb(err);
	                            }
	                            return this$1._writable.open(p, flag, mode, cb);
	                        });
	                    default:
	                        return cb(ApiError.ENOENT(p));
	                }
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.openSync = function openSync (p, flag, mode) {
	        this.checkInitialized();
	        this.checkPath(p);
	        if (p === deletionLogPath) {
	            throw ApiError.EPERM('Cannot open deletion log.');
	        }
	        if (this.existsSync(p)) {
	            switch (flag.pathExistsAction()) {
	                case ActionType.TRUNCATE_FILE:
	                    this.createParentDirectories(p);
	                    return this._writable.openSync(p, flag, mode);
	                case ActionType.NOP:
	                    if (this._writable.existsSync(p)) {
	                        return this._writable.openSync(p, flag, mode);
	                    }
	                    else {
	                        // Create an OverlayFile.
	                        var buf = this._readable.readFileSync(p, null, getFlag('r'));
	                        var stats = this._readable.statSync(p, false).clone();
	                        stats.mode = mode;
	                        return new OverlayFile(this, p, flag, stats, buf);
	                    }
	                default:
	                    throw ApiError.EEXIST(p);
	            }
	        }
	        else {
	            switch (flag.pathNotExistsAction()) {
	                case ActionType.CREATE_FILE:
	                    this.createParentDirectories(p);
	                    return this._writable.openSync(p, flag, mode);
	                default:
	                    throw ApiError.ENOENT(p);
	            }
	        }
	    };
	    UnlockedOverlayFS.prototype.unlink = function unlink (p, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
	            return;
	        }
	        this.exists(p, function (exists) {
	            if (!exists) {
	                return cb(ApiError.ENOENT(p));
	            }
	            this$1._writable.exists(p, function (writableExists) {
	                if (writableExists) {
	                    return this$1._writable.unlink(p, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        this$1.exists(p, function (readableExists) {
	                            if (readableExists) {
	                                this$1.deletePath(p);
	                            }
	                            cb(null);
	                        });
	                    });
	                }
	                else {
	                    // if this only exists on the readable FS, add it to the
	                    // delete map.
	                    this$1.deletePath(p);
	                    cb(null);
	                }
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.unlinkSync = function unlinkSync (p) {
	        this.checkInitialized();
	        this.checkPath(p);
	        if (this.existsSync(p)) {
	            if (this._writable.existsSync(p)) {
	                this._writable.unlinkSync(p);
	            }
	            // if it still exists add to the delete log
	            if (this.existsSync(p)) {
	                this.deletePath(p);
	            }
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.rmdir = function rmdir (p, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        var rmdirLower = function () {
	            this$1.readdir(p, function (err, files) {
	                if (err) {
	                    return cb(err);
	                }
	                if (files.length) {
	                    return cb(ApiError.ENOTEMPTY(p));
	                }
	                this$1.deletePath(p);
	                cb(null);
	            });
	        };
	        this.exists(p, function (exists) {
	            if (!exists) {
	                return cb(ApiError.ENOENT(p));
	            }
	            this$1._writable.exists(p, function (writableExists) {
	                if (writableExists) {
	                    this$1._writable.rmdir(p, function (err) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        this$1._readable.exists(p, function (readableExists) {
	                            if (readableExists) {
	                                rmdirLower();
	                            }
	                            else {
	                                cb();
	                            }
	                        });
	                    });
	                }
	                else {
	                    rmdirLower();
	                }
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.rmdirSync = function rmdirSync (p) {
	        this.checkInitialized();
	        if (this.existsSync(p)) {
	            if (this._writable.existsSync(p)) {
	                this._writable.rmdirSync(p);
	            }
	            if (this.existsSync(p)) {
	                // Check if directory is empty.
	                if (this.readdirSync(p).length > 0) {
	                    throw ApiError.ENOTEMPTY(p);
	                }
	                else {
	                    this.deletePath(p);
	                }
	            }
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.mkdir = function mkdir (p, mode, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.exists(p, function (exists) {
	            if (exists) {
	                return cb(ApiError.EEXIST(p));
	            }
	            // The below will throw should any of the parent directories
	            // fail to exist on _writable.
	            this$1.createParentDirectoriesAsync(p, function (err) {
	                if (err) {
	                    return cb(err);
	                }
	                this$1._writable.mkdir(p, mode, cb);
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.mkdirSync = function mkdirSync (p, mode) {
	        this.checkInitialized();
	        if (this.existsSync(p)) {
	            throw ApiError.EEXIST(p);
	        }
	        else {
	            // The below will throw should any of the parent directories fail to exist
	            // on _writable.
	            this.createParentDirectories(p);
	            this._writable.mkdirSync(p, mode);
	        }
	    };
	    UnlockedOverlayFS.prototype.readdir = function readdir (p, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.stat(p, false, function (err, dirStats) {
	            if (err) {
	                return cb(err);
	            }
	            if (!dirStats.isDirectory()) {
	                return cb(ApiError.ENOTDIR(p));
	            }
	            this$1._writable.readdir(p, function (err, wFiles) {
	                if (err && err.code !== 'ENOENT') {
	                    return cb(err);
	                }
	                else if (err || !wFiles) {
	                    wFiles = [];
	                }
	                this$1._readable.readdir(p, function (err, rFiles) {
	                    // if the directory doesn't exist on the lower FS set rFiles
	                    // here to simplify the following code.
	                    if (err || !rFiles) {
	                        rFiles = [];
	                    }
	                    // Readdir in both, check delete log on read-only file system's files, merge, return.
	                    var seenMap = {};
	                    var filtered = wFiles.concat(rFiles.filter(function (fPath) { return !this$1._deletedFiles[(p + "/" + fPath)]; })).filter(function (fPath) {
	                        // Remove duplicates.
	                        var result = !seenMap[fPath];
	                        seenMap[fPath] = true;
	                        return result;
	                    });
	                    cb(null, filtered);
	                });
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.readdirSync = function readdirSync (p) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        var dirStats = this.statSync(p, false);
	        if (!dirStats.isDirectory()) {
	            throw ApiError.ENOTDIR(p);
	        }
	        // Readdir in both, check delete log on RO file system's listing, merge, return.
	        var contents = [];
	        try {
	            contents = contents.concat(this._writable.readdirSync(p));
	        }
	        catch (e) {
	            // NOP.
	        }
	        try {
	            contents = contents.concat(this._readable.readdirSync(p).filter(function (fPath) { return !this$1._deletedFiles[(p + "/" + fPath)]; }));
	        }
	        catch (e) {
	            // NOP.
	        }
	        var seenMap = {};
	        return contents.filter(function (fileP) {
	            var result = !seenMap[fileP];
	            seenMap[fileP] = true;
	            return result;
	        });
	    };
	    UnlockedOverlayFS.prototype.exists = function exists (p, cb) {
	        var this$1 = this;
	
	        // Cannot pass an error back to callback, so throw an exception instead
	        // if not initialized.
	        this.checkInitialized();
	        this._writable.exists(p, function (existsWritable) {
	            if (existsWritable) {
	                return cb(true);
	            }
	            this$1._readable.exists(p, function (existsReadable) {
	                cb(existsReadable && this$1._deletedFiles[p] !== true);
	            });
	        });
	    };
	    UnlockedOverlayFS.prototype.existsSync = function existsSync (p) {
	        this.checkInitialized();
	        return this._writable.existsSync(p) || (this._readable.existsSync(p) && this._deletedFiles[p] !== true);
	    };
	    UnlockedOverlayFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.operateOnWritableAsync(p, function (err) {
	            if (err) {
	                return cb(err);
	            }
	            else {
	                this$1._writable.chmod(p, isLchmod, mode, cb);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.chmodSync = function chmodSync (p, isLchmod, mode) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.operateOnWritable(p, function () {
	            this$1._writable.chmodSync(p, isLchmod, mode);
	        });
	    };
	    UnlockedOverlayFS.prototype.chown = function chown (p, isLchmod, uid, gid, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.operateOnWritableAsync(p, function (err) {
	            if (err) {
	                return cb(err);
	            }
	            else {
	                this$1._writable.chown(p, isLchmod, uid, gid, cb);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.chownSync = function chownSync (p, isLchown, uid, gid) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.operateOnWritable(p, function () {
	            this$1._writable.chownSync(p, isLchown, uid, gid);
	        });
	    };
	    UnlockedOverlayFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        var this$1 = this;
	
	        if (!this.checkInitAsync(cb)) {
	            return;
	        }
	        this.operateOnWritableAsync(p, function (err) {
	            if (err) {
	                return cb(err);
	            }
	            else {
	                this$1._writable.utimes(p, atime, mtime, cb);
	            }
	        });
	    };
	    UnlockedOverlayFS.prototype.utimesSync = function utimesSync (p, atime, mtime) {
	        var this$1 = this;
	
	        this.checkInitialized();
	        this.operateOnWritable(p, function () {
	            this$1._writable.utimesSync(p, atime, mtime);
	        });
	    };
	    UnlockedOverlayFS.prototype.deletePath = function deletePath (p) {
	        this._deletedFiles[p] = true;
	        this.updateLog(("d" + p + "\n"));
	    };
	    UnlockedOverlayFS.prototype.updateLog = function updateLog (addition) {
	        var this$1 = this;
	
	        this._deleteLog += addition;
	        if (this._deleteLogUpdatePending) {
	            this._deleteLogUpdateNeeded = true;
	        }
	        else {
	            this._deleteLogUpdatePending = true;
	            this._writable.writeFile(deletionLogPath, this._deleteLog, 'utf8', FileFlag.getFileFlag('w'), 420, function (e) {
	                this$1._deleteLogUpdatePending = false;
	                if (e) {
	                    this$1._deleteLogError = e;
	                }
	                else if (this$1._deleteLogUpdateNeeded) {
	                    this$1._deleteLogUpdateNeeded = false;
	                    this$1.updateLog('');
	                }
	            });
	        }
	    };
	    UnlockedOverlayFS.prototype._reparseDeletionLog = function _reparseDeletionLog () {
	        var this$1 = this;
	
	        this._deletedFiles = {};
	        this._deleteLog.split('\n').forEach(function (path$$1) {
	            // If the log entry begins w/ 'd', it's a deletion.
	            this$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === 'd';
	        });
	    };
	    UnlockedOverlayFS.prototype.checkInitialized = function checkInitialized () {
	        if (!this._isInitialized) {
	            throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
	        }
	        else if (this._deleteLogError !== null) {
	            var e = this._deleteLogError;
	            this._deleteLogError = null;
	            throw e;
	        }
	    };
	    UnlockedOverlayFS.prototype.checkInitAsync = function checkInitAsync (cb) {
	        if (!this._isInitialized) {
	            cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
	            return false;
	        }
	        else if (this._deleteLogError !== null) {
	            var e = this._deleteLogError;
	            this._deleteLogError = null;
	            cb(e);
	            return false;
	        }
	        return true;
	    };
	    UnlockedOverlayFS.prototype.checkPath = function checkPath (p) {
	        if (p === deletionLogPath) {
	            throw ApiError.EPERM(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.checkPathAsync = function checkPathAsync (p, cb) {
	        if (p === deletionLogPath) {
	            cb(ApiError.EPERM(p));
	            return true;
	        }
	        return false;
	    };
	    UnlockedOverlayFS.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync (p, cb) {
	        var parent = path.dirname(p);
	        var toCreate = [];
	        var self = this;
	        this._writable.stat(parent, false, statDone);
	        function statDone(err, stat) {
	            if (err) {
	                toCreate.push(parent);
	                parent = path.dirname(parent);
	                self._writable.stat(parent, false, statDone);
	            }
	            else {
	                createParents();
	            }
	        }
	        function createParents() {
	            if (!toCreate.length) {
	                return cb();
	            }
	            var dir = toCreate.pop();
	            self._readable.stat(dir, false, function (err, stats) {
	                // stop if we couldn't read the dir
	                if (!stats) {
	                    return cb();
	                }
	                self._writable.mkdir(dir, stats.mode, function (err) {
	                    if (err) {
	                        return cb(err);
	                    }
	                    createParents();
	                });
	            });
	        }
	    };
	    /**
	     * With the given path, create the needed parent directories on the writable storage
	     * should they not exist. Use modes from the read-only storage.
	     */
	    UnlockedOverlayFS.prototype.createParentDirectories = function createParentDirectories (p) {
	        var this$1 = this;
	
	        var parent = path.dirname(p), toCreate = [];
	        while (!this._writable.existsSync(parent)) {
	            toCreate.push(parent);
	            parent = path.dirname(parent);
	        }
	        toCreate = toCreate.reverse();
	        toCreate.forEach(function (p) {
	            this$1._writable.mkdirSync(p, this$1.statSync(p, false).mode);
	        });
	    };
	    /**
	     * Helper function:
	     * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.
	     * - Calls f to perform operation on writable.
	     */
	    UnlockedOverlayFS.prototype.operateOnWritable = function operateOnWritable (p, f) {
	        if (this.existsSync(p)) {
	            if (!this._writable.existsSync(p)) {
	                // File is on readable storage. Copy to writable storage before
	                // changing its mode.
	                this.copyToWritable(p);
	            }
	            f();
	        }
	        else {
	            throw ApiError.ENOENT(p);
	        }
	    };
	    UnlockedOverlayFS.prototype.operateOnWritableAsync = function operateOnWritableAsync (p, cb) {
	        var this$1 = this;
	
	        this.exists(p, function (exists) {
	            if (!exists) {
	                return cb(ApiError.ENOENT(p));
	            }
	            this$1._writable.exists(p, function (existsWritable) {
	                if (existsWritable) {
	                    cb();
	                }
	                else {
	                    return this$1.copyToWritableAsync(p, cb);
	                }
	            });
	        });
	    };
	    /**
	     * Copy from readable to writable storage.
	     * PRECONDITION: File does not exist on writable storage.
	     */
	    UnlockedOverlayFS.prototype.copyToWritable = function copyToWritable (p) {
	        var pStats = this.statSync(p, false);
	        if (pStats.isDirectory()) {
	            this._writable.mkdirSync(p, pStats.mode);
	        }
	        else {
	            this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag('r')), null, getFlag('w'), this.statSync(p, false).mode);
	        }
	    };
	    UnlockedOverlayFS.prototype.copyToWritableAsync = function copyToWritableAsync (p, cb) {
	        var this$1 = this;
	
	        this.stat(p, false, function (err, pStats) {
	            if (err) {
	                return cb(err);
	            }
	            if (pStats.isDirectory()) {
	                return this$1._writable.mkdir(p, pStats.mode, cb);
	            }
	            // need to copy file.
	            this$1._readable.readFile(p, null, getFlag('r'), function (err, data) {
	                if (err) {
	                    return cb(err);
	                }
	                this$1.writeFile(p, data, null, getFlag('w'), pStats.mode, cb);
	            });
	        });
	    };
	
	    return UnlockedOverlayFS;
	}(BaseFileSystem));
	/**
	 * OverlayFS makes a read-only filesystem writable by storing writes on a second,
	 * writable file system. Deletes are persisted via metadata stored on the writable
	 * file system.
	 */
	var OverlayFS = (function (LockedFS$$1) {
	    function OverlayFS(writable, readable, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
	        deprecationMessage(deprecateMsg, OverlayFS.Name, { readable: "readable file system", writable: "writable file system" });
	    }
	
	    if ( LockedFS$$1 ) OverlayFS.__proto__ = LockedFS$$1;
	    OverlayFS.prototype = Object.create( LockedFS$$1 && LockedFS$$1.prototype );
	    OverlayFS.prototype.constructor = OverlayFS;
	    /**
	     * Constructs and initializes an OverlayFS instance with the given options.
	     */
	    OverlayFS.Create = function Create (opts, cb) {
	        try {
	            var fs = new OverlayFS(opts.writable, opts.readable, false);
	            fs.initialize(function (e) {
	                cb(e, fs);
	            }, false);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    OverlayFS.isAvailable = function isAvailable () {
	        return UnlockedOverlayFS.isAvailable();
	    };
	    /**
	     * **Deprecated. Please use OverlayFS.Create() to construct and initialize OverlayFS instances.**
	     */
	    OverlayFS.prototype.initialize = function initialize (cb, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
	        }
	        LockedFS$$1.prototype.initialize.call(this, cb);
	    };
	    OverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems () {
	        return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
	    };
	    OverlayFS.prototype.unwrap = function unwrap () {
	        return LockedFS$$1.prototype.getFSUnlocked.call(this);
	    };
	
	    return OverlayFS;
	}(LockedFS));
	
	OverlayFS.Name = "OverlayFS";
	OverlayFS.Options = {
	    writable: {
	        type: "object",
	        description: "The file system to write modified files to."
	    },
	    readable: {
	        type: "object",
	        description: "The file system that initially populates this file system."
	    }
	};
	
	/**
	 * @hidden
	 */
	var SpecialArgType;
	(function (SpecialArgType) {
	    // Callback
	    SpecialArgType[SpecialArgType["CB"] = 0] = "CB";
	    // File descriptor
	    SpecialArgType[SpecialArgType["FD"] = 1] = "FD";
	    // API error
	    SpecialArgType[SpecialArgType["API_ERROR"] = 2] = "API_ERROR";
	    // Stats object
	    SpecialArgType[SpecialArgType["STATS"] = 3] = "STATS";
	    // Initial probe for file system information.
	    SpecialArgType[SpecialArgType["PROBE"] = 4] = "PROBE";
	    // FileFlag object.
	    SpecialArgType[SpecialArgType["FILEFLAG"] = 5] = "FILEFLAG";
	    // Buffer object.
	    SpecialArgType[SpecialArgType["BUFFER"] = 6] = "BUFFER";
	    // Generic Error object.
	    SpecialArgType[SpecialArgType["ERROR"] = 7] = "ERROR";
	})(SpecialArgType || (SpecialArgType = {}));
	/**
	 * Converts callback arguments into ICallbackArgument objects, and back
	 * again.
	 * @hidden
	 */
	var CallbackArgumentConverter = function CallbackArgumentConverter() {
	    this._callbacks = {};
	    this._nextId = 0;
	};
	CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg (cb) {
	    var id = this._nextId++;
	    this._callbacks[id] = cb;
	    return {
	        type: SpecialArgType.CB,
	        id: id
	    };
	};
	CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg (id) {
	    var cb = this._callbacks[id];
	    delete this._callbacks[id];
	    return cb;
	};
	/**
	 * @hidden
	 */
	var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter() {
	    this._fileDescriptors = {};
	    this._nextId = 0;
	};
	FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg (fd, p, flag, cb) {
	    var id = this._nextId++;
	    var data;
	    var stat;
	    this._fileDescriptors[id] = fd;
	    // Extract needed information asynchronously.
	    fd.stat(function (err, stats) {
	        if (err) {
	            cb(err);
	        }
	        else {
	            stat = bufferToTransferrableObject(stats.toBuffer());
	            // If it's a readable flag, we need to grab contents.
	            if (flag.isReadable()) {
	                fd.read(Buffer.alloc(stats.size), 0, stats.size, 0, function (err, bytesRead, buff) {
	                    if (err) {
	                        cb(err);
	                    }
	                    else {
	                        data = bufferToTransferrableObject(buff);
	                        cb(null, {
	                            type: SpecialArgType.FD,
	                            id: id,
	                            data: data,
	                            stat: stat,
	                            path: p,
	                            flag: flag.getFlagString()
	                        });
	                    }
	                });
	            }
	            else {
	                // File is not readable, which means writing to it will append or
	                // truncate/replace existing contents. Return an empty arraybuffer.
	                cb(null, {
	                    type: SpecialArgType.FD,
	                    id: id,
	                    data: new ArrayBuffer(0),
	                    stat: stat,
	                    path: p,
	                    flag: flag.getFlagString()
	                });
	            }
	        }
	    });
	};
	FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest (request, cb) {
	        var this$1 = this;
	
	    var fdArg = request.args[0];
	    this._applyFdChanges(fdArg, function (err, fd) {
	        if (err) {
	            cb(err);
	        }
	        else {
	            // Apply method on now-changed file descriptor.
	            fd[request.method](function (e) {
	                if (request.method === 'close') {
	                    delete this$1._fileDescriptors[fdArg.id];
	                }
	                cb(e);
	            });
	        }
	    });
	};
	FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges (remoteFd, cb) {
	    var fd = this._fileDescriptors[remoteFd.id], data = transferrableObjectToBuffer(remoteFd.data), remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));
	    // Write data if the file is writable.
	    var flag = FileFlag.getFileFlag(remoteFd.flag);
	    if (flag.isWriteable()) {
	        // Appendable: Write to end of file.
	        // Writeable: Replace entire contents of file.
	        fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function (e) {
	            function applyStatChanges() {
	                // Check if mode changed.
	                fd.stat(function (e, stats) {
	                    if (e) {
	                        cb(e);
	                    }
	                    else {
	                        if (stats.mode !== remoteStats.mode) {
	                            fd.chmod(remoteStats.mode, function (e) {
	                                cb(e, fd);
	                            });
	                        }
	                        else {
	                            cb(e, fd);
	                        }
	                    }
	                });
	            }
	            if (e) {
	                cb(e);
	            }
	            else {
	                // If writeable & not appendable, we need to ensure file contents are
	                // identical to those from the remote FD. Thus, we truncate to the
	                // length of the remote file.
	                if (!flag.isAppendable()) {
	                    fd.truncate(data.length, function () {
	                        applyStatChanges();
	                    });
	                }
	                else {
	                    applyStatChanges();
	                }
	            }
	        });
	    }
	    else {
	        cb(null, fd);
	    }
	};
	/**
	 * @hidden
	 */
	function apiErrorLocal2Remote(e) {
	    return {
	        type: SpecialArgType.API_ERROR,
	        errorData: bufferToTransferrableObject(e.writeToBuffer())
	    };
	}
	/**
	 * @hidden
	 */
	function apiErrorRemote2Local(e) {
	    return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
	}
	/**
	 * @hidden
	 */
	function errorLocal2Remote(e) {
	    return {
	        type: SpecialArgType.ERROR,
	        name: e.name,
	        message: e.message,
	        stack: e.stack
	    };
	}
	/**
	 * @hidden
	 */
	function errorRemote2Local(e) {
	    var cnstr = global$1[e.name];
	    if (typeof (cnstr) !== 'function') {
	        cnstr = Error;
	    }
	    var err = new cnstr(e.message);
	    err.stack = e.stack;
	    return err;
	}
	/**
	 * @hidden
	 */
	function statsLocal2Remote(stats) {
	    return {
	        type: SpecialArgType.STATS,
	        statsData: bufferToTransferrableObject(stats.toBuffer())
	    };
	}
	/**
	 * @hidden
	 */
	function statsRemote2Local(stats) {
	    return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
	}
	/**
	 * @hidden
	 */
	function fileFlagLocal2Remote(flag) {
	    return {
	        type: SpecialArgType.FILEFLAG,
	        flagStr: flag.getFlagString()
	    };
	}
	/**
	 * @hidden
	 */
	function fileFlagRemote2Local(remoteFlag) {
	    return FileFlag.getFileFlag(remoteFlag.flagStr);
	}
	/**
	 * @hidden
	 */
	function bufferToTransferrableObject(buff) {
	    return buffer2ArrayBuffer(buff);
	}
	/**
	 * @hidden
	 */
	function transferrableObjectToBuffer(buff) {
	    return arrayBuffer2Buffer(buff);
	}
	/**
	 * @hidden
	 */
	function bufferLocal2Remote(buff) {
	    return {
	        type: SpecialArgType.BUFFER,
	        data: bufferToTransferrableObject(buff)
	    };
	}
	/**
	 * @hidden
	 */
	function bufferRemote2Local(buffArg) {
	    return transferrableObjectToBuffer(buffArg.data);
	}
	/**
	 * @hidden
	 */
	function isAPIRequest(data) {
	    return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
	}
	/**
	 * @hidden
	 */
	function isAPIResponse(data) {
	    return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
	}
	/**
	 * Represents a remote file in a different worker/thread.
	 */
	var WorkerFile = (function (PreloadFile$$1) {
	    function WorkerFile(_fs, _path, _flag, _stat, remoteFdId, contents) {
	        PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
	        this._remoteFdId = remoteFdId;
	    }
	
	    if ( PreloadFile$$1 ) WorkerFile.__proto__ = PreloadFile$$1;
	    WorkerFile.prototype = Object.create( PreloadFile$$1 && PreloadFile$$1.prototype );
	    WorkerFile.prototype.constructor = WorkerFile;
	    WorkerFile.prototype.getRemoteFdId = function getRemoteFdId () {
	        return this._remoteFdId;
	    };
	    /**
	     * @hidden
	     */
	    WorkerFile.prototype.toRemoteArg = function toRemoteArg () {
	        return {
	            type: SpecialArgType.FD,
	            id: this._remoteFdId,
	            data: bufferToTransferrableObject(this.getBuffer()),
	            stat: bufferToTransferrableObject(this.getStats().toBuffer()),
	            path: this.getPath(),
	            flag: this.getFlag().getFlagString()
	        };
	    };
	    WorkerFile.prototype.sync = function sync (cb) {
	        this._syncClose('sync', cb);
	    };
	    WorkerFile.prototype.close = function close (cb) {
	        this._syncClose('close', cb);
	    };
	    WorkerFile.prototype._syncClose = function _syncClose (type, cb) {
	        var this$1 = this;
	
	        if (this.isDirty()) {
	            this._fs.syncClose(type, this, function (e) {
	                if (!e) {
	                    this$1.resetDirty();
	                }
	                cb(e);
	            });
	        }
	        else {
	            cb();
	        }
	    };
	
	    return WorkerFile;
	}(PreloadFile));
	/**
	 * WorkerFS lets you access a BrowserFS instance that is running in a different
	 * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or
	 * access BrowserFS running on the main page from a WebWorker).
	 *
	 * For example, to have a WebWorker access files in the main browser thread,
	 * do the following:
	 *
	 * MAIN BROWSER THREAD:
	 *
	 * ```javascript
	 *   // Listen for remote file system requests.
	 *   BrowserFS.FileSystem.WorkerFS.attachRemoteListener(webWorkerObject);
	 * ```
	 *
	 * WEBWORKER THREAD:
	 *
	 * ```javascript
	 *   // Set the remote file system as the root file system.
	 *   BrowserFS.configure({ fs: "WorkerFS", options: { worker: self }}, function(e) {
	 *     // Ready!
	 *   });
	 * ```
	 *
	 * Note that synchronous operations are not permitted on the WorkerFS, regardless
	 * of the configuration option of the remote FS.
	 */
	var WorkerFS = (function (BaseFileSystem$$1) {
	    function WorkerFS(worker, deprecateMsg) {
	        var this$1 = this;
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        this._callbackConverter = new CallbackArgumentConverter();
	        this._isInitialized = false;
	        this._isReadOnly = false;
	        this._supportLinks = false;
	        this._supportProps = false;
	        this._worker = worker;
	        deprecationMessage(deprecateMsg, WorkerFS.Name, { worker: "Web Worker instance" });
	        this._worker.addEventListener('message', function (e) {
	            var resp = e.data;
	            if (isAPIResponse(resp)) {
	                var i;
	                var args = resp.args;
	                var fixedArgs = new Array(args.length);
	                // Dispatch event to correct id.
	                for (i = 0; i < fixedArgs.length; i++) {
	                    fixedArgs[i] = this$1._argRemote2Local(args[i]);
	                }
	                this$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
	            }
	        });
	    }
	
	    if ( BaseFileSystem$$1 ) WorkerFS.__proto__ = BaseFileSystem$$1;
	    WorkerFS.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    WorkerFS.prototype.constructor = WorkerFS;
	    WorkerFS.Create = function Create (opts, cb) {
	        var fs = new WorkerFS(opts.worker, false);
	        fs.initialize(function () {
	            cb(null, fs);
	        });
	    };
	    WorkerFS.isAvailable = function isAvailable () {
	        return typeof (importScripts) !== 'undefined' || typeof (Worker) !== 'undefined';
	    };
	    /**
	     * Attaches a listener to the remote worker for file system requests.
	     */
	    WorkerFS.attachRemoteListener = function attachRemoteListener (worker) {
	        var fdConverter = new FileDescriptorArgumentConverter();
	        function argLocal2Remote(arg, requestArgs, cb) {
	            switch (typeof arg) {
	                case 'object':
	                    if (arg instanceof Stats) {
	                        cb(null, statsLocal2Remote(arg));
	                    }
	                    else if (arg instanceof ApiError) {
	                        cb(null, apiErrorLocal2Remote(arg));
	                    }
	                    else if (arg instanceof BaseFile) {
	                        // Pass in p and flags from original request.
	                        cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
	                    }
	                    else if (arg instanceof FileFlag) {
	                        cb(null, fileFlagLocal2Remote(arg));
	                    }
	                    else if (arg instanceof Buffer) {
	                        cb(null, bufferLocal2Remote(arg));
	                    }
	                    else if (arg instanceof Error) {
	                        cb(null, errorLocal2Remote(arg));
	                    }
	                    else {
	                        cb(null, arg);
	                    }
	                    break;
	                default:
	                    cb(null, arg);
	                    break;
	            }
	        }
	        function argRemote2Local(arg, fixedRequestArgs) {
	            if (!arg) {
	                return arg;
	            }
	            switch (typeof arg) {
	                case 'object':
	                    if (typeof arg['type'] === 'number') {
	                        var specialArg = arg;
	                        switch (specialArg.type) {
	                            case SpecialArgType.CB:
	                                var cbId = arg.id;
	                                return function () {
	                                    var arguments$1 = arguments;
	
	                                    var i;
	                                    var fixedArgs = new Array(arguments.length);
	                                    var message, countdown = arguments.length;
	                                    function abortAndSendError(err) {
	                                        if (countdown > 0) {
	                                            countdown = -1;
	                                            message = {
	                                                browserfsMessage: true,
	                                                cbId: cbId,
	                                                args: [apiErrorLocal2Remote(err)]
	                                            };
	                                            worker.postMessage(message);
	                                        }
	                                    }
	                                    for (i = 0; i < arguments.length; i++) {
	                                        // Capture i and argument.
	                                        (function (i, arg) {
	                                            argLocal2Remote(arg, fixedRequestArgs, function (err, fixedArg) {
	                                                fixedArgs[i] = fixedArg;
	                                                if (err) {
	                                                    abortAndSendError(err);
	                                                }
	                                                else if (--countdown === 0) {
	                                                    message = {
	                                                        browserfsMessage: true,
	                                                        cbId: cbId,
	                                                        args: fixedArgs
	                                                    };
	                                                    worker.postMessage(message);
	                                                }
	                                            });
	                                        })(i, arguments$1[i]);
	                                    }
	                                    if (arguments.length === 0) {
	                                        message = {
	                                            browserfsMessage: true,
	                                            cbId: cbId,
	                                            args: fixedArgs
	                                        };
	                                        worker.postMessage(message);
	                                    }
	                                };
	                            case SpecialArgType.API_ERROR:
	                                return apiErrorRemote2Local(specialArg);
	                            case SpecialArgType.STATS:
	                                return statsRemote2Local(specialArg);
	                            case SpecialArgType.FILEFLAG:
	                                return fileFlagRemote2Local(specialArg);
	                            case SpecialArgType.BUFFER:
	                                return bufferRemote2Local(specialArg);
	                            case SpecialArgType.ERROR:
	                                return errorRemote2Local(specialArg);
	                            default:
	                                // No idea what this is.
	                                return arg;
	                        }
	                    }
	                    else {
	                        return arg;
	                    }
	                default:
	                    return arg;
	            }
	        }
	        worker.addEventListener('message', function (e) {
	            var request = e.data;
	            if (isAPIRequest(request)) {
	                var args = request.args, fixedArgs = new Array(args.length);
	                switch (request.method) {
	                    case 'close':
	                    case 'sync':
	                        (function () {
	                            // File descriptor-relative methods.
	                            var remoteCb = args[1];
	                            fdConverter.applyFdAPIRequest(request, function (err) {
	                                // Send response.
	                                var response = {
	                                    browserfsMessage: true,
	                                    cbId: remoteCb.id,
	                                    args: err ? [apiErrorLocal2Remote(err)] : []
	                                };
	                                worker.postMessage(response);
	                            });
	                        })();
	                        break;
	                    case 'probe':
	                        (function () {
	                            var rootFs = _fsMock.getRootFS(), remoteCb = args[1], probeResponse = {
	                                type: SpecialArgType.PROBE,
	                                isReadOnly: rootFs.isReadOnly(),
	                                supportsLinks: rootFs.supportsLinks(),
	                                supportsProps: rootFs.supportsProps()
	                            }, response = {
	                                browserfsMessage: true,
	                                cbId: remoteCb.id,
	                                args: [probeResponse]
	                            };
	                            worker.postMessage(response);
	                        })();
	                        break;
	                    default:
	                        // File system methods.
	                        for (var i = 0; i < args.length; i++) {
	                            fixedArgs[i] = argRemote2Local(args[i], fixedArgs);
	                        }
	                        var rootFS = _fsMock.getRootFS();
	                        rootFS[request.method].apply(rootFS, fixedArgs);
	                        break;
	                }
	            }
	        });
	    };
	    WorkerFS.prototype.getName = function getName () {
	        return WorkerFS.Name;
	    };
	    /**
	     * **Deprecated. Please use WorkerFS.Create() method to construct and initialize WorkerFS instances.**
	     *
	     * Called once both local and remote sides are set up.
	     */
	    WorkerFS.prototype.initialize = function initialize (cb) {
	        var this$1 = this;
	
	        if (!this._isInitialized) {
	            var message = {
	                browserfsMessage: true,
	                method: 'probe',
	                args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function (probeResponse) {
	                        this$1._isInitialized = true;
	                        this$1._isReadOnly = probeResponse.isReadOnly;
	                        this$1._supportLinks = probeResponse.supportsLinks;
	                        this$1._supportProps = probeResponse.supportsProps;
	                        cb();
	                    })]
	            };
	            this._worker.postMessage(message);
	        }
	        else {
	            cb();
	        }
	    };
	    WorkerFS.prototype.isReadOnly = function isReadOnly () { return this._isReadOnly; };
	    WorkerFS.prototype.supportsSynch = function supportsSynch () { return false; };
	    WorkerFS.prototype.supportsLinks = function supportsLinks () { return this._supportLinks; };
	    WorkerFS.prototype.supportsProps = function supportsProps () { return this._supportProps; };
	    WorkerFS.prototype.rename = function rename (oldPath, newPath, cb) {
	        this._rpc('rename', arguments);
	    };
	    WorkerFS.prototype.stat = function stat (p, isLstat, cb) {
	        this._rpc('stat', arguments);
	    };
	    WorkerFS.prototype.open = function open (p, flag, mode, cb) {
	        this._rpc('open', arguments);
	    };
	    WorkerFS.prototype.unlink = function unlink (p, cb) {
	        this._rpc('unlink', arguments);
	    };
	    WorkerFS.prototype.rmdir = function rmdir (p, cb) {
	        this._rpc('rmdir', arguments);
	    };
	    WorkerFS.prototype.mkdir = function mkdir (p, mode, cb) {
	        this._rpc('mkdir', arguments);
	    };
	    WorkerFS.prototype.readdir = function readdir (p, cb) {
	        this._rpc('readdir', arguments);
	    };
	    WorkerFS.prototype.exists = function exists (p, cb) {
	        this._rpc('exists', arguments);
	    };
	    WorkerFS.prototype.realpath = function realpath (p, cache, cb) {
	        this._rpc('realpath', arguments);
	    };
	    WorkerFS.prototype.truncate = function truncate (p, len, cb) {
	        this._rpc('truncate', arguments);
	    };
	    WorkerFS.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	        this._rpc('readFile', arguments);
	    };
	    WorkerFS.prototype.writeFile = function writeFile (fname, data, encoding, flag, mode, cb) {
	        this._rpc('writeFile', arguments);
	    };
	    WorkerFS.prototype.appendFile = function appendFile (fname, data, encoding, flag, mode, cb) {
	        this._rpc('appendFile', arguments);
	    };
	    WorkerFS.prototype.chmod = function chmod (p, isLchmod, mode, cb) {
	        this._rpc('chmod', arguments);
	    };
	    WorkerFS.prototype.chown = function chown (p, isLchown, uid, gid, cb) {
	        this._rpc('chown', arguments);
	    };
	    WorkerFS.prototype.utimes = function utimes (p, atime, mtime, cb) {
	        this._rpc('utimes', arguments);
	    };
	    WorkerFS.prototype.link = function link (srcpath, dstpath, cb) {
	        this._rpc('link', arguments);
	    };
	    WorkerFS.prototype.symlink = function symlink (srcpath, dstpath, type, cb) {
	        this._rpc('symlink', arguments);
	    };
	    WorkerFS.prototype.readlink = function readlink (p, cb) {
	        this._rpc('readlink', arguments);
	    };
	    WorkerFS.prototype.syncClose = function syncClose (method, fd, cb) {
	        this._worker.postMessage({
	            browserfsMessage: true,
	            method: method,
	            args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
	        });
	    };
	    WorkerFS.prototype._argRemote2Local = function _argRemote2Local (arg) {
	        if (!arg) {
	            return arg;
	        }
	        switch (typeof arg) {
	            case 'object':
	                if (typeof arg['type'] === 'number') {
	                    var specialArg = arg;
	                    switch (specialArg.type) {
	                        case SpecialArgType.API_ERROR:
	                            return apiErrorRemote2Local(specialArg);
	                        case SpecialArgType.FD:
	                            var fdArg = specialArg;
	                            return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));
	                        case SpecialArgType.STATS:
	                            return statsRemote2Local(specialArg);
	                        case SpecialArgType.FILEFLAG:
	                            return fileFlagRemote2Local(specialArg);
	                        case SpecialArgType.BUFFER:
	                            return bufferRemote2Local(specialArg);
	                        case SpecialArgType.ERROR:
	                            return errorRemote2Local(specialArg);
	                        default:
	                            return arg;
	                    }
	                }
	                else {
	                    return arg;
	                }
	            default:
	                return arg;
	        }
	    };
	    WorkerFS.prototype._rpc = function _rpc (methodName, args) {
	        var this$1 = this;
	
	        var fixedArgs = new Array(args.length);
	        for (var i = 0; i < args.length; i++) {
	            fixedArgs[i] = this$1._argLocal2Remote(args[i]);
	        }
	        var message = {
	            browserfsMessage: true,
	            method: methodName,
	            args: fixedArgs
	        };
	        this._worker.postMessage(message);
	    };
	    /**
	     * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.
	     */
	    WorkerFS.prototype._argLocal2Remote = function _argLocal2Remote (arg) {
	        if (!arg) {
	            return arg;
	        }
	        switch (typeof arg) {
	            case "object":
	                if (arg instanceof Stats) {
	                    return statsLocal2Remote(arg);
	                }
	                else if (arg instanceof ApiError) {
	                    return apiErrorLocal2Remote(arg);
	                }
	                else if (arg instanceof WorkerFile) {
	                    return arg.toRemoteArg();
	                }
	                else if (arg instanceof FileFlag) {
	                    return fileFlagLocal2Remote(arg);
	                }
	                else if (arg instanceof Buffer) {
	                    return bufferLocal2Remote(arg);
	                }
	                else if (arg instanceof Error) {
	                    return errorLocal2Remote(arg);
	                }
	                else {
	                    return "Unknown argument";
	                }
	            case "function":
	                return this._callbackConverter.toRemoteArg(arg);
	            default:
	                return arg;
	        }
	    };
	
	    return WorkerFS;
	}(BaseFileSystem));
	
	WorkerFS.Name = "WorkerFS";
	WorkerFS.Options = {
	    worker: {
	        type: "object",
	        description: "The target worker that you want to connect to, or the current worker if in a worker context.",
	        validator: function (v, cb) {
	            // Check for a `postMessage` function.
	            if (v['postMessage']) {
	                cb();
	            }
	            else {
	                cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
	            }
	        }
	    }
	};
	
	/**
	 * Contains utility methods for performing a variety of tasks with
	 * XmlHttpRequest across browsers.
	 */
	function asyncDownloadFileModern(p, type, cb) {
	    var req = new XMLHttpRequest();
	    req.open('GET', p, true);
	    var jsonSupported = true;
	    switch (type) {
	        case 'buffer':
	            req.responseType = 'arraybuffer';
	            break;
	        case 'json':
	            // Some browsers don't support the JSON response type.
	            // They either reset responseType, or throw an exception.
	            // @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js
	            try {
	                req.responseType = 'json';
	                jsonSupported = req.responseType === 'json';
	            }
	            catch (e) {
	                jsonSupported = false;
	            }
	            break;
	        default:
	            return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
	    }
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                switch (type) {
	                    case 'buffer':
	                        // XXX: WebKit-based browsers return *null* when XHRing an empty file.
	                        return cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());
	                    case 'json':
	                        if (jsonSupported) {
	                            return cb(null, req.response);
	                        }
	                        else {
	                            return cb(null, JSON.parse(req.responseText));
	                        }
	                }
	            }
	            else {
	                return cb(new ApiError(req.status, "XHR error."));
	            }
	        }
	    };
	    req.send();
	}
	function syncDownloadFileModern(p, type) {
	    var req = new XMLHttpRequest();
	    req.open('GET', p, false);
	    // On most platforms, we cannot set the responseType of synchronous downloads.
	    // @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.
	    var data = null;
	    var err = null;
	    // Classic hack to download binary data as a string.
	    req.overrideMimeType('text/plain; charset=x-user-defined');
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                switch (type) {
	                    case 'buffer':
	                        // Convert the text into a buffer.
	                        var text = req.responseText;
	                        data = Buffer.alloc(text.length);
	                        // Throw away the upper bits of each character.
	                        for (var i = 0; i < text.length; i++) {
	                            // This will automatically throw away the upper bit of each
	                            // character for us.
	                            data[i] = text.charCodeAt(i);
	                        }
	                        return;
	                    case 'json':
	                        data = JSON.parse(req.responseText);
	                        return;
	                }
	            }
	            else {
	                err = new ApiError(req.status, "XHR error.");
	                return;
	            }
	        }
	    };
	    req.send();
	    if (err) {
	        throw err;
	    }
	    return data;
	}
	function syncDownloadFileIE10(p, type) {
	    var req = new XMLHttpRequest();
	    req.open('GET', p, false);
	    switch (type) {
	        case 'buffer':
	            req.responseType = 'arraybuffer';
	            break;
	        case 'json':
	            // IE10 does not support the JSON type.
	            break;
	        default:
	            throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
	    }
	    var data;
	    var err;
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                switch (type) {
	                    case 'buffer':
	                        data = Buffer.from(req.response);
	                        break;
	                    case 'json':
	                        data = JSON.parse(req.response);
	                        break;
	                }
	            }
	            else {
	                err = new ApiError(req.status, "XHR error.");
	            }
	        }
	    };
	    req.send();
	    if (err) {
	        throw err;
	    }
	    return data;
	}
	/**
	 * @hidden
	 */
	function getFileSize(async, p, cb) {
	    var req = new XMLHttpRequest();
	    req.open('HEAD', p, async);
	    req.onreadystatechange = function (e) {
	        if (req.readyState === 4) {
	            if (req.status === 200) {
	                try {
	                    return cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));
	                }
	                catch (e) {
	                    // In the event that the header isn't present or there is an error...
	                    return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
	                }
	            }
	            else {
	                return cb(new ApiError(req.status, "XHR HEAD error."));
	            }
	        }
	    };
	    req.send();
	}
	/**
	 * Asynchronously download a file as a buffer or a JSON object.
	 * Note that the third function signature with a non-specialized type is
	 * invalid, but TypeScript requires it when you specialize string arguments to
	 * constants.
	 * @hidden
	 */
	var asyncDownloadFile = asyncDownloadFileModern;
	/**
	 * Synchronously download a file as a buffer or a JSON object.
	 * Note that the third function signature with a non-specialized type is
	 * invalid, but TypeScript requires it when you specialize string arguments to
	 * constants.
	 * @hidden
	 */
	var syncDownloadFile = (isIE && typeof Blob !== 'undefined') ? syncDownloadFileIE10 : syncDownloadFileModern;
	/**
	 * Synchronously retrieves the size of the given file in bytes.
	 * @hidden
	 */
	function getFileSizeSync(p) {
	    var rv = -1;
	    getFileSize(false, p, function (err, size) {
	        if (err) {
	            throw err;
	        }
	        rv = size;
	    });
	    return rv;
	}
	/**
	 * Asynchronously retrieves the size of the given file in bytes.
	 * @hidden
	 */
	function getFileSizeAsync(p, cb) {
	    getFileSize(true, p, cb);
	}
	
	/**
	 * A simple class for storing a filesystem index. Assumes that all paths passed
	 * to it are *absolute* paths.
	 *
	 * Can be used as a partial or a full index, although care must be taken if used
	 * for the former purpose, especially when directories are concerned.
	 */
	var FileIndex = function FileIndex() {
	    // _index is a single-level key,value store that maps *directory* paths to
	    // DirInodes. File information is only contained in DirInodes themselves.
	    this._index = {};
	    // Create the root directory.
	    this.addPath('/', new DirInode());
	};
	/**
	 * Static method for constructing indices from a JSON listing.
	 * @param listing Directory listing generated by tools/XHRIndexer.coffee
	 * @return A new FileIndex object.
	 */
	FileIndex.fromListing = function fromListing (listing) {
	    var idx = new FileIndex();
	    // Add a root DirNode.
	    var rootInode = new DirInode();
	    idx._index['/'] = rootInode;
	    var queue = [['', listing, rootInode]];
	    while (queue.length > 0) {
	        var inode = (void 0);
	        var next = queue.pop();
	        var pwd = next[0];
	        var tree = next[1];
	        var parent = next[2];
	        for (var node in tree) {
	            if (tree.hasOwnProperty(node)) {
	                var children = tree[node];
	                var name = pwd + "/" + node;
	                if (children) {
	                    idx._index[name] = inode = new DirInode();
	                    queue.push([name, children, inode]);
	                }
	                else {
	                    // This inode doesn't have correct size information, noted with -1.
	                    inode = new FileInode(new Stats(FileType.FILE, -1, 0x16D));
	                }
	                if (parent) {
	                    parent._ls[node] = inode;
	                }
	            }
	        }
	    }
	    return idx;
	};
	/**
	 * Runs the given function over all files in the index.
	 */
	FileIndex.prototype.fileIterator = function fileIterator (cb) {
	        var this$1 = this;
	
	    for (var path$$1 in this$1._index) {
	        if (this$1._index.hasOwnProperty(path$$1)) {
	            var dir = this$1._index[path$$1];
	            var files = dir.getListing();
	            for (var i = 0, list = files; i < list.length; i += 1) {
	                var file = list[i];
	
	                    var item = dir.getItem(file);
	                if (isFileInode(item)) {
	                    cb(item.getData());
	                }
	            }
	        }
	    }
	};
	/**
	 * Adds the given absolute path to the index if it is not already in the index.
	 * Creates any needed parent directories.
	 * @param path The path to add to the index.
	 * @param inode The inode for the
	 *   path to add.
	 * @return 'True' if it was added or already exists, 'false' if there
	 *   was an issue adding it (e.g. item in path is a file, item exists but is
	 *   different).
	 * @todo If adding fails and implicitly creates directories, we do not clean up
	 *   the new empty directories.
	 */
	FileIndex.prototype.addPath = function addPath (path$$1, inode) {
	    if (!inode) {
	        throw new Error('Inode must be specified');
	    }
	    if (path$$1[0] !== '/') {
	        throw new Error('Path must be absolute, got: ' + path$$1);
	    }
	    // Check if it already exists.
	    if (this._index.hasOwnProperty(path$$1)) {
	        return this._index[path$$1] === inode;
	    }
	    var splitPath = this._split_path(path$$1);
	    var dirpath = splitPath[0];
	    var itemname = splitPath[1];
	    // Try to add to its parent directory first.
	    var parent = this._index[dirpath];
	    if (parent === undefined && path$$1 !== '/') {
	        // Create parent.
	        parent = new DirInode();
	        if (!this.addPath(dirpath, parent)) {
	            return false;
	        }
	    }
	    // Add myself to my parent.
	    if (path$$1 !== '/') {
	        if (!parent.addItem(itemname, inode)) {
	            return false;
	        }
	    }
	    // If I'm a directory, add myself to the index.
	    if (isDirInode(inode)) {
	        this._index[path$$1] = inode;
	    }
	    return true;
	};
	/**
	 * Adds the given absolute path to the index if it is not already in the index.
	 * The path is added without special treatment (no joining of adjacent separators, etc).
	 * Creates any needed parent directories.
	 * @param path The path to add to the index.
	 * @param inode The inode for the
	 *   path to add.
	 * @return 'True' if it was added or already exists, 'false' if there
	 *   was an issue adding it (e.g. item in path is a file, item exists but is
	 *   different).
	 * @todo If adding fails and implicitly creates directories, we do not clean up
	 *   the new empty directories.
	 */
	FileIndex.prototype.addPathFast = function addPathFast (path$$1, inode) {
	    var itemNameMark = path$$1.lastIndexOf('/');
	    var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
	    var itemName = path$$1.substring(itemNameMark + 1);
	    // Try to add to its parent directory first.
	    var parent = this._index[parentPath];
	    if (parent === undefined) {
	        // Create parent.
	        parent = new DirInode();
	        this.addPathFast(parentPath, parent);
	    }
	    if (!parent.addItem(itemName, inode)) {
	        return false;
	    }
	    // If adding a directory, add to the index as well.
	    if (inode.isDir()) {
	        this._index[path$$1] = inode;
	    }
	    return true;
	};
	/**
	 * Removes the given path. Can be a file or a directory.
	 * @return The removed item,
	 *   or null if it did not exist.
	 */
	FileIndex.prototype.removePath = function removePath (path$$1) {
	        var this$1 = this;
	
	    var splitPath = this._split_path(path$$1);
	    var dirpath = splitPath[0];
	    var itemname = splitPath[1];
	    // Try to remove it from its parent directory first.
	    var parent = this._index[dirpath];
	    if (parent === undefined) {
	        return null;
	    }
	    // Remove myself from my parent.
	    var inode = parent.remItem(itemname);
	    if (inode === null) {
	        return null;
	    }
	    // If I'm a directory, remove myself from the index, and remove my children.
	    if (isDirInode(inode)) {
	        var children = inode.getListing();
	        for (var i = 0, list = children; i < list.length; i += 1) {
	            var child = list[i];
	
	                this$1.removePath(path$$1 + '/' + child);
	        }
	        // Remove the directory from the index, unless it's the root.
	        if (path$$1 !== '/') {
	            delete this._index[path$$1];
	        }
	    }
	    return inode;
	};
	/**
	 * Retrieves the directory listing of the given path.
	 * @return An array of files in the given path, or 'null' if it does not exist.
	 */
	FileIndex.prototype.ls = function ls (path$$1) {
	    var item = this._index[path$$1];
	    if (item === undefined) {
	        return null;
	    }
	    return item.getListing();
	};
	/**
	 * Returns the inode of the given item.
	 * @return Returns null if the item does not exist.
	 */
	FileIndex.prototype.getInode = function getInode (path$$1) {
	    var splitPath = this._split_path(path$$1);
	    var dirpath = splitPath[0];
	    var itemname = splitPath[1];
	    // Retrieve from its parent directory.
	    var parent = this._index[dirpath];
	    if (parent === undefined) {
	        return null;
	    }
	    // Root case
	    if (dirpath === path$$1) {
	        return parent;
	    }
	    return parent.getItem(itemname);
	};
	/**
	 * Split into a (directory path, item name) pair
	 */
	FileIndex.prototype._split_path = function _split_path (p) {
	    var dirpath = path.dirname(p);
	    var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
	    return [dirpath, itemname];
	};
	/**
	 * Inode for a file. Stores an arbitrary (filesystem-specific) data payload.
	 */
	var FileInode = function FileInode(data) {
	    this.data = data;
	};
	FileInode.prototype.isFile = function isFile () { return true; };
	FileInode.prototype.isDir = function isDir () { return false; };
	FileInode.prototype.getData = function getData () { return this.data; };
	FileInode.prototype.setData = function setData (data) { this.data = data; };
	/**
	 * Inode for a directory. Currently only contains the directory listing.
	 */
	var DirInode = function DirInode(data) {
	    if ( data === void 0 ) data = null;
	
	    this.data = data;
	    this._ls = {};
	};
	DirInode.prototype.isFile = function isFile () {
	    return false;
	};
	DirInode.prototype.isDir = function isDir () {
	    return true;
	};
	DirInode.prototype.getData = function getData () { return this.data; };
	/**
	 * Return a Stats object for this inode.
	 * @todo Should probably remove this at some point. This isn't the
	 *   responsibility of the FileIndex.
	 */
	DirInode.prototype.getStats = function getStats () {
	    return new Stats(FileType.DIRECTORY, 4096, 0x16D);
	};
	/**
	 * Returns the directory listing for this directory. Paths in the directory are
	 * relative to the directory's path.
	 * @return The directory listing for this directory.
	 */
	DirInode.prototype.getListing = function getListing () {
	    return Object.keys(this._ls);
	};
	/**
	 * Returns the inode for the indicated item, or null if it does not exist.
	 * @param p Name of item in this directory.
	 */
	DirInode.prototype.getItem = function getItem (p) {
	    var item = this._ls[p];
	    return item ? item : null;
	};
	/**
	 * Add the given item to the directory listing. Note that the given inode is
	 * not copied, and will be mutated by the DirInode if it is a DirInode.
	 * @param p Item name to add to the directory listing.
	 * @param inode The inode for the
	 *   item to add to the directory inode.
	 * @return True if it was added, false if it already existed.
	 */
	DirInode.prototype.addItem = function addItem (p, inode) {
	    if (p in this._ls) {
	        return false;
	    }
	    this._ls[p] = inode;
	    return true;
	};
	/**
	 * Removes the given item from the directory listing.
	 * @param p Name of item to remove from the directory listing.
	 * @return Returns the item
	 *   removed, or null if the item did not exist.
	 */
	DirInode.prototype.remItem = function remItem (p) {
	    var item = this._ls[p];
	    if (item === undefined) {
	        return null;
	    }
	    delete this._ls[p];
	    return item;
	};
	/**
	 * @hidden
	 */
	function isFileInode(inode) {
	    return !!inode && inode.isFile();
	}
	/**
	 * @hidden
	 */
	function isDirInode(inode) {
	    return !!inode && inode.isDir();
	}
	
	/**
	 * Try to convert the given buffer into a string, and pass it to the callback.
	 * Optimization that removes the needed try/catch into a helper function, as
	 * this is an uncommon case.
	 * @hidden
	 */
	function tryToString(buff, encoding, cb) {
	    try {
	        cb(null, buff.toString(encoding));
	    }
	    catch (e) {
	        cb(e);
	    }
	}
	/**
	 * A simple filesystem backed by XMLHttpRequests. You must create a directory listing using the
	 * `make_xhrfs_index` tool provided by BrowserFS.
	 *
	 * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by
	 * running `make_xhrfs_index` in your terminal in the directory you would like to index:
	 *
	 * ```
	 * make_xhrfs_index > index.json
	 * ```
	 *
	 * Listings objects look like the following:
	 *
	 * ```json
	 * {
	 *   "home": {
	 *     "jvilk": {
	 *       "someFile.txt": null,
	 *       "someDir": {
	 *         // Empty directory
	 *       }
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*
	 */
	var XmlHttpRequest = (function (BaseFileSystem$$1) {
	    function XmlHttpRequest(listingUrlOrObj, prefixUrl, deprecateMsg) {
	        if ( prefixUrl === void 0 ) prefixUrl = '';
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        BaseFileSystem$$1.call(this);
	        if (!listingUrlOrObj) {
	            listingUrlOrObj = 'index.json';
	        }
	        // prefix_url must end in a directory separator.
	        if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {
	            prefixUrl = prefixUrl + '/';
	        }
	        this.prefixUrl = prefixUrl;
	        var listing = null;
	        if (typeof (listingUrlOrObj) === "string") {
	            listing = this._requestFileSync(listingUrlOrObj, 'json');
	            if (!listing) {
	                throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
	            }
	        }
	        else {
	            listing = listingUrlOrObj;
	        }
	        deprecationMessage(deprecateMsg, XmlHttpRequest.Name, { index: typeof (listingUrlOrObj) === "string" ? listingUrlOrObj : "file index as an object", baseUrl: prefixUrl });
	        this._index = FileIndex.fromListing(listing);
	    }
	
	    if ( BaseFileSystem$$1 ) XmlHttpRequest.__proto__ = BaseFileSystem$$1;
	    XmlHttpRequest.prototype = Object.create( BaseFileSystem$$1 && BaseFileSystem$$1.prototype );
	    XmlHttpRequest.prototype.constructor = XmlHttpRequest;
	    /**
	     * Construct an XmlHttpRequest file system backend with the given options.
	     */
	    XmlHttpRequest.Create = function Create (opts, cb) {
	        if (opts.index === undefined) {
	            opts.index = "index.json";
	        }
	        if (typeof (opts.index) === "string") {
	            XmlHttpRequest.FromURL(opts.index, cb, opts.baseUrl, false);
	        }
	        else {
	            cb(null, new XmlHttpRequest(opts.index, opts.baseUrl, false));
	        }
	    };
	    XmlHttpRequest.isAvailable = function isAvailable () {
	        return typeof (XMLHttpRequest) !== "undefined" && XMLHttpRequest !== null;
	    };
	    /**
	     * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
	     *
	     * Constructs an XmlHttpRequest object using the directory listing at the given URL.
	     * Uses the base URL as the URL prefix for fetched files.
	     * @param cb Called when the file system has been instantiated, or if an error occurs.
	     */
	    XmlHttpRequest.FromURL = function FromURL (url, cb, baseUrl, deprecateMsg) {
	        if ( baseUrl === void 0 ) baseUrl = url.slice(0, url.lastIndexOf('/') + 1);
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        if (deprecateMsg) {
	            console.warn(("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \"" + url + "\", baseUrl: \"" + baseUrl + "\" }, cb)' instead."));
	        }
	        asyncDownloadFile(url, "json", function (e, data) {
	            if (e) {
	                cb(e);
	            }
	            else {
	                cb(null, new XmlHttpRequest(data, baseUrl, false));
	            }
	        });
	    };
	    XmlHttpRequest.prototype.empty = function empty () {
	        this._index.fileIterator(function (file) {
	            file.fileData = null;
	        });
	    };
	    XmlHttpRequest.prototype.getName = function getName () {
	        return XmlHttpRequest.Name;
	    };
	    XmlHttpRequest.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        // Read-only file system. We could calculate the total space, but that's not
	        // important right now.
	        cb(0, 0);
	    };
	    XmlHttpRequest.prototype.isReadOnly = function isReadOnly () {
	        return true;
	    };
	    XmlHttpRequest.prototype.supportsLinks = function supportsLinks () {
	        return false;
	    };
	    XmlHttpRequest.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    XmlHttpRequest.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    /**
	     * Special XHR function: Preload the given file into the index.
	     * @param [String] path
	     * @param [BrowserFS.Buffer] buffer
	     */
	    XmlHttpRequest.prototype.preloadFile = function preloadFile (path$$1, buffer$$1) {
	        var inode = this._index.getInode(path$$1);
	        if (isFileInode(inode)) {
	            if (inode === null) {
	                throw ApiError.ENOENT(path$$1);
	            }
	            var stats = inode.getData();
	            stats.size = buffer$$1.length;
	            stats.fileData = buffer$$1;
	        }
	        else {
	            throw ApiError.EISDIR(path$$1);
	        }
	    };
	    XmlHttpRequest.prototype.stat = function stat (path$$1, isLstat, cb) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            return cb(ApiError.ENOENT(path$$1));
	        }
	        var stats;
	        if (isFileInode(inode)) {
	            stats = inode.getData();
	            // At this point, a non-opened file will still have default stats from the listing.
	            if (stats.size < 0) {
	                this._requestFileSizeAsync(path$$1, function (e, size) {
	                    if (e) {
	                        return cb(e);
	                    }
	                    stats.size = size;
	                    cb(null, stats.clone());
	                });
	            }
	            else {
	                cb(null, stats.clone());
	            }
	        }
	        else if (isDirInode(inode)) {
	            stats = inode.getStats();
	            cb(null, stats);
	        }
	        else {
	            cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
	        }
	    };
	    XmlHttpRequest.prototype.statSync = function statSync (path$$1, isLstat) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        var stats;
	        if (isFileInode(inode)) {
	            stats = inode.getData();
	            // At this point, a non-opened file will still have default stats from the listing.
	            if (stats.size < 0) {
	                stats.size = this._requestFileSizeSync(path$$1);
	            }
	        }
	        else if (isDirInode(inode)) {
	            stats = inode.getStats();
	        }
	        else {
	            throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
	        }
	        return stats;
	    };
	    XmlHttpRequest.prototype.open = function open (path$$1, flags, mode, cb) {
	        // INVARIANT: You can't write to files on this file system.
	        if (flags.isWriteable()) {
	            return cb(new ApiError(ErrorCode.EPERM, path$$1));
	        }
	        var self = this;
	        // Check if the path exists, and is a file.
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            return cb(ApiError.ENOENT(path$$1));
	        }
	        if (isFileInode(inode)) {
	            var stats = inode.getData();
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    return cb(ApiError.EEXIST(path$$1));
	                case ActionType.NOP:
	                    // Use existing file contents.
	                    // XXX: Uh, this maintains the previously-used flag.
	                    if (stats.fileData) {
	                        return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), stats.fileData));
	                    }
	                    // @todo be lazier about actually requesting the file
	                    this._requestFileAsync(path$$1, 'buffer', function (err, buffer$$1) {
	                        if (err) {
	                            return cb(err);
	                        }
	                        // we don't initially have file sizes
	                        stats.size = buffer$$1.length;
	                        stats.fileData = buffer$$1;
	                        return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), buffer$$1));
	                    });
	                    break;
	                default:
	                    return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));
	            }
	        }
	        else {
	            return cb(ApiError.EISDIR(path$$1));
	        }
	    };
	    XmlHttpRequest.prototype.openSync = function openSync (path$$1, flags, mode) {
	        // INVARIANT: You can't write to files on this file system.
	        if (flags.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, path$$1);
	        }
	        // Check if the path exists, and is a file.
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        if (isFileInode(inode)) {
	            var stats = inode.getData();
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    throw ApiError.EEXIST(path$$1);
	                case ActionType.NOP:
	                    // Use existing file contents.
	                    // XXX: Uh, this maintains the previously-used flag.
	                    if (stats.fileData) {
	                        return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
	                    }
	                    // @todo be lazier about actually requesting the file
	                    var buffer$$1 = this._requestFileSync(path$$1, 'buffer');
	                    // we don't initially have file sizes
	                    stats.size = buffer$$1.length;
	                    stats.fileData = buffer$$1;
	                    return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);
	                default:
	                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
	            }
	        }
	        else {
	            throw ApiError.EISDIR(path$$1);
	        }
	    };
	    XmlHttpRequest.prototype.readdir = function readdir (path$$1, cb) {
	        try {
	            cb(null, this.readdirSync(path$$1));
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    XmlHttpRequest.prototype.readdirSync = function readdirSync (path$$1) {
	        // Check if it exists.
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (isDirInode(inode)) {
	            return inode.getListing();
	        }
	        else {
	            throw ApiError.ENOTDIR(path$$1);
	        }
	    };
	    /**
	     * We have the entire file as a buffer; optimize readFile.
	     */
	    XmlHttpRequest.prototype.readFile = function readFile (fname, encoding, flag, cb) {
	        // Wrap cb in file closing code.
	        var oldCb = cb;
	        // Get file.
	        this.open(fname, flag, 0x1a4, function (err, fd) {
	            if (err) {
	                return cb(err);
	            }
	            cb = function (err, arg) {
	                fd.close(function (err2) {
	                    if (!err) {
	                        err = err2;
	                    }
	                    return oldCb(err, arg);
	                });
	            };
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                cb(err, copyingSlice(fdBuff));
	            }
	            else {
	                tryToString(fdBuff, encoding, cb);
	            }
	        });
	    };
	    /**
	     * Specially-optimized readfile.
	     */
	    XmlHttpRequest.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	        // Get file.
	        var fd = this.openSync(fname, flag, 0x1a4);
	        try {
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                return copyingSlice(fdBuff);
	            }
	            return fdBuff.toString(encoding);
	        }
	        finally {
	            fd.closeSync();
	        }
	    };
	    XmlHttpRequest.prototype.getXhrPath = function getXhrPath (filePath) {
	        if (filePath.charAt(0) === '/') {
	            filePath = filePath.slice(1);
	        }
	        return this.prefixUrl + filePath;
	    };
	    XmlHttpRequest.prototype._requestFileAsync = function _requestFileAsync (p, type, cb) {
	        asyncDownloadFile(this.getXhrPath(p), type, cb);
	    };
	    XmlHttpRequest.prototype._requestFileSync = function _requestFileSync (p, type) {
	        return syncDownloadFile(this.getXhrPath(p), type);
	    };
	    /**
	     * Only requests the HEAD content, for the file size.
	     */
	    XmlHttpRequest.prototype._requestFileSizeAsync = function _requestFileSizeAsync (path$$1, cb) {
	        getFileSizeAsync(this.getXhrPath(path$$1), cb);
	    };
	    XmlHttpRequest.prototype._requestFileSizeSync = function _requestFileSizeSync (path$$1) {
	        return getFileSizeSync(this.getXhrPath(path$$1));
	    };
	
	    return XmlHttpRequest;
	}(BaseFileSystem));
	
	XmlHttpRequest.Name = "XmlHttpRequest";
	XmlHttpRequest.Options = {
	    index: {
	        type: ["string", "object"],
	        optional: true,
	        description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
	    },
	    baseUrl: {
	        type: "string",
	        optional: true,
	        description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
	    }
	};
	
	/**
	 * (Nonstandard) String utility function for 8-bit ASCII with the extended
	 * character set. Unlike the ASCII above, we do not mask the high bits.
	 *
	 * Placed into a separate file so it can be used with other Buffer implementations.
	 * @see http://en.wikipedia.org/wiki/Extended_ASCII
	 */
	/**
	 * (Nonstandard) String utility function for 8-bit ASCII with the extended
	 * character set. Unlike the ASCII above, we do not mask the high bits.
	 *
	 * Placed into a separate file so it can be used with other Buffer implementations.
	 * @see http://en.wikipedia.org/wiki/Extended_ASCII
	 */ var ExtendedASCII = function ExtendedASCII () {};
	
	 ExtendedASCII.str2byte = function str2byte (str, buf) {
	    var length = str.length > buf.length ? buf.length : str.length;
	    for (var i = 0; i < length; i++) {
	        var charCode = str.charCodeAt(i);
	        if (charCode > 0x7F) {
	            // Check if extended ASCII.
	            var charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i));
	            if (charIdx > -1) {
	                charCode = charIdx + 0x80;
	            }
	            // Otherwise, keep it as-is.
	        }
	        buf[charCode] = i;
	    }
	    return length;
	};
	ExtendedASCII.byte2str = function byte2str (buff) {
	    var chars = new Array(buff.length);
	    for (var i = 0; i < buff.length; i++) {
	        var charCode = buff[i];
	        if (charCode > 0x7F) {
	            chars[i] = ExtendedASCII.extendedChars[charCode - 128];
	        }
	        else {
	            chars[i] = String.fromCharCode(charCode);
	        }
	    }
	    return chars.join('');
	};
	ExtendedASCII.byteLength = function byteLength (str) { return str.length; };
	
	 ExtendedASCII.extendedChars = ['\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4',
	    '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB', '\u00E8', '\u00EF',
	    '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6',
	    '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9', '\u00FF', '\u00D6',
	    '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1',
	    '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1', '\u00AA', '\u00BA',
	    '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB',
	    '\u00BB', '_', '_', '_', '\u00A6', '\u00A6', '\u00C1', '\u00C2', '\u00C0',
	    '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-',
	    '-', '+', '-', '+', '\u00E3', '\u00C3', '+', '+', '-', '-', '\u00A6', '-',
	    '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i',
	    '\u00CD', '\u00CE', '\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_',
	    '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5',
	    '\u00FE', '\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD',
	    '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7',
	    '\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3',
	    '\u00B2', '_', ' '];
	
	/**
	 * @hidden
	 */
	var inflateRaw = __nested_webpack_require_1821__(31).inflateRaw;
	/**
	 * Maps CompressionMethod => function that decompresses.
	 * @hidden
	 */
	var decompressionMethods = {};
	/**
	 * 4.4.2.2: Indicates the compatibiltiy of a file's external attributes.
	 */
	var ExternalFileAttributeType;
	(function (ExternalFileAttributeType) {
	    ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
	    ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
	    ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
	    ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
	    ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
	    ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
	    ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
	    ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
	    ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
	    ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
	    ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
	    ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
	    ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
	    ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
	    ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
	    ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
	    ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
	    ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
	    ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
	    ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
	})(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
	/**
	 * 4.4.5
	 */
	var CompressionMethod;
	(function (CompressionMethod) {
	    CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
	    CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
	    CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
	    CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
	    CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
	    CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
	    CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
	    CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
	    CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
	    CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
	    CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
	    CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
	    CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
	    CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
	    CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
	    CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD"; // PPMd version I, Rev 1
	})(CompressionMethod || (CompressionMethod = {}));
	/**
	 * Converts the input time and date in MS-DOS format into a JavaScript Date
	 * object.
	 * @hidden
	 */
	function msdos2date(time, date) {
	    // MS-DOS Date
	    // |0 0 0 0  0|0 0 0  0|0 0 0  0 0 0 0
	    //   D (1-31)  M (1-23)  Y (from 1980)
	    var day = date & 0x1F;
	    // JS date is 0-indexed, DOS is 1-indexed.
	    var month = ((date >> 5) & 0xF) - 1;
	    var year = (date >> 9) + 1980;
	    // MS DOS Time
	    // |0 0 0 0  0|0 0 0  0 0 0|0  0 0 0 0
	    //    Second      Minute       Hour
	    var second = time & 0x1F;
	    var minute = (time >> 5) & 0x3F;
	    var hour = time >> 11;
	    return new Date(year, month, day, hour, minute, second);
	}
	/**
	 * Safely returns the string from the buffer, even if it is 0 bytes long.
	 * (Normally, calling toString() on a buffer with start === end causes an
	 * exception).
	 * @hidden
	 */
	function safeToString(buff, useUTF8, start, length) {
	    if (length === 0) {
	        return "";
	    }
	    else if (useUTF8) {
	        return buff.toString('utf8', start, start + length);
	    }
	    else {
	        return ExtendedASCII.byte2str(buff.slice(start, start + length));
	    }
	}
	/*
	   4.3.6 Overall .ZIP file format:
	
	      [local file header 1]
	      [encryption header 1]
	      [file data 1]
	      [data descriptor 1]
	      .
	      .
	      .
	      [local file header n]
	      [encryption header n]
	      [file data n]
	      [data descriptor n]
	      [archive decryption header]
	      [archive extra data record]
	      [central directory header 1]
	      .
	      .
	      .
	      [central directory header n]
	      [zip64 end of central directory record]
	      [zip64 end of central directory locator]
	      [end of central directory record]
	*/
	/**
	 * 4.3.7  Local file header:
	 *
	 *     local file header signature     4 bytes  (0x04034b50)
	 *     version needed to extract       2 bytes
	 *     general purpose bit flag        2 bytes
	 *     compression method              2 bytes
	 *    last mod file time              2 bytes
	 *    last mod file date              2 bytes
	 *    crc-32                          4 bytes
	 *    compressed size                 4 bytes
	 *    uncompressed size               4 bytes
	 *    file name length                2 bytes
	 *    extra field length              2 bytes
	 *
	 *    file name (variable size)
	 *    extra field (variable size)
	 */
	var FileHeader = function FileHeader(data) {
	     this.data = data;
	     if (data.readUInt32LE(0) !== 0x04034b50) {
	         throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
	     }
	 };
	 FileHeader.prototype.versionNeeded = function versionNeeded () { return this.data.readUInt16LE(4); };
	 FileHeader.prototype.flags = function flags () { return this.data.readUInt16LE(6); };
	 FileHeader.prototype.compressionMethod = function compressionMethod () { return this.data.readUInt16LE(8); };
	 FileHeader.prototype.lastModFileTime = function lastModFileTime () {
	     // Time and date is in MS-DOS format.
	     return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
	 };
	 FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime () {
	     return this.data.readUInt32LE(10);
	 };
	 FileHeader.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(14); };
	 /**
	  * These two values are COMPLETELY USELESS.
	  *
	  * Section 4.4.9:
	  *If bit 3 of the general purpose bit flag is set,
	  *these fields are set to zero in the local header and the
	  *correct values are put in the data descriptor and
	  *in the central directory.
	  *
	  * So we'll just use the central directory's values.
	  */
	 // public compressedSize(): number { return this.data.readUInt32LE(18); }
	 // public uncompressedSize(): number { return this.data.readUInt32LE(22); }
	 FileHeader.prototype.fileNameLength = function fileNameLength () { return this.data.readUInt16LE(26); };
	 FileHeader.prototype.extraFieldLength = function extraFieldLength () { return this.data.readUInt16LE(28); };
	 FileHeader.prototype.fileName = function fileName () {
	     return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
	 };
	 FileHeader.prototype.extraField = function extraField () {
	     var start = 30 + this.fileNameLength();
	     return this.data.slice(start, start + this.extraFieldLength());
	 };
	 FileHeader.prototype.totalSize = function totalSize () { return 30 + this.fileNameLength() + this.extraFieldLength(); };
	 FileHeader.prototype.useUTF8 = function useUTF8 () { return (this.flags() & 0x800) === 0x800; };
	/**
	 * 4.3.8  File data
	 *
	 *   Immediately following the local header for a file
	 *   SHOULD be placed the compressed or stored data for the file.
	 *   If the file is encrypted, the encryption header for the file
	 *   SHOULD be placed after the local header and before the file
	 *   data. The series of [local file header][encryption header]
	 *   [file data][data descriptor] repeats for each file in the
	 *   .ZIP archive.
	 *
	 *   Zero-byte files, directories, and other file types that
	 *   contain no content MUST not include file data.
	 */
	var FileData = function FileData(header, record, data) {
	     this.header = header;
	     this.record = record;
	     this.data = data;
	 };
	 FileData.prototype.decompress = function decompress () {
	     // Check the compression
	     var compressionMethod = this.header.compressionMethod();
	     var fcn = decompressionMethods[compressionMethod];
	     if (fcn) {
	         return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
	     }
	     else {
	         var name = CompressionMethod[compressionMethod];
	         if (!name) {
	             name = "Unknown: " + compressionMethod;
	         }
	         throw new ApiError(ErrorCode.EINVAL, ("Invalid compression method on file '" + (this.header.fileName()) + "': " + name));
	     }
	 };
	 FileData.prototype.getHeader = function getHeader () {
	     return this.header;
	 };
	 FileData.prototype.getRecord = function getRecord () {
	     return this.record;
	 };
	 FileData.prototype.getRawData = function getRawData () {
	     return this.data;
	 };
	/**
	 * 4.3.9  Data descriptor:
	 *
	 *    crc-32                          4 bytes
	 *    compressed size                 4 bytes
	 *    uncompressed size               4 bytes
	 */
	var DataDescriptor = function DataDescriptor(data) {
	     this.data = data;
	 };
	 DataDescriptor.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(0); };
	 DataDescriptor.prototype.compressedSize = function compressedSize () { return this.data.readUInt32LE(4); };
	 DataDescriptor.prototype.uncompressedSize = function uncompressedSize () { return this.data.readUInt32LE(8); };
	/*
	` 4.3.10  Archive decryption header:
	
	      4.3.10.1 The Archive Decryption Header is introduced in version 6.2
	      of the ZIP format specification.  This record exists in support
	      of the Central Directory Encryption Feature implemented as part of
	      the Strong Encryption Specification as described in this document.
	      When the Central Directory Structure is encrypted, this decryption
	      header MUST precede the encrypted data segment.
	 */
	/**
	 * 4.3.11  Archive extra data record:
	 *
	 *      archive extra data signature    4 bytes  (0x08064b50)
	 *      extra field length              4 bytes
	 *      extra field data                (variable size)
	 *
	 *    4.3.11.1 The Archive Extra Data Record is introduced in version 6.2
	 *    of the ZIP format specification.  This record MAY be used in support
	 *    of the Central Directory Encryption Feature implemented as part of
	 *    the Strong Encryption Specification as described in this document.
	 *    When present, this record MUST immediately precede the central
	 *    directory data structure.
	 */
	var ArchiveExtraDataRecord = function ArchiveExtraDataRecord(data) {
	     this.data = data;
	     if (this.data.readUInt32LE(0) !== 0x08064b50) {
	         throw new ApiError(ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
	     }
	 };
	 ArchiveExtraDataRecord.prototype.length = function length () { return this.data.readUInt32LE(4); };
	 ArchiveExtraDataRecord.prototype.extraFieldData = function extraFieldData () { return this.data.slice(8, 8 + this.length()); };
	/**
	 * 4.3.13 Digital signature:
	 *
	 *      header signature                4 bytes  (0x05054b50)
	 *      size of data                    2 bytes
	 *      signature data (variable size)
	 *
	 *    With the introduction of the Central Directory Encryption
	 *    feature in version 6.2 of this specification, the Central
	 *    Directory Structure MAY be stored both compressed and encrypted.
	 *    Although not required, it is assumed when encrypting the
	 *    Central Directory Structure, that it will be compressed
	 *    for greater storage efficiency.  Information on the
	 *    Central Directory Encryption feature can be found in the section
	 *    describing the Strong Encryption Specification. The Digital
	 *    Signature record will be neither compressed nor encrypted.
	 */
	var DigitalSignature = function DigitalSignature(data) {
	     this.data = data;
	     if (this.data.readUInt32LE(0) !== 0x05054b50) {
	         throw new ApiError(ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
	     }
	 };
	 DigitalSignature.prototype.size = function size () { return this.data.readUInt16LE(4); };
	 DigitalSignature.prototype.signatureData = function signatureData () { return this.data.slice(6, 6 + this.size()); };
	/**
	 * 4.3.12  Central directory structure:
	 *
	 *  central file header signature   4 bytes  (0x02014b50)
	 *  version made by                 2 bytes
	 *  version needed to extract       2 bytes
	 *  general purpose bit flag        2 bytes
	 *  compression method              2 bytes
	 *  last mod file time              2 bytes
	 *  last mod file date              2 bytes
	 *  crc-32                          4 bytes
	 *  compressed size                 4 bytes
	 *  uncompressed size               4 bytes
	 *  file name length                2 bytes
	 *  extra field length              2 bytes
	 *  file comment length             2 bytes
	 *  disk number start               2 bytes
	 *  internal file attributes        2 bytes
	 *  external file attributes        4 bytes
	 *  relative offset of local header 4 bytes
	 *
	 *  file name (variable size)
	 *  extra field (variable size)
	 *  file comment (variable size)
	 */
	var CentralDirectory = function CentralDirectory(zipData, data) {
	     this.zipData = zipData;
	     this.data = data;
	     // Sanity check.
	     if (this.data.readUInt32LE(0) !== 0x02014b50) {
	         throw new ApiError(ErrorCode.EINVAL, ("Invalid Zip file: Central directory record has invalid signature: " + (this.data.readUInt32LE(0))));
	     }
	     this._filename = this.produceFilename();
	 };
	 CentralDirectory.prototype.versionMadeBy = function versionMadeBy () { return this.data.readUInt16LE(4); };
	 CentralDirectory.prototype.versionNeeded = function versionNeeded () { return this.data.readUInt16LE(6); };
	 CentralDirectory.prototype.flag = function flag () { return this.data.readUInt16LE(8); };
	 CentralDirectory.prototype.compressionMethod = function compressionMethod () { return this.data.readUInt16LE(10); };
	 CentralDirectory.prototype.lastModFileTime = function lastModFileTime () {
	     // Time and date is in MS-DOS format.
	     return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
	 };
	 CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime () {
	     return this.data.readUInt32LE(12);
	 };
	 CentralDirectory.prototype.crc32 = function crc32 () { return this.data.readUInt32LE(16); };
	 CentralDirectory.prototype.compressedSize = function compressedSize () { return this.data.readUInt32LE(20); };
	 CentralDirectory.prototype.uncompressedSize = function uncompressedSize () { return this.data.readUInt32LE(24); };
	 CentralDirectory.prototype.fileNameLength = function fileNameLength () { return this.data.readUInt16LE(28); };
	 CentralDirectory.prototype.extraFieldLength = function extraFieldLength () { return this.data.readUInt16LE(30); };
	 CentralDirectory.prototype.fileCommentLength = function fileCommentLength () { return this.data.readUInt16LE(32); };
	 CentralDirectory.prototype.diskNumberStart = function diskNumberStart () { return this.data.readUInt16LE(34); };
	 CentralDirectory.prototype.internalAttributes = function internalAttributes () { return this.data.readUInt16LE(36); };
	 CentralDirectory.prototype.externalAttributes = function externalAttributes () { return this.data.readUInt32LE(38); };
	 CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset () { return this.data.readUInt32LE(42); };
	 CentralDirectory.prototype.produceFilename = function produceFilename () {
	     /*
	       4.4.17.1 claims:
	       * All slashes are forward ('/') slashes.
	       * Filename doesn't begin with a slash.
	       * No drive letters or any nonsense like that.
	       * If filename is missing, the input came from standard input.
	    
	       Unfortunately, this isn't true in practice. Some Windows zip utilities use
	       a backslash here, but the correct Unix-style path in file headers.
	    
	       To avoid seeking all over the file to recover the known-good filenames
	       from file headers, we simply convert '/' to '\' here.
	     */
	     var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
	     return fileName.replace(/\\/g, "/");
	 };
	 CentralDirectory.prototype.fileName = function fileName () {
	     return this._filename;
	 };
	 CentralDirectory.prototype.rawFileName = function rawFileName () {
	     return this.data.slice(46, 46 + this.fileNameLength());
	 };
	 CentralDirectory.prototype.extraField = function extraField () {
	     var start = 44 + this.fileNameLength();
	     return this.data.slice(start, start + this.extraFieldLength());
	 };
	 CentralDirectory.prototype.fileComment = function fileComment () {
	     var start = 46 + this.fileNameLength() + this.extraFieldLength();
	     return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
	 };
	 CentralDirectory.prototype.rawFileComment = function rawFileComment () {
	     var start = 46 + this.fileNameLength() + this.extraFieldLength();
	     return this.data.slice(start, start + this.fileCommentLength());
	 };
	 CentralDirectory.prototype.totalSize = function totalSize () {
	     return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
	 };
	 CentralDirectory.prototype.isDirectory = function isDirectory () {
	     // NOTE: This assumes that the zip file implementation uses the lower byte
	     //    of external attributes for DOS attributes for
	     //    backwards-compatibility. This is not mandated, but appears to be
	     //    commonplace.
	     //    According to the spec, the layout of external attributes is
	     //    platform-dependent.
	     //    If that fails, we also check if the name of the file ends in '/',
	     //    which is what Java's ZipFile implementation does.
	     var fileName = this.fileName();
	     return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');
	 };
	 CentralDirectory.prototype.isFile = function isFile () { return !this.isDirectory(); };
	 CentralDirectory.prototype.useUTF8 = function useUTF8 () { return (this.flag() & 0x800) === 0x800; };
	 CentralDirectory.prototype.isEncrypted = function isEncrypted () { return (this.flag() & 0x1) === 0x1; };
	 CentralDirectory.prototype.getFileData = function getFileData () {
	     // Need to grab the header before we can figure out where the actual
	     // compressed data starts.
	     var start = this.headerRelativeOffset();
	     var header = new FileHeader(this.zipData.slice(start));
	     return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
	 };
	 CentralDirectory.prototype.getData = function getData () {
	     return this.getFileData().decompress();
	 };
	 CentralDirectory.prototype.getRawData = function getRawData () {
	     return this.getFileData().getRawData();
	 };
	 CentralDirectory.prototype.getStats = function getStats () {
	     return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
	 };
	/**
	 * 4.3.16: end of central directory record
	 *  end of central dir signature    4 bytes  (0x06054b50)
	 *  number of this disk             2 bytes
	 *  number of the disk with the
	 *  start of the central directory  2 bytes
	 *  total number of entries in the
	 *  central directory on this disk  2 bytes
	 *  total number of entries in
	 *  the central directory           2 bytes
	 *  size of the central directory   4 bytes
	 *  offset of start of central
	 *  directory with respect to
	 *  the starting disk number        4 bytes
	 *  .ZIP file comment length        2 bytes
	 *  .ZIP file comment       (variable size)
	 */
	var EndOfCentralDirectory = function EndOfCentralDirectory(data) {
	     this.data = data;
	     if (this.data.readUInt32LE(0) !== 0x06054b50) {
	         throw new ApiError(ErrorCode.EINVAL, ("Invalid Zip file: End of central directory record has invalid signature: " + (this.data.readUInt32LE(0))));
	     }
	 };
	 EndOfCentralDirectory.prototype.diskNumber = function diskNumber () { return this.data.readUInt16LE(4); };
	 EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber () { return this.data.readUInt16LE(6); };
	 EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount () { return this.data.readUInt16LE(8); };
	 EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount () { return this.data.readUInt16LE(10); };
	 EndOfCentralDirectory.prototype.cdSize = function cdSize () { return this.data.readUInt32LE(12); };
	 EndOfCentralDirectory.prototype.cdOffset = function cdOffset () { return this.data.readUInt32LE(16); };
	 EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength () { return this.data.readUInt16LE(20); };
	 EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment () {
	     // Assuming UTF-8. The specification doesn't specify.
	     return safeToString(this.data, true, 22, this.cdZipCommentLength());
	 };
	 EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment () {
	     return this.data.slice(22, 22 + this.cdZipCommentLength());
	 };
	/**
	 * Contains the table of contents of a Zip file.
	 */
	var ZipTOC = function ZipTOC(index, directoryEntries, eocd, data) {
	     this.index = index;
	     this.directoryEntries = directoryEntries;
	     this.eocd = eocd;
	     this.data = data;
	 };
	/**
	 * Zip file-backed filesystem
	 * Implemented according to the standard:
	 * http://www.pkware.com/documents/casestudies/APPNOTE.TXT
	 *
	 * While there are a few zip libraries for JavaScript (e.g. JSZip and zip.js),
	 * they are not a good match for BrowserFS. In particular, these libraries
	 * perform a lot of unneeded data copying, and eagerly decompress every file
	 * in the zip file upon loading to check the CRC32. They also eagerly decode
	 * strings. Furthermore, these libraries duplicate functionality already present
	 * in BrowserFS (e.g. UTF-8 decoding and binary data manipulation).
	 *
	 * This filesystem takes advantage of BrowserFS's Buffer implementation, which
	 * efficiently represents the zip file in memory (in both ArrayBuffer-enabled
	 * browsers *and* non-ArrayBuffer browsers), and which can neatly be 'sliced'
	 * without copying data. Each struct defined in the standard is represented with
	 * a buffer slice pointing to an offset in the zip file, and has getters for
	 * each field. As we anticipate that this data will not be read often, we choose
	 * not to store each struct field in the JavaScript object; instead, to reduce
	 * memory consumption, we retrieve it directly from the binary data each time it
	 * is requested.
	 *
	 * When the filesystem is instantiated, we determine the directory structure
	 * of the zip file as quickly as possible. We lazily decompress and check the
	 * CRC32 of files. We do not cache decompressed files; if this is a desired
	 * feature, it is best implemented as a generic file system wrapper that can
	 * cache data from arbitrary file systems.
	 *
	 * For inflation, we use `pako`'s implementation:
	 * https://github.com/nodeca/pako
	 *
	 * Current limitations:
	 * * No encryption.
	 * * No ZIP64 support.
	 * * Read-only.
	 *   Write support would require that we:
	 *   - Keep track of changed/new files.
	 *   - Compress changed files, and generate appropriate metadata for each.
	 *   - Update file offsets for other files in the zip file.
	 *   - Stream it out to a location.
	 *   This isn't that bad, so we might do this at a later date.
	 */
	var ZipFS = (function (SynchronousFileSystem$$1) {
	   function ZipFS(input, name, deprecateMsg) {
	        if ( name === void 0 ) name = '';
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        SynchronousFileSystem$$1.call(this);
	        this.name = name;
	        this._index = new FileIndex();
	        this._directoryEntries = [];
	        this._eocd = null;
	        deprecationMessage(deprecateMsg, ZipFS.Name, { zipData: "zip data as a Buffer", name: name });
	        if (input instanceof ZipTOC) {
	            this._index = input.index;
	            this._directoryEntries = input.directoryEntries;
	            this._eocd = input.eocd;
	            this.data = input.data;
	        }
	        else {
	            this.data = input;
	            this.populateIndex();
	        }
	    }
	
	   if ( SynchronousFileSystem$$1 ) ZipFS.__proto__ = SynchronousFileSystem$$1;
	   ZipFS.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	   ZipFS.prototype.constructor = ZipFS;
	    /**
	     * Constructs a ZipFS instance with the given options.
	     */
	    ZipFS.Create = function Create (opts, cb) {
	        try {
	            ZipFS.computeIndex(opts.zipData, function (zipTOC) {
	                var fs = new ZipFS(zipTOC, opts.name, false);
	                cb(null, fs);
	            }, false);
	        }
	        catch (e) {
	            cb(e);
	        }
	    };
	    ZipFS.isAvailable = function isAvailable () { return true; };
	    ZipFS.RegisterDecompressionMethod = function RegisterDecompressionMethod (m, fcn) {
	        decompressionMethods[m] = fcn;
	    };
	    /**
	     * **Deprecated. Please use ZipFS.Create() method instead.**
	     */
	    ZipFS.computeIndex = function computeIndex (data, cb, deprecateMsg) {
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        // TODO: Refactor to plumb errors through. Right now, they throw.
	        if (deprecateMsg) {
	            console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
	        }
	        var index = new FileIndex();
	        var eocd = ZipFS.getEOCD(data);
	        if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
	        }
	        var cdPtr = eocd.cdOffset();
	        if (cdPtr === 0xFFFFFFFF) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
	        }
	        var cdEnd = cdPtr + eocd.cdSize();
	        ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
	    };
	    /**
	     * Locates the end of central directory record at the end of the file.
	     * Throws an exception if it cannot be found.
	     */
	    ZipFS.getEOCD = function getEOCD (data) {
	        // Unfortunately, the comment is variable size and up to 64K in size.
	        // We assume that the magic signature does not appear in the comment, and
	        // in the bytes between the comment and the signature. Other ZIP
	        // implementations make this same assumption, since the alternative is to
	        // read thread every entry in the file to get to it. :(
	        // These are *negative* offsets from the end of the file.
	        var startOffset = 22;
	        var endOffset = Math.min(startOffset + 0xFFFF, data.length - 1);
	        // There's not even a byte alignment guarantee on the comment so we need to
	        // search byte by byte. *grumble grumble*
	        for (var i = startOffset; i < endOffset; i++) {
	            // Magic number: EOCD Signature
	            if (data.readUInt32LE(data.length - i) === 0x06054b50) {
	                return new EndOfCentralDirectory(data.slice(data.length - i));
	            }
	        }
	        throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
	    };
	    ZipFS.addToIndex = function addToIndex (cd, index) {
	        // Paths must be absolute, yet zip file paths are always relative to the
	        // zip root. So we append '/' and call it a day.
	        var filename = cd.fileName();
	        if (filename.charAt(0) === '/') {
	            throw new Error("WHY IS THIS ABSOLUTE");
	        }
	        // XXX: For the file index, strip the trailing '/'.
	        if (filename.charAt(filename.length - 1) === '/') {
	            filename = filename.substr(0, filename.length - 1);
	        }
	        if (cd.isDirectory()) {
	            index.addPathFast('/' + filename, new DirInode(cd));
	        }
	        else {
	            index.addPathFast('/' + filename, new FileInode(cd));
	        }
	    };
	    ZipFS.computeIndexResponsive = function computeIndexResponsive (data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
	        if (cdPtr < cdEnd) {
	            var count = 0;
	            while (count++ < 200 && cdPtr < cdEnd) {
	                var cd = new CentralDirectory(data, data.slice(cdPtr));
	                ZipFS.addToIndex(cd, index);
	                cdPtr += cd.totalSize();
	                cdEntries.push(cd);
	            }
	            setImmediate$3(function () {
	                ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
	            });
	        }
	        else {
	            cb(new ZipTOC(index, cdEntries, eocd, data));
	        }
	    };
	    ZipFS.prototype.getName = function getName () {
	        return ZipFS.Name + (this.name !== '' ? (" " + (this.name)) : '');
	    };
	    /**
	     * Get the CentralDirectory object for the given path.
	     */
	    ZipFS.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry (path$$1) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        if (isFileInode(inode)) {
	            return inode.getData();
	        }
	        else if (isDirInode(inode)) {
	            return inode.getData();
	        }
	        else {
	            // Should never occur.
	            throw ApiError.EPERM(("Invalid inode: " + inode));
	        }
	    };
	    ZipFS.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt (index) {
	        var dirEntry = this._directoryEntries[index];
	        if (!dirEntry) {
	            throw new RangeError(("Invalid directory index: " + index + "."));
	        }
	        return dirEntry;
	    };
	    ZipFS.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries () {
	        return this._directoryEntries.length;
	    };
	    ZipFS.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory () {
	        return this._eocd;
	    };
	    ZipFS.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        // Read-only file system.
	        cb(this.data.length, 0);
	    };
	    ZipFS.prototype.isReadOnly = function isReadOnly () {
	        return true;
	    };
	    ZipFS.prototype.supportsLinks = function supportsLinks () {
	        return false;
	    };
	    ZipFS.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    ZipFS.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    ZipFS.prototype.statSync = function statSync (path$$1, isLstat) {
	        var inode = this._index.getInode(path$$1);
	        if (inode === null) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        var stats;
	        if (isFileInode(inode)) {
	            stats = inode.getData().getStats();
	        }
	        else if (isDirInode(inode)) {
	            stats = inode.getStats();
	        }
	        else {
	            throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
	        }
	        return stats;
	    };
	    ZipFS.prototype.openSync = function openSync (path$$1, flags, mode) {
	        // INVARIANT: Cannot write to RO file systems.
	        if (flags.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, path$$1);
	        }
	        // Check if the path exists, and is a file.
	        var inode = this._index.getInode(path$$1);
	        if (!inode) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (isFileInode(inode)) {
	            var cdRecord = inode.getData();
	            var stats = cdRecord.getStats();
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    throw ApiError.EEXIST(path$$1);
	                case ActionType.NOP:
	                    return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());
	                default:
	                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
	            }
	        }
	        else {
	            throw ApiError.EISDIR(path$$1);
	        }
	    };
	    ZipFS.prototype.readdirSync = function readdirSync (path$$1) {
	        // Check if it exists.
	        var inode = this._index.getInode(path$$1);
	        if (!inode) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (isDirInode(inode)) {
	            return inode.getListing();
	        }
	        else {
	            throw ApiError.ENOTDIR(path$$1);
	        }
	    };
	    /**
	     * Specially-optimized readfile.
	     */
	    ZipFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	        // Get file.
	        var fd = this.openSync(fname, flag, 0x1a4);
	        try {
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                return copyingSlice(fdBuff);
	            }
	            return fdBuff.toString(encoding);
	        }
	        finally {
	            fd.closeSync();
	        }
	    };
	    ZipFS.prototype.populateIndex = function populateIndex () {
	        var this$1 = this;
	
	        var eocd = this._eocd = ZipFS.getEOCD(this.data);
	        if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
	        }
	        var cdPtr = eocd.cdOffset();
	        if (cdPtr === 0xFFFFFFFF) {
	            throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
	        }
	        var cdEnd = cdPtr + eocd.cdSize();
	        while (cdPtr < cdEnd) {
	            var cd = new CentralDirectory(this$1.data, this$1.data.slice(cdPtr));
	            cdPtr += cd.totalSize();
	            ZipFS.addToIndex(cd, this$1._index);
	            this$1._directoryEntries.push(cd);
	        }
	    };
	
	   return ZipFS;
	}(SynchronousFileSystem));
	
	ZipFS.Name = "ZipFS";
	ZipFS.Options = {
	    zipData: {
	        type: "object",
	        description: "The zip file as a Buffer object.",
	        validator: bufferValidator
	    },
	    name: {
	        type: "string",
	        optional: true,
	        description: "The name of the zip file (optional)."
	    }
	};
	ZipFS.CompressionMethod = CompressionMethod;
	ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function (data, compressedSize, uncompressedSize) {
	    return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), { chunkSize: uncompressedSize }));
	});
	ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function (data, compressedSize, uncompressedSize) {
	    return copyingSlice(data, 0, uncompressedSize);
	});
	
	/**
	 * @hidden
	 */
	var rockRidgeIdentifier = "IEEE_P1282";
	/**
	 * @hidden
	 */
	function getASCIIString(data, startIndex, length) {
	    return data.toString('ascii', startIndex, startIndex + length).trim();
	}
	/**
	 * @hidden
	 */
	function getJolietString(data, startIndex, length) {
	    if (length === 1) {
	        // Special: Root, parent, current directory are still a single byte.
	        return String.fromCharCode(data[startIndex]);
	    }
	    // UTF16-BE, which isn't natively supported by NodeJS Buffers.
	    // Length should be even, but pessimistically floor just in case.
	    var pairs = Math.floor(length / 2);
	    var chars = new Array(pairs);
	    for (var i = 0; i < pairs; i++) {
	        var pos = startIndex + (i << 1);
	        chars[i] = String.fromCharCode(data[pos + 1] | (data[pos] << 8));
	    }
	    return chars.join('');
	}
	/**
	 * @hidden
	 */
	function getDate(data, startIndex) {
	    var year = parseInt(getASCIIString(data, startIndex, 4), 10);
	    var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
	    var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
	    var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
	    var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
	    var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
	    var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);
	    // Last is a time-zone offset, but JavaScript dates don't support time zones well.
	    return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
	}
	/**
	 * @hidden
	 */
	function getShortFormDate(data, startIndex) {
	    var yearsSince1900 = data[startIndex];
	    var month = data[startIndex + 1];
	    var day = data[startIndex + 2];
	    var hour = data[startIndex + 3];
	    var minute = data[startIndex + 4];
	    var second = data[startIndex + 5];
	    // JavaScript's Date support isn't so great; ignore timezone.
	    // const offsetFromGMT = this._data[24];
	    return new Date(yearsSince1900, month - 1, day, hour, minute, second);
	}
	/**
	 * @hidden
	 */
	function constructSystemUseEntry(bigData, i) {
	    var data = bigData.slice(i);
	    var sue = new SystemUseEntry(data);
	    switch (sue.signatureWord()) {
	        case 17221 /* CE */:
	            return new CEEntry(data);
	        case 20548 /* PD */:
	            return new PDEntry(data);
	        case 21328 /* SP */:
	            return new SPEntry(data);
	        case 21332 /* ST */:
	            return new STEntry(data);
	        case 17746 /* ER */:
	            return new EREntry(data);
	        case 17747 /* ES */:
	            return new ESEntry(data);
	        case 20568 /* PX */:
	            return new PXEntry(data);
	        case 20558 /* PN */:
	            return new PNEntry(data);
	        case 21324 /* SL */:
	            return new SLEntry(data);
	        case 20045 /* NM */:
	            return new NMEntry(data);
	        case 17228 /* CL */:
	            return new CLEntry(data);
	        case 20556 /* PL */:
	            return new PLEntry(data);
	        case 21061 /* RE */:
	            return new REEntry(data);
	        case 21574 /* TF */:
	            return new TFEntry(data);
	        case 21318 /* SF */:
	            return new SFEntry(data);
	        case 21074 /* RR */:
	            return new RREntry(data);
	        default:
	            return sue;
	    }
	}
	/**
	 * @hidden
	 */
	function constructSystemUseEntries(data, i, len, isoData) {
	    // If the remaining allocated space following the last recorded System Use Entry in a System
	    // Use field or Continuation Area is less than four bytes long, it cannot contain a System
	    // Use Entry and shall be ignored
	    len = len - 4;
	    var entries = new Array();
	    while (i < len) {
	        var entry = constructSystemUseEntry(data, i);
	        var length = entry.length();
	        if (length === 0) {
	            // Invalid SU section; prevent infinite loop.
	            return entries;
	        }
	        i += length;
	        if (entry instanceof STEntry) {
	            // ST indicates the end of entries.
	            break;
	        }
	        if (entry instanceof CEEntry) {
	            entries = entries.concat(entry.getEntries(isoData));
	        }
	        else {
	            entries.push(entry);
	        }
	    }
	    return entries;
	}
	/**
	 * @hidden
	 */
	var VolumeDescriptor = function VolumeDescriptor(data) {
	    this._data = data;
	};
	VolumeDescriptor.prototype.type = function type () {
	    return this._data[0];
	};
	VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier () {
	    return getASCIIString(this._data, 1, 5);
	};
	VolumeDescriptor.prototype.version = function version () {
	    return this._data[6];
	};
	VolumeDescriptor.prototype.data = function data () {
	    return this._data.slice(7, 2048);
	};
	/**
	 * @hidden
	 */
	var PrimaryOrSupplementaryVolumeDescriptor = (function (VolumeDescriptor) {
	    function PrimaryOrSupplementaryVolumeDescriptor(data) {
	        VolumeDescriptor.call(this, data);
	        this._root = null;
	    }
	
	    if ( VolumeDescriptor ) PrimaryOrSupplementaryVolumeDescriptor.__proto__ = VolumeDescriptor;
	    PrimaryOrSupplementaryVolumeDescriptor.prototype = Object.create( VolumeDescriptor && VolumeDescriptor.prototype );
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor;
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.systemIdentifier = function systemIdentifier () {
	        return this._getString32(8);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeIdentifier = function volumeIdentifier () {
	        return this._getString32(40);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSpaceSize = function volumeSpaceSize () {
	        return this._data.readUInt32LE(80);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetSize = function volumeSetSize () {
	        return this._data.readUInt16LE(120);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSequenceNumber = function volumeSequenceNumber () {
	        return this._data.readUInt16LE(124);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.logicalBlockSize = function logicalBlockSize () {
	        return this._data.readUInt16LE(128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.pathTableSize = function pathTableSize () {
	        return this._data.readUInt32LE(132);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable () {
	        return this._data.readUInt32LE(140);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable () {
	        return this._data.readUInt32LE(144);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable () {
	        return this._data.readUInt32BE(148);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable () {
	        return this._data.readUInt32BE(152);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.rootDirectoryEntry = function rootDirectoryEntry (isoData) {
	        if (this._root === null) {
	            this._root = this._constructRootDirectoryRecord(this._data.slice(156));
	            this._root.rootCheckForRockRidge(isoData);
	        }
	        return this._root;
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetIdentifier = function volumeSetIdentifier () {
	        return this._getString(190, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.publisherIdentifier = function publisherIdentifier () {
	        return this._getString(318, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.dataPreparerIdentifier = function dataPreparerIdentifier () {
	        return this._getString(446, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationIdentifier = function applicationIdentifier () {
	        return this._getString(574, 128);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.copyrightFileIdentifier = function copyrightFileIdentifier () {
	        return this._getString(702, 38);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.abstractFileIdentifier = function abstractFileIdentifier () {
	        return this._getString(740, 36);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier () {
	        return this._getString(776, 37);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeCreationDate = function volumeCreationDate () {
	        return getDate(this._data, 813);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeModificationDate = function volumeModificationDate () {
	        return getDate(this._data, 830);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeExpirationDate = function volumeExpirationDate () {
	        return getDate(this._data, 847);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeEffectiveDate = function volumeEffectiveDate () {
	        return getDate(this._data, 864);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.fileStructureVersion = function fileStructureVersion () {
	        return this._data[881];
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationUsed = function applicationUsed () {
	        return this._data.slice(883, 883 + 512);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype.reserved = function reserved () {
	        return this._data.slice(1395, 1395 + 653);
	    };
	    PrimaryOrSupplementaryVolumeDescriptor.prototype._getString32 = function _getString32 (idx) {
	        return this._getString(idx, 32);
	    };
	
	    return PrimaryOrSupplementaryVolumeDescriptor;
	}(VolumeDescriptor));
	/**
	 * @hidden
	 */
	var PrimaryVolumeDescriptor = (function (PrimaryOrSupplementaryVolumeDescriptor) {
	    function PrimaryVolumeDescriptor(data) {
	        PrimaryOrSupplementaryVolumeDescriptor.call(this, data);
	        if (this.type() !== 1 /* PrimaryVolumeDescriptor */) {
	            throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
	        }
	    }
	
	    if ( PrimaryOrSupplementaryVolumeDescriptor ) PrimaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
	    PrimaryVolumeDescriptor.prototype = Object.create( PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype );
	    PrimaryVolumeDescriptor.prototype.constructor = PrimaryVolumeDescriptor;
	    PrimaryVolumeDescriptor.prototype.name = function name () {
	        return "ISO9660";
	    };
	    PrimaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord (data) {
	        return new ISODirectoryRecord(data, -1);
	    };
	    PrimaryVolumeDescriptor.prototype._getString = function _getString (idx, len) {
	        return this._getString(idx, len);
	    };
	
	    return PrimaryVolumeDescriptor;
	}(PrimaryOrSupplementaryVolumeDescriptor));
	/**
	 * @hidden
	 */
	var SupplementaryVolumeDescriptor = (function (PrimaryOrSupplementaryVolumeDescriptor) {
	    function SupplementaryVolumeDescriptor(data) {
	        PrimaryOrSupplementaryVolumeDescriptor.call(this, data);
	        if (this.type() !== 2 /* SupplementaryVolumeDescriptor */) {
	            throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
	        }
	        var escapeSequence = this.escapeSequence();
	        var third = escapeSequence[2];
	        // Third character identifies what 'level' of the UCS specification to follow.
	        // We ignore it.
	        if (escapeSequence[0] !== 0x25 || escapeSequence[1] !== 0x2F ||
	            (third !== 0x40 && third !== 0x43 && third !== 0x45)) {
	            throw new ApiError(ErrorCode.EIO, ("Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + (escapeSequence.toString())));
	        }
	    }
	
	    if ( PrimaryOrSupplementaryVolumeDescriptor ) SupplementaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
	    SupplementaryVolumeDescriptor.prototype = Object.create( PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype );
	    SupplementaryVolumeDescriptor.prototype.constructor = SupplementaryVolumeDescriptor;
	    SupplementaryVolumeDescriptor.prototype.name = function name () {
	        return "Joliet";
	    };
	    SupplementaryVolumeDescriptor.prototype.escapeSequence = function escapeSequence () {
	        return this._data.slice(88, 120);
	    };
	    SupplementaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord (data) {
	        return new JolietDirectoryRecord(data, -1);
	    };
	    SupplementaryVolumeDescriptor.prototype._getString = function _getString (idx, len) {
	        return getJolietString(this._data, idx, len);
	    };
	
	    return SupplementaryVolumeDescriptor;
	}(PrimaryOrSupplementaryVolumeDescriptor));
	/**
	 * @hidden
	 */
	var DirectoryRecord = function DirectoryRecord(data, rockRidgeOffset) {
	    this._suEntries = null;
	    this._fileOrDir = null;
	    this._data = data;
	    this._rockRidgeOffset = rockRidgeOffset;
	};
	DirectoryRecord.prototype.hasRockRidge = function hasRockRidge () {
	    return this._rockRidgeOffset > -1;
	};
	DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset () {
	    return this._rockRidgeOffset;
	};
	/**
	 * !!ONLY VALID ON ROOT NODE!!
	 * Checks if Rock Ridge is enabled, and sets the offset.
	 */
	DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge (isoData) {
	    var dir = this.getDirectory(isoData);
	    this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);
	    if (this._rockRidgeOffset > -1) {
	        // Wipe out directory. Start over with RR knowledge.
	        this._fileOrDir = null;
	    }
	};
	DirectoryRecord.prototype.length = function length () {
	    return this._data[0];
	};
	DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength () {
	    return this._data[1];
	};
	DirectoryRecord.prototype.lba = function lba () {
	    return this._data.readUInt32LE(2) * 2048;
	};
	DirectoryRecord.prototype.dataLength = function dataLength () {
	    return this._data.readUInt32LE(10);
	};
	DirectoryRecord.prototype.recordingDate = function recordingDate () {
	    return getShortFormDate(this._data, 18);
	};
	DirectoryRecord.prototype.fileFlags = function fileFlags () {
	    return this._data[25];
	};
	DirectoryRecord.prototype.fileUnitSize = function fileUnitSize () {
	    return this._data[26];
	};
	DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize () {
	    return this._data[27];
	};
	DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber () {
	    return this._data.readUInt16LE(28);
	};
	DirectoryRecord.prototype.identifier = function identifier () {
	    return this._getString(33, this._data[32]);
	};
	DirectoryRecord.prototype.fileName = function fileName (isoData) {
	    if (this.hasRockRidge()) {
	        var fn = this._rockRidgeFilename(isoData);
	        if (fn !== null) {
	            return fn;
	        }
	    }
	    var ident = this.identifier();
	    if (this.isDirectory(isoData)) {
	        return ident;
	    }
	    // Files:
	    // - MUST have 0x2E (.) separating the name from the extension
	    // - MUST have 0x3B (;) separating the file name and extension from the version
	    // Gets expanded to two-byte char in Unicode directory records.
	    var versionSeparator = ident.indexOf(';');
	    if (versionSeparator === -1) {
	        // Some Joliet filenames lack the version separator, despite the standard
	        // specifying that it should be there.
	        return ident;
	    }
	    else if (ident[versionSeparator - 1] === '.') {
	        // Empty extension. Do not include '.' in the filename.
	        return ident.slice(0, versionSeparator - 1);
	    }
	    else {
	        // Include up to version separator.
	        return ident.slice(0, versionSeparator);
	    }
	};
	DirectoryRecord.prototype.isDirectory = function isDirectory (isoData) {
	    var rv = !!(this.fileFlags() & 2 /* Directory */);
	    // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory
	    // depth limit. Rock Ridge marks these as files and adds a special attribute.
	    if (!rv && this.hasRockRidge()) {
	        rv = this.getSUEntries(isoData).filter(function (e) { return e instanceof CLEntry; }).length > 0;
	    }
	    return rv;
	};
	DirectoryRecord.prototype.isSymlink = function isSymlink (isoData) {
	    return this.hasRockRidge() && this.getSUEntries(isoData).filter(function (e) { return e instanceof SLEntry; }).length > 0;
	};
	DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath (isoData) {
	    var p = "";
	    var entries = this.getSUEntries(isoData);
	    var getStr = this._getGetString();
	    for (var i = 0, list = entries; i < list.length; i += 1) {
	        var entry = list[i];
	
	            if (entry instanceof SLEntry) {
	            var components = entry.componentRecords();
	            for (var i$1 = 0, list$1 = components; i$1 < list$1.length; i$1 += 1) {
	                var component = list$1[i$1];
	
	                    var flags = component.flags();
	                if (flags & 2 /* CURRENT */) {
	                    p += "./";
	                }
	                else if (flags & 4 /* PARENT */) {
	                    p += "../";
	                }
	                else if (flags & 8 /* ROOT */) {
	                    p += "/";
	                }
	                else {
	                    p += component.content(getStr);
	                    if (!(flags & 1 /* CONTINUE */)) {
	                        p += '/';
	                    }
	                }
	            }
	            if (!entry.continueFlag()) {
	                // We are done with this link.
	                break;
	            }
	        }
	    }
	    if (p.length > 1 && p[p.length - 1] === '/') {
	        // Trim trailing '/'.
	        return p.slice(0, p.length - 1);
	    }
	    else {
	        return p;
	    }
	};
	DirectoryRecord.prototype.getFile = function getFile (isoData) {
	    if (this.isDirectory(isoData)) {
	        throw new Error("Tried to get a File from a directory.");
	    }
	    if (this._fileOrDir === null) {
	        this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
	    }
	    return this._fileOrDir;
	};
	DirectoryRecord.prototype.getDirectory = function getDirectory (isoData) {
	    if (!this.isDirectory(isoData)) {
	        throw new Error("Tried to get a Directory from a file.");
	    }
	    if (this._fileOrDir === null) {
	        this._fileOrDir = this._constructDirectory(isoData);
	    }
	    return this._fileOrDir;
	};
	DirectoryRecord.prototype.getSUEntries = function getSUEntries (isoData) {
	    if (!this._suEntries) {
	        this._constructSUEntries(isoData);
	    }
	    return this._suEntries;
	};
	DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename (isoData) {
	    var nmEntries = this.getSUEntries(isoData).filter(function (e) { return e instanceof NMEntry; });
	    if (nmEntries.length === 0 || nmEntries[0].flags() & (2 /* CURRENT */ | 4 /* PARENT */)) {
	        return null;
	    }
	    var str = '';
	    var getString = this._getGetString();
	    for (var i = 0, list = nmEntries; i < list.length; i += 1) {
	        var e = list[i];
	
	            str += e.name(getString);
	        if (!(e.flags() & 1 /* CONTINUE */)) {
	            break;
	        }
	    }
	    return str;
	};
	DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries (isoData) {
	    var i = 33 + this._data[32];
	    if (i % 2 === 1) {
	        // Skip padding field.
	        i++;
	    }
	    i += this._rockRidgeOffset;
	    this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);
	};
	/**
	 * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!
	 * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset
	 * at which system use fields begin.
	 */
	DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset (isoData) {
	    // In the worst case, we get some garbage SU entries.
	    // Fudge offset to 0 before proceeding.
	    this._rockRidgeOffset = 0;
	    var suEntries = this.getSUEntries(isoData);
	    if (suEntries.length > 0) {
	        var spEntry = suEntries[0];
	        if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
	            // SUSP is in use.
	            for (var i = 1; i < suEntries.length; i++) {
	                var entry = suEntries[i];
	                if (entry instanceof RREntry || (entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier)) {
	                    // Rock Ridge is in use!
	                    return spEntry.bytesSkipped();
	                }
	            }
	        }
	    }
	    // Failed.
	    this._rockRidgeOffset = -1;
	    return -1;
	};
	/**
	 * @hidden
	 */
	var ISODirectoryRecord = (function (DirectoryRecord) {
	    function ISODirectoryRecord(data, rockRidgeOffset) {
	        DirectoryRecord.call(this, data, rockRidgeOffset);
	    }
	
	    if ( DirectoryRecord ) ISODirectoryRecord.__proto__ = DirectoryRecord;
	    ISODirectoryRecord.prototype = Object.create( DirectoryRecord && DirectoryRecord.prototype );
	    ISODirectoryRecord.prototype.constructor = ISODirectoryRecord;
	    ISODirectoryRecord.prototype._getString = function _getString (i, len) {
	        return getASCIIString(this._data, i, len);
	    };
	    ISODirectoryRecord.prototype._constructDirectory = function _constructDirectory (isoData) {
	        return new ISODirectory(this, isoData);
	    };
	    ISODirectoryRecord.prototype._getGetString = function _getGetString () {
	        return getASCIIString;
	    };
	
	    return ISODirectoryRecord;
	}(DirectoryRecord));
	/**
	 * @hidden
	 */
	var JolietDirectoryRecord = (function (DirectoryRecord) {
	    function JolietDirectoryRecord(data, rockRidgeOffset) {
	        DirectoryRecord.call(this, data, rockRidgeOffset);
	    }
	
	    if ( DirectoryRecord ) JolietDirectoryRecord.__proto__ = DirectoryRecord;
	    JolietDirectoryRecord.prototype = Object.create( DirectoryRecord && DirectoryRecord.prototype );
	    JolietDirectoryRecord.prototype.constructor = JolietDirectoryRecord;
	    JolietDirectoryRecord.prototype._getString = function _getString (i, len) {
	        return getJolietString(this._data, i, len);
	    };
	    JolietDirectoryRecord.prototype._constructDirectory = function _constructDirectory (isoData) {
	        return new JolietDirectory(this, isoData);
	    };
	    JolietDirectoryRecord.prototype._getGetString = function _getGetString () {
	        return getJolietString;
	    };
	
	    return JolietDirectoryRecord;
	}(DirectoryRecord));
	/**
	 * @hidden
	 */
	var SystemUseEntry = function SystemUseEntry(data) {
	    this._data = data;
	};
	SystemUseEntry.prototype.signatureWord = function signatureWord () {
	    return this._data.readUInt16BE(0);
	};
	SystemUseEntry.prototype.signatureWordString = function signatureWordString () {
	    return getASCIIString(this._data, 0, 2);
	};
	SystemUseEntry.prototype.length = function length () {
	    return this._data[2];
	};
	SystemUseEntry.prototype.suVersion = function suVersion () {
	    return this._data[3];
	};
	/**
	 * Continuation entry.
	 * @hidden
	 */
	var CEEntry = (function (SystemUseEntry) {
	    function CEEntry(data) {
	        SystemUseEntry.call(this, data);
	        this._entries = null;
	    }
	
	    if ( SystemUseEntry ) CEEntry.__proto__ = SystemUseEntry;
	    CEEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    CEEntry.prototype.constructor = CEEntry;
	    /**
	     * Logical block address of the continuation area.
	     */
	    CEEntry.prototype.continuationLba = function continuationLba () {
	        return this._data.readUInt32LE(4);
	    };
	    /**
	     * Offset into the logical block.
	     */
	    CEEntry.prototype.continuationLbaOffset = function continuationLbaOffset () {
	        return this._data.readUInt32LE(12);
	    };
	    /**
	     * Length of the continuation area.
	     */
	    CEEntry.prototype.continuationLength = function continuationLength () {
	        return this._data.readUInt32LE(20);
	    };
	    CEEntry.prototype.getEntries = function getEntries (isoData) {
	        if (!this._entries) {
	            var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
	            this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
	        }
	        return this._entries;
	    };
	
	    return CEEntry;
	}(SystemUseEntry));
	/**
	 * Padding entry.
	 * @hidden
	 */
	var PDEntry = (function (SystemUseEntry) {
	    function PDEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PDEntry.__proto__ = SystemUseEntry;
	    PDEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PDEntry.prototype.constructor = PDEntry;
	
	    return PDEntry;
	}(SystemUseEntry));
	/**
	 * Identifies that SUSP is in-use.
	 * @hidden
	 */
	var SPEntry = (function (SystemUseEntry) {
	    function SPEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) SPEntry.__proto__ = SystemUseEntry;
	    SPEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    SPEntry.prototype.constructor = SPEntry;
	    SPEntry.prototype.checkBytesPass = function checkBytesPass () {
	        return this._data[4] === 0xBE && this._data[5] === 0xEF;
	    };
	    SPEntry.prototype.bytesSkipped = function bytesSkipped () {
	        return this._data[6];
	    };
	
	    return SPEntry;
	}(SystemUseEntry));
	/**
	 * Identifies the end of the SUSP entries.
	 * @hidden
	 */
	var STEntry = (function (SystemUseEntry) {
	    function STEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) STEntry.__proto__ = SystemUseEntry;
	    STEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    STEntry.prototype.constructor = STEntry;
	
	    return STEntry;
	}(SystemUseEntry));
	/**
	 * Specifies system-specific extensions to SUSP.
	 * @hidden
	 */
	var EREntry = (function (SystemUseEntry) {
	    function EREntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) EREntry.__proto__ = SystemUseEntry;
	    EREntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    EREntry.prototype.constructor = EREntry;
	    EREntry.prototype.identifierLength = function identifierLength () {
	        return this._data[4];
	    };
	    EREntry.prototype.descriptorLength = function descriptorLength () {
	        return this._data[5];
	    };
	    EREntry.prototype.sourceLength = function sourceLength () {
	        return this._data[6];
	    };
	    EREntry.prototype.extensionVersion = function extensionVersion () {
	        return this._data[7];
	    };
	    EREntry.prototype.extensionIdentifier = function extensionIdentifier () {
	        return getASCIIString(this._data, 8, this.identifierLength());
	    };
	    EREntry.prototype.extensionDescriptor = function extensionDescriptor () {
	        return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
	    };
	    EREntry.prototype.extensionSource = function extensionSource () {
	        return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
	    };
	
	    return EREntry;
	}(SystemUseEntry));
	/**
	 * @hidden
	 */
	var ESEntry = (function (SystemUseEntry) {
	    function ESEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) ESEntry.__proto__ = SystemUseEntry;
	    ESEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    ESEntry.prototype.constructor = ESEntry;
	    ESEntry.prototype.extensionSequence = function extensionSequence () {
	        return this._data[4];
	    };
	
	    return ESEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Marks that RockRidge is in use [deprecated]
	 * @hidden
	 */
	var RREntry = (function (SystemUseEntry) {
	    function RREntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) RREntry.__proto__ = SystemUseEntry;
	    RREntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    RREntry.prototype.constructor = RREntry;
	
	    return RREntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records POSIX file attributes.
	 * @hidden
	 */
	var PXEntry = (function (SystemUseEntry) {
	    function PXEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PXEntry.__proto__ = SystemUseEntry;
	    PXEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PXEntry.prototype.constructor = PXEntry;
	    PXEntry.prototype.mode = function mode () {
	        return this._data.readUInt32LE(4);
	    };
	    PXEntry.prototype.fileLinks = function fileLinks () {
	        return this._data.readUInt32LE(12);
	    };
	    PXEntry.prototype.uid = function uid () {
	        return this._data.readUInt32LE(20);
	    };
	    PXEntry.prototype.gid = function gid () {
	        return this._data.readUInt32LE(28);
	    };
	    PXEntry.prototype.inode = function inode () {
	        return this._data.readUInt32LE(36);
	    };
	
	    return PXEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records POSIX device number.
	 * @hidden
	 */
	var PNEntry = (function (SystemUseEntry) {
	    function PNEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PNEntry.__proto__ = SystemUseEntry;
	    PNEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PNEntry.prototype.constructor = PNEntry;
	    PNEntry.prototype.devTHigh = function devTHigh () {
	        return this._data.readUInt32LE(4);
	    };
	    PNEntry.prototype.devTLow = function devTLow () {
	        return this._data.readUInt32LE(12);
	    };
	
	    return PNEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records symbolic link
	 * @hidden
	 */
	var SLEntry = (function (SystemUseEntry) {
	    function SLEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) SLEntry.__proto__ = SystemUseEntry;
	    SLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    SLEntry.prototype.constructor = SLEntry;
	    SLEntry.prototype.flags = function flags () {
	        return this._data[4];
	    };
	    SLEntry.prototype.continueFlag = function continueFlag () {
	        return this.flags() & 0x1;
	    };
	    SLEntry.prototype.componentRecords = function componentRecords () {
	        var this$1 = this;
	
	        var records = new Array();
	        var i = 5;
	        while (i < this.length()) {
	            var record = new SLComponentRecord(this$1._data.slice(i));
	            records.push(record);
	            i += record.length();
	        }
	        return records;
	    };
	
	    return SLEntry;
	}(SystemUseEntry));
	/**
	 * @hidden
	 */
	var SLComponentRecord = function SLComponentRecord(data) {
	    this._data = data;
	};
	SLComponentRecord.prototype.flags = function flags () {
	    return this._data[0];
	};
	SLComponentRecord.prototype.length = function length () {
	    return 2 + this.componentLength();
	};
	SLComponentRecord.prototype.componentLength = function componentLength () {
	    return this._data[1];
	};
	SLComponentRecord.prototype.content = function content (getString) {
	    return getString(this._data, 2, this.componentLength());
	};
	/**
	 * RockRidge: Records alternate file name
	 * @hidden
	 */
	var NMEntry = (function (SystemUseEntry) {
	    function NMEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) NMEntry.__proto__ = SystemUseEntry;
	    NMEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    NMEntry.prototype.constructor = NMEntry;
	    NMEntry.prototype.flags = function flags () {
	        return this._data[4];
	    };
	    NMEntry.prototype.name = function name (getString) {
	        return getString(this._data, 5, this.length() - 5);
	    };
	
	    return NMEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records child link
	 * @hidden
	 */
	var CLEntry = (function (SystemUseEntry) {
	    function CLEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) CLEntry.__proto__ = SystemUseEntry;
	    CLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    CLEntry.prototype.constructor = CLEntry;
	    CLEntry.prototype.childDirectoryLba = function childDirectoryLba () {
	        return this._data.readUInt32LE(4);
	    };
	
	    return CLEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records parent link.
	 * @hidden
	 */
	var PLEntry = (function (SystemUseEntry) {
	    function PLEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) PLEntry.__proto__ = SystemUseEntry;
	    PLEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    PLEntry.prototype.constructor = PLEntry;
	    PLEntry.prototype.parentDirectoryLba = function parentDirectoryLba () {
	        return this._data.readUInt32LE(4);
	    };
	
	    return PLEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records relocated directory.
	 * @hidden
	 */
	var REEntry = (function (SystemUseEntry) {
	    function REEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) REEntry.__proto__ = SystemUseEntry;
	    REEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    REEntry.prototype.constructor = REEntry;
	
	    return REEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: Records file timestamps
	 * @hidden
	 */
	var TFEntry = (function (SystemUseEntry) {
	    function TFEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) TFEntry.__proto__ = SystemUseEntry;
	    TFEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    TFEntry.prototype.constructor = TFEntry;
	    TFEntry.prototype.flags = function flags () {
	        return this._data[4];
	    };
	    TFEntry.prototype.creation = function creation () {
	        if (this.flags() & 1 /* CREATION */) {
	            if (this._longFormDates()) {
	                return getDate(this._data, 5);
	            }
	            else {
	                return getShortFormDate(this._data, 5);
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.modify = function modify () {
	        if (this.flags() & 2 /* MODIFY */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.access = function access () {
	        if (this.flags() & 4 /* ACCESS */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.backup = function backup () {
	        if (this.flags() & 16 /* BACKUP */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.expiration = function expiration () {
	        if (this.flags() & 32 /* EXPIRATION */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
	            previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype.effective = function effective () {
	        if (this.flags() & 64 /* EFFECTIVE */) {
	            var previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;
	            previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;
	            previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;
	            previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;
	            previousDates += (this.flags() & 32 /* EXPIRATION */) ? 1 : 0;
	            if (this._longFormDates) {
	                return getDate(this._data, 5 + (previousDates * 17));
	            }
	            else {
	                return getShortFormDate(this._data, 5 + (previousDates * 7));
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    TFEntry.prototype._longFormDates = function _longFormDates () {
	        return !!(this.flags() && 128 /* LONG_FORM */);
	    };
	
	    return TFEntry;
	}(SystemUseEntry));
	/**
	 * RockRidge: File data in sparse format.
	 * @hidden
	 */
	var SFEntry = (function (SystemUseEntry) {
	    function SFEntry(data) {
	        SystemUseEntry.call(this, data);
	    }
	
	    if ( SystemUseEntry ) SFEntry.__proto__ = SystemUseEntry;
	    SFEntry.prototype = Object.create( SystemUseEntry && SystemUseEntry.prototype );
	    SFEntry.prototype.constructor = SFEntry;
	    SFEntry.prototype.virtualSizeHigh = function virtualSizeHigh () {
	        return this._data.readUInt32LE(4);
	    };
	    SFEntry.prototype.virtualSizeLow = function virtualSizeLow () {
	        return this._data.readUInt32LE(12);
	    };
	    SFEntry.prototype.tableDepth = function tableDepth () {
	        return this._data[20];
	    };
	
	    return SFEntry;
	}(SystemUseEntry));
	/**
	 * @hidden
	 */
	var Directory = function Directory(record, isoData) {
	    var this$1 = this;
	
	    this._fileList = [];
	    this._fileMap = {};
	    this._record = record;
	    var i = record.lba();
	    var iLimit = i + record.dataLength();
	    if (!(record.fileFlags() & 2 /* Directory */)) {
	        // Must have a CL entry.
	        var cl = record.getSUEntries(isoData).filter(function (e) { return e instanceof CLEntry; })[0];
	        i = cl.childDirectoryLba() * 2048;
	        iLimit = Infinity;
	    }
	    while (i < iLimit) {
	        var len = isoData[i];
	        // Zero-padding between sectors.
	        // TODO: Could optimize this to seek to nearest-sector upon
	        // seeing a 0.
	        if (len === 0) {
	            i++;
	            continue;
	        }
	        var r = this$1._constructDirectoryRecord(isoData.slice(i));
	        var fname = r.fileName(isoData);
	        // Skip '.' and '..' entries.
	        if (fname !== '\u0000' && fname !== '\u0001') {
	            // Skip relocated entries.
	            if (!r.hasRockRidge() || r.getSUEntries(isoData).filter(function (e) { return e instanceof REEntry; }).length === 0) {
	                this$1._fileMap[fname] = r;
	                this$1._fileList.push(fname);
	            }
	        }
	        else if (iLimit === Infinity) {
	            // First entry contains needed data.
	            iLimit = i + r.dataLength();
	        }
	        i += r.length();
	    }
	};
	/**
	 * Get the record with the given name.
	 * Returns undefined if not present.
	 */
	Directory.prototype.getRecord = function getRecord (name) {
	    return this._fileMap[name];
	};
	Directory.prototype.getFileList = function getFileList () {
	    return this._fileList;
	};
	Directory.prototype.getDotEntry = function getDotEntry (isoData) {
	    return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
	};
	/**
	 * @hidden
	 */
	var ISODirectory = (function (Directory) {
	    function ISODirectory(record, isoData) {
	        Directory.call(this, record, isoData);
	    }
	
	    if ( Directory ) ISODirectory.__proto__ = Directory;
	    ISODirectory.prototype = Object.create( Directory && Directory.prototype );
	    ISODirectory.prototype.constructor = ISODirectory;
	    ISODirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord (data) {
	        return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
	    };
	
	    return ISODirectory;
	}(Directory));
	/**
	 * @hidden
	 */
	var JolietDirectory = (function (Directory) {
	    function JolietDirectory(record, isoData) {
	        Directory.call(this, record, isoData);
	    }
	
	    if ( Directory ) JolietDirectory.__proto__ = Directory;
	    JolietDirectory.prototype = Object.create( Directory && Directory.prototype );
	    JolietDirectory.prototype.constructor = JolietDirectory;
	    JolietDirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord (data) {
	        return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
	    };
	
	    return JolietDirectory;
	}(Directory));
	/**
	 * Mounts an ISO file as a read-only file system.
	 *
	 * Supports:
	 * * Vanilla ISO9660 ISOs
	 * * Microsoft Joliet and Rock Ridge extensions to the ISO9660 standard
	 */
	var IsoFS = (function (SynchronousFileSystem$$1) {
	    function IsoFS(data, name, deprecateMsg) {
	        var this$1 = this;
	        if ( name === void 0 ) name = "";
	        if ( deprecateMsg === void 0 ) deprecateMsg = true;
	
	        SynchronousFileSystem$$1.call(this);
	        this._data = data;
	        deprecationMessage(deprecateMsg, IsoFS.Name, { data: "ISO data as a Buffer", name: name });
	        // Skip first 16 sectors.
	        var vdTerminatorFound = false;
	        var i = 16 * 2048;
	        var candidateVDs = new Array();
	        while (!vdTerminatorFound) {
	            var slice = data.slice(i);
	            var vd = new VolumeDescriptor(slice);
	            switch (vd.type()) {
	                case 1 /* PrimaryVolumeDescriptor */:
	                    candidateVDs.push(new PrimaryVolumeDescriptor(slice));
	                    break;
	                case 2 /* SupplementaryVolumeDescriptor */:
	                    candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
	                    break;
	                case 255 /* VolumeDescriptorSetTerminator */:
	                    vdTerminatorFound = true;
	                    break;
	            }
	            i += 2048;
	        }
	        if (candidateVDs.length === 0) {
	            throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
	        }
	        candidateVDs.forEach(function (v) {
	            // Take an SVD over a PVD.
	            if (!this$1._pvd || this$1._pvd.type() !== 2 /* SupplementaryVolumeDescriptor */) {
	                this$1._pvd = v;
	            }
	        });
	        this._root = this._pvd.rootDirectoryEntry(data);
	        this._name = name;
	    }
	
	    if ( SynchronousFileSystem$$1 ) IsoFS.__proto__ = SynchronousFileSystem$$1;
	    IsoFS.prototype = Object.create( SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype );
	    IsoFS.prototype.constructor = IsoFS;
	    /**
	     * Creates an IsoFS instance with the given options.
	     */
	    IsoFS.Create = function Create (opts, cb) {
	        var fs;
	        var e;
	        try {
	            fs = new IsoFS(opts.data, opts.name, false);
	        }
	        catch (e) {
	            e = e;
	        }
	        finally {
	            cb(e, fs);
	        }
	    };
	    IsoFS.isAvailable = function isAvailable () {
	        return true;
	    };
	    IsoFS.prototype.getName = function getName () {
	        var name = "IsoFS" + (this._name) + (this._pvd ? ("-" + (this._pvd.name())) : '');
	        if (this._root && this._root.hasRockRidge()) {
	            name += "-RockRidge";
	        }
	        return name;
	    };
	    IsoFS.prototype.diskSpace = function diskSpace (path$$1, cb) {
	        // Read-only file system.
	        cb(this._data.length, 0);
	    };
	    IsoFS.prototype.isReadOnly = function isReadOnly () {
	        return true;
	    };
	    IsoFS.prototype.supportsLinks = function supportsLinks () {
	        return false;
	    };
	    IsoFS.prototype.supportsProps = function supportsProps () {
	        return false;
	    };
	    IsoFS.prototype.supportsSynch = function supportsSynch () {
	        return true;
	    };
	    IsoFS.prototype.statSync = function statSync (p, isLstat) {
	        var record = this._getDirectoryRecord(p);
	        if (record === null) {
	            throw ApiError.ENOENT(p);
	        }
	        return this._getStats(p, record);
	    };
	    IsoFS.prototype.openSync = function openSync (p, flags, mode) {
	        // INVARIANT: Cannot write to RO file systems.
	        if (flags.isWriteable()) {
	            throw new ApiError(ErrorCode.EPERM, p);
	        }
	        // Check if the path exists, and is a file.
	        var record = this._getDirectoryRecord(p);
	        if (!record) {
	            throw ApiError.ENOENT(p);
	        }
	        else if (record.isSymlink(this._data)) {
	            return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
	        }
	        else if (!record.isDirectory(this._data)) {
	            var data = record.getFile(this._data);
	            var stats = this._getStats(p, record);
	            switch (flags.pathExistsAction()) {
	                case ActionType.THROW_EXCEPTION:
	                case ActionType.TRUNCATE_FILE:
	                    throw ApiError.EEXIST(p);
	                case ActionType.NOP:
	                    return new NoSyncFile(this, p, flags, stats, data);
	                default:
	                    throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
	            }
	        }
	        else {
	            throw ApiError.EISDIR(p);
	        }
	    };
	    IsoFS.prototype.readdirSync = function readdirSync (path$$1) {
	        // Check if it exists.
	        var record = this._getDirectoryRecord(path$$1);
	        if (!record) {
	            throw ApiError.ENOENT(path$$1);
	        }
	        else if (record.isDirectory(this._data)) {
	            return record.getDirectory(this._data).getFileList().slice(0);
	        }
	        else {
	            throw ApiError.ENOTDIR(path$$1);
	        }
	    };
	    /**
	     * Specially-optimized readfile.
	     */
	    IsoFS.prototype.readFileSync = function readFileSync (fname, encoding, flag) {
	        // Get file.
	        var fd = this.openSync(fname, flag, 0x1a4);
	        try {
	            var fdCast = fd;
	            var fdBuff = fdCast.getBuffer();
	            if (encoding === null) {
	                return copyingSlice(fdBuff);
	            }
	            return fdBuff.toString(encoding);
	        }
	        finally {
	            fd.closeSync();
	        }
	    };
	    IsoFS.prototype._getDirectoryRecord = function _getDirectoryRecord (path$$1) {
	        var this$1 = this;
	
	        // Special case.
	        if (path$$1 === '/') {
	            return this._root;
	        }
	        var components = path$$1.split('/').slice(1);
	        var dir = this._root;
	        for (var i = 0, list = components; i < list.length; i += 1) {
	            var component = list[i];
	
	            if (dir.isDirectory(this$1._data)) {
	                dir = dir.getDirectory(this$1._data).getRecord(component);
	                if (!dir) {
	                    return null;
	                }
	            }
	            else {
	                return null;
	            }
	        }
	        return dir;
	    };
	    IsoFS.prototype._getStats = function _getStats (p, record) {
	        if (record.isSymlink(this._data)) {
	            var newP = path.resolve(p, record.getSymlinkPath(this._data));
	            var dirRec = this._getDirectoryRecord(newP);
	            if (!dirRec) {
	                return null;
	            }
	            return this._getStats(newP, dirRec);
	        }
	        else {
	            var len = record.dataLength();
	            var mode = 0x16D;
	            var date = record.recordingDate();
	            var atime = date;
	            var mtime = date;
	            var ctime = date;
	            if (record.hasRockRidge()) {
	                var entries = record.getSUEntries(this._data);
	                for (var i = 0, list = entries; i < list.length; i += 1) {
	                    var entry = list[i];
	
	                    if (entry instanceof PXEntry) {
	                        mode = entry.mode();
	                    }
	                    else if (entry instanceof TFEntry) {
	                        var flags = entry.flags();
	                        if (flags & 4 /* ACCESS */) {
	                            atime = entry.access();
	                        }
	                        if (flags & 2 /* MODIFY */) {
	                            mtime = entry.modify();
	                        }
	                        if (flags & 1 /* CREATION */) {
	                            ctime = entry.creation();
	                        }
	                    }
	                }
	            }
	            // Mask out writeable flags. This is a RO file system.
	            mode = mode & 0x16D;
	            return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
	        }
	    };
	
	    return IsoFS;
	}(SynchronousFileSystem));
	
	IsoFS.Name = "IsoFS";
	IsoFS.Options = {
	    data: {
	        type: "object",
	        description: "The ISO file in a buffer",
	        validator: bufferValidator
	    }
	};
	
	// Monkey-patch `Create` functions to check options before file system initialization.
	[AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function (fsType) {
	    var create = fsType.Create;
	    fsType.Create = function (opts, cb) {
	        var oneArg = typeof (opts) === "function";
	        var normalizedCb = oneArg ? opts : cb;
	        var normalizedOpts = oneArg ? {} : opts;
	        function wrappedCb(e) {
	            if (e) {
	                normalizedCb(e);
	            }
	            else {
	                create.call(fsType, normalizedOpts, normalizedCb);
	            }
	        }
	        checkOptions(fsType, normalizedOpts, wrappedCb);
	    };
	});
	/**
	 * @hidden
	 */
	var Backends = { AsyncMirror: AsyncMirror, Dropbox: DropboxFileSystem, Emscripten: EmscriptenFileSystem, FolderAdapter: FolderAdapter, HTML5FS: HTML5FS, InMemory: InMemoryFileSystem, IndexedDB: IndexedDBFileSystem, IsoFS: IsoFS, LocalStorage: LocalStorageFileSystem, MountableFileSystem: MountableFileSystem, OverlayFS: OverlayFS, WorkerFS: WorkerFS, XmlHttpRequest: XmlHttpRequest, ZipFS: ZipFS };
	
	/**
	 * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
	 * Due to limitations in typedoc, we document these functions in ./typedoc.ts.
	 */
	if (process['initializeTTYs']) {
	    process['initializeTTYs']();
	}
	/**
	 * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,
	 * and a Node process polyfill as the global `process` variable.
	 */
	function install(obj) {
	    obj.Buffer = Buffer;
	    obj.process = process;
	    var oldRequire = obj.require ? obj.require : null;
	    // Monkey-patch require for Node-style code.
	    obj.require = function (arg) {
	        var rv = BFSRequire(arg);
	        if (!rv) {
	            return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
	        }
	        else {
	            return rv;
	        }
	    };
	}
	/**
	 * @hidden
	 */
	function registerFileSystem(name, fs) {
	    Backends[name] = fs;
	}
	function BFSRequire(module) {
	    switch (module) {
	        case 'fs':
	            return _fsMock;
	        case 'path':
	            return path;
	        case 'buffer':
	            // The 'buffer' module has 'Buffer' as a property.
	            return buffer;
	        case 'process':
	            return process;
	        case 'bfs_utils':
	            return BFSUtils;
	        default:
	            return Backends[module];
	    }
	}
	/**
	 * Initializes BrowserFS with the given root file system.
	 */
	function initialize(rootfs) {
	    return _fsMock.initialize(rootfs);
	}
	/**
	 * Creates a file system with the given configuration, and initializes BrowserFS with it.
	 * See the FileSystemConfiguration type for more info on the configuration object.
	 */
	function configure(config, cb) {
	    getFileSystem(config, function (e, fs) {
	        if (fs) {
	            initialize(fs);
	            cb();
	        }
	        else {
	            cb(e);
	        }
	    });
	}
	/**
	 * Retrieve a file system with the given configuration.
	 * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.
	 * @param cb Called when the file system is constructed, or when an error occurs.
	 */
	function getFileSystem(config, cb) {
	    var fsName = config['fs'];
	    if (!fsName) {
	        return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
	    }
	    var options = config['options'];
	    var waitCount = 0;
	    var called = false;
	    function finish() {
	        if (!called) {
	            called = true;
	            var fsc = Backends[fsName];
	            if (!fsc) {
	                cb(new ApiError(ErrorCode.EPERM, ("File system " + fsName + " is not available in BrowserFS.")));
	            }
	            else {
	                fsc.Create(options, cb);
	            }
	        }
	    }
	    if (options !== null && typeof (options) === "object") {
	        var finishedIterating = false;
	        var props = Object.keys(options).filter(function (k) { return k !== 'fs'; });
	        // Check recursively if other fields have 'fs' properties.
	        props.forEach(function (p) {
	            var d = options[p];
	            if (d !== null && typeof (d) === "object" && d['fs']) {
	                waitCount++;
	                getFileSystem(d, function (e, fs) {
	                    waitCount--;
	                    if (e) {
	                        if (called) {
	                            return;
	                        }
	                        called = true;
	                        cb(e);
	                    }
	                    else {
	                        options[p] = fs;
	                        if (waitCount === 0 && finishedIterating) {
	                            finish();
	                        }
	                    }
	                });
	            }
	        });
	        finishedIterating = true;
	    }
	    if (waitCount === 0) {
	        finish();
	    }
	}
	
	/**
	 * BrowserFS's main entry point.
	 * It installs all of the needed polyfills, and requires() the main module.
	 */
	// IE substr does not support negative indices
	if (false) {}
	// Polyfill for Uint8Array.prototype.slice.
	// Safari and some other browsers do not define it.
	if (typeof (ArrayBuffer) !== 'undefined' && typeof (Uint8Array) !== 'undefined') {
	    if (!Uint8Array.prototype['slice']) {
	        Uint8Array.prototype.slice = function (start, end) {
	            if ( start === void 0 ) start = 0;
	            if ( end === void 0 ) end = this.length;
	
	            var self = this;
	            if (start < 0) {
	                start = this.length + start;
	                if (start < 0) {
	                    start = 0;
	                }
	            }
	            if (end < 0) {
	                end = this.length + end;
	                if (end < 0) {
	                    end = 0;
	                }
	            }
	            if (end < start) {
	                end = start;
	            }
	            return new Uint8Array(self.buffer, self.byteOffset + start, end - start);
	        };
	    }
	}
	
	exports.install = install;
	exports.registerFileSystem = registerFileSystem;
	exports.BFSRequire = BFSRequire;
	exports.initialize = initialize;
	exports.configure = configure;
	exports.getFileSystem = getFileSystem;
	exports.EmscriptenFS = BFSEmscriptenFS;
	exports.FileSystem = Backends;
	exports.Errors = api_error;
	exports.setImmediate = setImmediate$3;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_1821__(1), (function() { return this; }()), __nested_webpack_require_1821__(5)(module), __nested_webpack_require_1821__(6)))

/***/ },
/* 1 */
/***/ function(module, exports, __nested_webpack_require_568393__) {

	module.exports = __nested_webpack_require_568393__(2).Buffer;


/***/ },
/* 2 */
/***/ function(module, exports, __nested_webpack_require_568517__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __nested_webpack_require_568517__(3)
	var ieee754 = __nested_webpack_require_568517__(4)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	var K_MAX_LENGTH = 0x7fffffff
	exports.kMaxLength = K_MAX_LENGTH
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
	
	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	  console.error(
	    'This browser lacks typed array (Uint8Array) support which is required by ' +
	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  )
	}
	
	function typedArraySupport () {
	  // Can typed array instances can be augmented?
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}
	
	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
	    throw new RangeError('Invalid typed array length')
	  }
	  // Return an augmented `Uint8Array` instance
	  var buf = new Uint8Array(length)
	  buf.__proto__ = Buffer.prototype
	  return buf
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}
	
	// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	if (typeof Symbol !== 'undefined' && Symbol.species &&
	    Buffer[Symbol.species] === Buffer) {
	  Object.defineProperty(Buffer, Symbol.species, {
	    value: null,
	    configurable: true,
	    enumerable: false,
	    writable: false
	  })
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (isArrayBuffer(value)) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset)
	  }
	
	  return fromObject(value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	}
	
	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Buffer.prototype.__proto__ = Uint8Array.prototype
	Buffer.__proto__ = Uint8Array
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(size).fill(fill, encoding)
	      : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	}
	
	function allocUnsafe (size) {
	  assertSize(size)
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	}
	
	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  var buf = createBuffer(length)
	
	  var actual = buf.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    buf = buf.slice(0, actual)
	  }
	
	  return buf
	}
	
	function fromArrayLike (array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  var buf = createBuffer(length)
	  for (var i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255
	  }
	  return buf
	}
	
	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  var buf
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array)
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset)
	  } else {
	    buf = new Uint8Array(array, byteOffset, length)
	  }
	
	  // Return an augmented `Uint8Array` instance
	  buf.__proto__ = Buffer.prototype
	  return buf
	}
	
	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    var buf = createBuffer(len)
	
	    if (buf.length === 0) {
	      return buf
	    }
	
	    obj.copy(buf, 0, 0, len)
	    return buf
	  }
	
	  if (obj) {
	    if (isArrayBufferView(obj) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	        return createBuffer(0)
	      }
	      return fromArrayLike(obj)
	    }
	
	    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	      return fromArrayLike(obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (isArrayBufferView(string) || isArrayBuffer(string)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (numberIsNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (numberIsNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset >>> 0
	    if (isFinite(length)) {
	      length = length >>> 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf = this.subarray(start, end)
	  // Return an augmented `Uint8Array` instance
	  newBuf.__proto__ = Buffer.prototype
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  this[offset] = (value >>> 8)
	  this[offset + 1] = (value & 0xff)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  this[offset + 3] = (value >>> 24)
	  this[offset + 2] = (value >>> 16)
	  this[offset + 1] = (value >>> 8)
	  this[offset] = (value & 0xff)
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  this[offset] = (value >>> 24)
	  this[offset + 1] = (value >>> 16)
	  this[offset + 2] = (value >>> 8)
	  this[offset + 3] = (value & 0xff)
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    var limit = Math.pow(2, (8 * byteLength) - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  this[offset] = (value >>> 8)
	  this[offset + 1] = (value & 0xff)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  this[offset + 2] = (value >>> 16)
	  this[offset + 3] = (value >>> 24)
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  this[offset] = (value >>> 24)
	  this[offset + 1] = (value >>> 16)
	  this[offset + 2] = (value >>> 8)
	  this[offset + 3] = (value & 0xff)
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : new Buffer(val, encoding)
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = str.trim().replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
	// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
	function isArrayBuffer (obj) {
	  return obj instanceof ArrayBuffer ||
	    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
	      typeof obj.byteLength === 'number')
	}
	
	// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
	function isArrayBufferView (obj) {
	  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
	}
	
	function numberIsNaN (obj) {
	  return obj !== obj // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_568517__(1)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 4 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 6 */
/***/ function(module, exports, __nested_webpack_require_623092__) {

	"use strict";
	var Process = __nested_webpack_require_623092__(7);
	var process = new Process(), processProxy = {};
	function defineKey(key) {
	    if (processProxy[key]) {
	        // Probably a builtin Object property we don't care about.
	        return;
	    }
	    if (typeof process[key] === 'function') {
	        processProxy[key] = function () {
	            return process[key].apply(process, arguments);
	        };
	    }
	    else {
	        processProxy[key] = process[key];
	    }
	}
	for (var key in process) {
	    // Don't check if process.hasOwnProperty; we want to also expose objects
	    // up the prototype hierarchy.
	    defineKey(key);
	}
	// Special key: Ensure we update public-facing values of stdin/stdout/stderr.
	processProxy.initializeTTYs = function () {
	    if (process.stdin === null) {
	        process.initializeTTYs();
	        processProxy.stdin = process.stdin;
	        processProxy.stdout = process.stdout;
	        processProxy.stderr = process.stderr;
	    }
	};
	process.nextTick(function () {
	    processProxy.initializeTTYs();
	});
	module.exports = processProxy;


/***/ },
/* 7 */
/***/ function(module, exports, __nested_webpack_require_624268__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var events = __nested_webpack_require_624268__(8);
	// Path depends on process. Avoid a circular reference by dynamically including path when we need it.
	var path = null;
	var Item = (function () {
	    function Item(fun, array) {
	        this.fun = fun;
	        this.array = array;
	    }
	    Item.prototype.run = function () {
	        this.fun.apply(null, this.array);
	    };
	    return Item;
	}());
	/**
	 * Contains a queue of Items for process.nextTick.
	 * Inspired by node-process: https://github.com/defunctzombie/node-process
	 */
	var NextTickQueue = (function () {
	    function NextTickQueue() {
	        this._queue = [];
	        this._draining = false;
	        // Used/assigned by the drainQueue function.
	        this._currentQueue = null;
	        this._queueIndex = -1;
	    }
	    NextTickQueue.prototype.push = function (item) {
	        var _this = this;
	        if (this._queue.push(item) === 1 && !this._draining) {
	            setTimeout(function () { return _this._drainQueue(); }, 0);
	        }
	    };
	    NextTickQueue.prototype._cleanUpNextTick = function () {
	        this._draining = false;
	        if (this._currentQueue && this._currentQueue.length) {
	            this._queue = this._currentQueue.concat(this._queue);
	        }
	        else {
	            this._queueIndex = -1;
	        }
	        if (this._queue.length) {
	            this._drainQueue();
	        }
	    };
	    NextTickQueue.prototype._drainQueue = function () {
	        var _this = this;
	        if (this._draining) {
	            return;
	        }
	        // If an Item throws an unhandled exception, this function will clean things up.
	        var timeout = setTimeout(function () { return _this._cleanUpNextTick(); });
	        this._draining = true;
	        var len = this._queue.length;
	        while (len) {
	            this._currentQueue = this._queue;
	            this._queue = [];
	            while (++this._queueIndex < len) {
	                if (this._currentQueue) {
	                    this._currentQueue[this._queueIndex].run();
	                }
	            }
	            this._queueIndex = -1;
	            len = this._queue.length;
	        }
	        this._currentQueue = null;
	        this._draining = false;
	        clearTimeout(timeout);
	    };
	    return NextTickQueue;
	}());
	/**
	 * Partial implementation of Node's `process` module.
	 * We implement the portions that are relevant for the filesystem.
	 * @see http://nodejs.org/api/process.html
	 * @class
	 */
	var Process = (function (_super) {
	    __extends(Process, _super);
	    function Process() {
	        _super.apply(this, arguments);
	        this.startTime = Date.now();
	        this._cwd = '/';
	        /**
	         * Returns what platform you are running on.
	         * @return [String]
	         */
	        this.platform = 'browser';
	        this.argv = [];
	        this.execArgv = [];
	        this.stdout = null;
	        this.stderr = null;
	        this.stdin = null;
	        this.domain = null;
	        this._queue = new NextTickQueue();
	        this.execPath = __dirname;
	        this.env = {};
	        this.exitCode = 0;
	        this._gid = 1;
	        this._uid = 1;
	        this.version = 'v5.0';
	        this.versions = {
	            http_parser: '0.0',
	            node: '5.0',
	            v8: '0.0',
	            uv: '0.0',
	            zlib: '0.0',
	            ares: '0.0',
	            icu: '0.0',
	            modules: '0',
	            openssl: '0.0'
	        };
	        this.config = {
	            target_defaults: { cflags: [],
	                default_configuration: 'Release',
	                defines: [],
	                include_dirs: [],
	                libraries: [] },
	            variables: { clang: 0,
	                host_arch: 'x32',
	                node_install_npm: false,
	                node_install_waf: false,
	                node_prefix: '',
	                node_shared_cares: false,
	                node_shared_http_parser: false,
	                node_shared_libuv: false,
	                node_shared_zlib: false,
	                node_shared_v8: false,
	                node_use_dtrace: false,
	                node_use_etw: false,
	                node_use_openssl: false,
	                node_shared_openssl: false,
	                strict_aliasing: false,
	                target_arch: 'x32',
	                v8_use_snapshot: false,
	                v8_no_strict_aliasing: 0,
	                visibility: '' } };
	        this.pid = (Math.random() * 1000) | 0;
	        this.title = 'node';
	        this.arch = 'x32';
	        this._mask = 18;
	        // Undefined in main thread. Worker-only.
	        this.connected = undefined;
	    }
	    /**
	     * Changes the current working directory.
	     *
	     * **Note**: BrowserFS does not validate that the directory actually exists.
	     *
	     * @example Usage example
	     *   console.log('Starting directory: ' + process.cwd());
	     *   process.chdir('/tmp');
	     *   console.log('New directory: ' + process.cwd());
	     * @param [String] dir The directory to change to.
	     */
	    Process.prototype.chdir = function (dir) {
	        // XXX: Circular dependency hack.
	        if (path === null) {
	            path = __nested_webpack_require_624268__(9);
	        }
	        this._cwd = path.resolve(dir);
	    };
	    /**
	     * Returns the current working directory.
	     * @example Usage example
	     *   console.log('Current directory: ' + process.cwd());
	     * @return [String] The current working directory.
	     */
	    Process.prototype.cwd = function () {
	        return this._cwd;
	    };
	    /**
	     * Number of seconds BrowserFS has been running.
	     * @return [Number]
	     */
	    Process.prototype.uptime = function () {
	        return ((Date.now() - this.startTime) / 1000) | 0;
	    };
	    Process.prototype.nextTick = function (fun) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        this._queue.push(new Item(fun, args));
	    };
	    Process.prototype.abort = function () {
	        this.emit('abort');
	    };
	    Process.prototype.exit = function (code) {
	        this.exitCode = code;
	        this.emit('exit', [code]);
	    };
	    Process.prototype.getgid = function () {
	        return this._gid;
	    };
	    Process.prototype.setgid = function (gid) {
	        if (typeof gid === 'number') {
	            this._gid = gid;
	        }
	        else {
	            this._gid = 1;
	        }
	    };
	    Process.prototype.getuid = function () {
	        return this._uid;
	    };
	    Process.prototype.setuid = function (uid) {
	        if (typeof uid === 'number') {
	            this._uid = uid;
	        }
	        else {
	            this._uid = 1;
	        }
	    };
	    Process.prototype.kill = function (pid, signal) {
	        this.emit('kill', [pid, signal]);
	    };
	    Process.prototype.memoryUsage = function () {
	        return { rss: 0, heapTotal: 0, heapUsed: 0 };
	    };
	    Process.prototype.umask = function (mask) {
	        if (mask === void 0) { mask = this._mask; }
	        var oldMask = this._mask;
	        this._mask = mask;
	        this.emit('umask', [mask]);
	        return oldMask;
	    };
	    Process.prototype.hrtime = function () {
	        var timeinfo;
	        if (typeof performance !== 'undefined') {
	            timeinfo = performance.now();
	        }
	        else if (Date['now']) {
	            timeinfo = Date.now();
	        }
	        else {
	            timeinfo = (new Date()).getTime();
	        }
	        var secs = (timeinfo / 1000) | 0;
	        timeinfo -= secs * 1000;
	        timeinfo = (timeinfo * 1000000) | 0;
	        return [secs, timeinfo];
	    };
	    /**
	     * [BFS only] Initialize the TTY devices.
	     */
	    Process.prototype.initializeTTYs = function () {
	        // Guard against multiple invocations.
	        if (this.stdout === null) {
	            var TTY = __nested_webpack_require_624268__(10);
	            this.stdout = new TTY();
	            this.stderr = new TTY();
	            this.stdin = new TTY();
	        }
	    };
	    /**
	     * Worker-only function; irrelevant here.
	     */
	    Process.prototype.disconnect = function () {
	    };
	    return Process;
	}(events.EventEmitter));
	module.exports = Process;
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 8 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 9 */
/***/ function(module, exports, __nested_webpack_require_641797__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	function posixSplitPath(filename) {
	    var out = splitPathRe.exec(filename);
	    out.shift();
	    return out;
	}
	/**
	 * Emulates Node's `path` module. This module contains utilities for handling and
	 * transforming file paths. **All** of these methods perform only string
	 * transformations. The file system is not consulted to check whether paths are
	 * valid.
	 * @see http://nodejs.org/api/path.html
	 * @class
	 */
	var path = (function () {
	    function path() {
	    }
	    /**
	     * Normalize a string path, taking care of '..' and '.' parts.
	     *
	     * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
	     * @example Usage example
	     *   path.normalize('/foo/bar//baz/asdf/quux/..')
	     *   // returns
	     *   '/foo/bar/baz/asdf'
	     * @param [String] p The path to normalize.
	     * @return [String]
	     */
	    path.normalize = function (p) {
	        // Special case: '' -> '.'
	        if (p === '') {
	            p = '.';
	        }
	        // It's very important to know if the path is relative or not, since it
	        // changes how we process .. and reconstruct the split string.
	        var absolute = p.charAt(0) === path.sep;
	        // Remove repeated //s
	        p = path._removeDuplicateSeps(p);
	        // Try to remove as many '../' as possible, and remove '.' completely.
	        var components = p.split(path.sep);
	        var goodComponents = [];
	        for (var idx = 0; idx < components.length; idx++) {
	            var c = components[idx];
	            if (c === '.') {
	                continue;
	            }
	            else if (c === '..' && (absolute || (!absolute && goodComponents.length > 0 && goodComponents[0] !== '..'))) {
	                // In the absolute case: Path is relative to root, so we may pop even if
	                // goodComponents is empty (e.g. /../ => /)
	                // In the relative case: We're getting rid of a directory that preceded
	                // it (e.g. /foo/../bar -> /bar)
	                goodComponents.pop();
	            }
	            else {
	                goodComponents.push(c);
	            }
	        }
	        // Add in '.' when it's a relative path with no other nonempty components.
	        // Possible results: '.' and './' (input: [''] or [])
	        // @todo Can probably simplify this logic.
	        if (!absolute && goodComponents.length < 2) {
	            switch (goodComponents.length) {
	                case 1:
	                    if (goodComponents[0] === '') {
	                        goodComponents.unshift('.');
	                    }
	                    break;
	                default:
	                    goodComponents.push('.');
	            }
	        }
	        p = goodComponents.join(path.sep);
	        if (absolute && p.charAt(0) !== path.sep) {
	            p = path.sep + p;
	        }
	        return p;
	    };
	    /**
	     * Join all arguments together and normalize the resulting path.
	     *
	     * Arguments must be strings.
	     * @example Usage
	     *   path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
	     *   // returns
	     *   '/foo/bar/baz/asdf'
	     *
	     *   path.join('foo', {}, 'bar')
	     *   // throws exception
	     *   TypeError: Arguments to path.join must be strings
	     * @param [String,...] paths Each component of the path
	     * @return [String]
	     */
	    path.join = function () {
	        var paths = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            paths[_i - 0] = arguments[_i];
	        }
	        // Required: Prune any non-strings from the path. I also prune empty segments
	        // so we can do a simple join of the array.
	        var processed = [];
	        for (var i = 0; i < paths.length; i++) {
	            var segment = paths[i];
	            if (typeof segment !== 'string') {
	                throw new TypeError("Invalid argument type to path.join: " + (typeof segment));
	            }
	            else if (segment !== '') {
	                processed.push(segment);
	            }
	        }
	        return path.normalize(processed.join(path.sep));
	    };
	    /**
	     * Resolves to to an absolute path.
	     *
	     * If to isn't already absolute from arguments are prepended in right to left
	     * order, until an absolute path is found. If after using all from paths still
	     * no absolute path is found, the current working directory is used as well.
	     * The resulting path is normalized, and trailing slashes are removed unless
	     * the path gets resolved to the root directory. Non-string arguments are
	     * ignored.
	     *
	     * Another way to think of it is as a sequence of cd commands in a shell.
	     *
	     *     path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')
	     *
	     * Is similar to:
	     *
	     *     cd foo/bar
	     *     cd /tmp/file/
	     *     cd ..
	     *     cd a/../subfile
	     *     pwd
	     *
	     * The difference is that the different paths don't need to exist and may also
	     * be files.
	     * @example Usage example
	     *   path.resolve('/foo/bar', './baz')
	     *   // returns
	     *   '/foo/bar/baz'
	     *
	     *   path.resolve('/foo/bar', '/tmp/file/')
	     *   // returns
	     *   '/tmp/file'
	     *
	     *   path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')
	     *   // if currently in /home/myself/node, it returns
	     *   '/home/myself/node/wwwroot/static_files/gif/image.gif'
	     * @param [String,...] paths
	     * @return [String]
	     */
	    path.resolve = function () {
	        var paths = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            paths[_i - 0] = arguments[_i];
	        }
	        // Monitor for invalid paths, throw out empty paths, and look for the *last*
	        // absolute path that we see.
	        var processed = [];
	        for (var i = 0; i < paths.length; i++) {
	            var p = paths[i];
	            if (typeof p !== 'string') {
	                throw new TypeError("Invalid argument type to path.join: " + (typeof p));
	            }
	            else if (p !== '') {
	                // Remove anything that has occurred before this absolute path, as it
	                // doesn't matter.
	                if (p.charAt(0) === path.sep) {
	                    processed = [];
	                }
	                processed.push(p);
	            }
	        }
	        // Special: Remove trailing slash unless it's the root
	        var resolved = path.normalize(processed.join(path.sep));
	        if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path.sep) {
	            return resolved.substr(0, resolved.length - 1);
	        }
	        // Special: If it doesn't start with '/', it's relative and we need to append
	        // the current directory.
	        if (resolved.charAt(0) !== path.sep) {
	            // Remove ./, since we're going to append the current directory.
	            if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === path.sep)) {
	                resolved = resolved.length === 1 ? '' : resolved.substr(2);
	            }
	            // Append the current directory, which *must* be an absolute path.
	            var cwd = process.cwd();
	            if (resolved !== '') {
	                // cwd will never end in a /... unless it's the root.
	                resolved = this.normalize(cwd + (cwd !== '/' ? path.sep : '') + resolved);
	            }
	            else {
	                resolved = cwd;
	            }
	        }
	        return resolved;
	    };
	    /**
	     * Solve the relative path from from to to.
	     *
	     * At times we have two absolute paths, and we need to derive the relative path
	     * from one to the other. This is actually the reverse transform of
	     * path.resolve, which means we see that:
	     *
	     *    path.resolve(from, path.relative(from, to)) == path.resolve(to)
	     *
	     * @example Usage example
	     *   path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb')
	     *   // returns
	     *   '..\\..\\impl\\bbb'
	     *
	     *   path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
	     *   // returns
	     *   '../../impl/bbb'
	     * @param [String] from
	     * @param [String] to
	     * @return [String]
	     */
	    path.relative = function (from, to) {
	        var i;
	        // Alright. Let's resolve these two to absolute paths and remove any
	        // weirdness.
	        from = path.resolve(from);
	        to = path.resolve(to);
	        var fromSegs = from.split(path.sep);
	        var toSegs = to.split(path.sep);
	        // Remove the first segment on both, as it's '' (both are absolute paths)
	        toSegs.shift();
	        fromSegs.shift();
	        // There are two segments to this path:
	        // * Going *up* the directory hierarchy with '..'
	        // * Going *down* the directory hierarchy with foo/baz/bat.
	        var upCount = 0;
	        var downSegs = [];
	        // Figure out how many things in 'from' are shared with 'to'.
	        for (i = 0; i < fromSegs.length; i++) {
	            var seg = fromSegs[i];
	            if (seg === toSegs[i]) {
	                continue;
	            }
	            // The rest of 'from', including the current element, indicates how many
	            // directories we need to go up.
	            upCount = fromSegs.length - i;
	            break;
	        }
	        // The rest of 'to' indicates where we need to change to. We place this
	        // outside of the loop, as toSegs.length may be greater than fromSegs.length.
	        downSegs = toSegs.slice(i);
	        // Special case: If 'from' is '/'
	        if (fromSegs.length === 1 && fromSegs[0] === '') {
	            upCount = 0;
	        }
	        // upCount can't be greater than the number of fromSegs
	        // (cd .. from / is still /)
	        if (upCount > fromSegs.length) {
	            upCount = fromSegs.length;
	        }
	        // Create the final string!
	        var rv = '';
	        for (i = 0; i < upCount; i++) {
	            rv += '../';
	        }
	        rv += downSegs.join(path.sep);
	        // Special case: Remove trailing '/'. Happens if it's all up and no down.
	        if (rv.length > 1 && rv.charAt(rv.length - 1) === path.sep) {
	            rv = rv.substr(0, rv.length - 1);
	        }
	        return rv;
	    };
	    /**
	     * Return the directory name of a path. Similar to the Unix `dirname` command.
	     *
	     * Note that BrowserFS does not validate if the path is actually a valid
	     * directory.
	     * @example Usage example
	     *   path.dirname('/foo/bar/baz/asdf/quux')
	     *   // returns
	     *   '/foo/bar/baz/asdf'
	     * @param [String] p The path to get the directory name of.
	     * @return [String]
	     */
	    path.dirname = function (p) {
	        // We get rid of //, but we don't modify anything else (e.g. any extraneous .
	        // and ../ are kept intact)
	        p = path._removeDuplicateSeps(p);
	        var absolute = p.charAt(0) === path.sep;
	        var sections = p.split(path.sep);
	        // Do 1 if it's /foo/bar, 2 if it's /foo/bar/
	        if (sections.pop() === '' && sections.length > 0) {
	            sections.pop();
	        }
	        // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.
	        // If not absolute, the first section is the first part of the path, and is OK
	        // to return.
	        if (sections.length > 1 || (sections.length === 1 && !absolute)) {
	            return sections.join(path.sep);
	        }
	        else if (absolute) {
	            return path.sep;
	        }
	        else {
	            return '.';
	        }
	    };
	    /**
	     * Return the last portion of a path. Similar to the Unix basename command.
	     * @example Usage example
	     *   path.basename('/foo/bar/baz/asdf/quux.html')
	     *   // returns
	     *   'quux.html'
	     *
	     *   path.basename('/foo/bar/baz/asdf/quux.html', '.html')
	     *   // returns
	     *   'quux'
	     * @param [String] p
	     * @param [String?] ext
	     * @return [String]
	     */
	    path.basename = function (p, ext) {
	        if (ext === void 0) { ext = ""; }
	        // Special case: Normalize will modify this to '.'
	        if (p === '') {
	            return p;
	        }
	        // Normalize the string first to remove any weirdness.
	        p = path.normalize(p);
	        // Get the last part of the string.
	        var sections = p.split(path.sep);
	        var lastPart = sections[sections.length - 1];
	        // Special case: If it's empty, then we have a string like so: foo/
	        // Meaning, 'foo' is guaranteed to be a directory.
	        if (lastPart === '' && sections.length > 1) {
	            return sections[sections.length - 2];
	        }
	        // Remove the extension, if need be.
	        if (ext.length > 0) {
	            var lastPartExt = lastPart.substr(lastPart.length - ext.length);
	            if (lastPartExt === ext) {
	                return lastPart.substr(0, lastPart.length - ext.length);
	            }
	        }
	        return lastPart;
	    };
	    /**
	     * Return the extension of the path, from the last '.' to end of string in the
	     * last portion of the path. If there is no '.' in the last portion of the path
	     * or the first character of it is '.', then it returns an empty string.
	     * @example Usage example
	     *   path.extname('index.html')
	     *   // returns
	     *   '.html'
	     *
	     *   path.extname('index.')
	     *   // returns
	     *   '.'
	     *
	     *   path.extname('index')
	     *   // returns
	     *   ''
	     * @param [String] p
	     * @return [String]
	     */
	    path.extname = function (p) {
	        p = path.normalize(p);
	        var sections = p.split(path.sep);
	        p = sections.pop();
	        // Special case: foo/file.ext/ should return '.ext'
	        if (p === '' && sections.length > 0) {
	            p = sections.pop();
	        }
	        if (p === '..') {
	            return '';
	        }
	        var i = p.lastIndexOf('.');
	        if (i === -1 || i === 0) {
	            return '';
	        }
	        return p.substr(i);
	    };
	    /**
	     * Checks if the given path is an absolute path.
	     *
	     * Despite not being documented, this is a tested part of Node's path API.
	     * @param [String] p
	     * @return [Boolean] True if the path appears to be an absolute path.
	     */
	    path.isAbsolute = function (p) {
	        return p.length > 0 && p.charAt(0) === path.sep;
	    };
	    /**
	     * Unknown. Undocumented.
	     */
	    path._makeLong = function (p) {
	        return p;
	    };
	    /**
	     * Returns an object from a path string.
	     */
	    path.parse = function (p) {
	        var allParts = posixSplitPath(p);
	        return {
	            root: allParts[0],
	            dir: allParts[0] + allParts[1].slice(0, -1),
	            base: allParts[2],
	            ext: allParts[3],
	            name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
	        };
	    };
	    path.format = function (pathObject) {
	        if (pathObject === null || typeof pathObject !== 'object') {
	            throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
	        }
	        var root = pathObject.root || '';
	        if (typeof root !== 'string') {
	            throw new TypeError("'pathObject.root' must be a string or undefined, not " +
	                typeof pathObject.root);
	        }
	        var dir = pathObject.dir ? pathObject.dir + path.sep : '';
	        var base = pathObject.base || '';
	        return dir + base;
	    };
	    path._removeDuplicateSeps = function (p) {
	        p = p.replace(this._replaceRegex, this.sep);
	        return p;
	    };
	    // The platform-specific file separator. BrowserFS uses `/`.
	    path.sep = '/';
	    path._replaceRegex = new RegExp("//+", 'g');
	    // The platform-specific path delimiter. BrowserFS uses `:`.
	    path.delimiter = ':';
	    path.posix = path;
	    // XXX: Typing hack. We don't actually support win32.
	    path.win32 = path;
	    return path;
	}());
	var _ = path;
	module.exports = path;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_641797__(6)))

/***/ },
/* 10 */
/***/ function(module, exports, __nested_webpack_require_658622__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var stream = __nested_webpack_require_658622__(11);
	var TTY = (function (_super) {
	    __extends(TTY, _super);
	    function TTY() {
	        _super.call(this);
	        this.isRaw = false;
	        this.columns = 80;
	        this.rows = 120;
	        this.isTTY = true;
	        this._bufferedWrites = [];
	        this._waitingForWrites = false;
	    }
	    /**
	     * Toggle raw mode.
	     */
	    TTY.prototype.setRawMode = function (mode) {
	        if (this.isRaw !== mode) {
	            this.isRaw = mode;
	            // [BFS] TTY implementations can use this to change their event emitting
	            //       patterns.
	            this.emit('modeChange');
	        }
	    };
	    /**
	     * [BFS] Update the number of columns available on the terminal.
	     */
	    TTY.prototype.changeColumns = function (columns) {
	        if (columns !== this.columns) {
	            this.columns = columns;
	            // Resize event.
	            this.emit('resize');
	        }
	    };
	    /**
	     * [BFS] Update the number of rows available on the terminal.
	     */
	    TTY.prototype.changeRows = function (rows) {
	        if (rows !== this.rows) {
	            this.rows = rows;
	            // Resize event.
	            this.emit('resize');
	        }
	    };
	    /**
	     * Returns 'true' if the given object is a TTY.
	     */
	    TTY.isatty = function (fd) {
	        return fd && fd instanceof TTY;
	    };
	    TTY.prototype._write = function (chunk, encoding, cb) {
	        var error;
	        try {
	            var data;
	            if (typeof (chunk) === 'string') {
	                data = new Buffer(chunk, encoding);
	            }
	            else {
	                data = chunk;
	            }
	            this._bufferedWrites.push(data);
	            if (this._waitingForWrites) {
	                this._read(1024);
	            }
	        }
	        catch (e) {
	            error = e;
	        }
	        finally {
	            cb(error);
	        }
	    };
	    TTY.prototype._read = function (size) {
	        // Size is advisory -- we can ignore it.
	        if (this._bufferedWrites.length === 0) {
	            this._waitingForWrites = true;
	        }
	        else {
	            while (this._bufferedWrites.length > 0) {
	                this._waitingForWrites = this.push(this._bufferedWrites.shift());
	                if (!this._waitingForWrites) {
	                    break;
	                }
	            }
	        }
	    };
	    return TTY;
	}(stream.Duplex));
	module.exports = TTY;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_658622__(1)))

/***/ },
/* 11 */
/***/ function(module, exports, __nested_webpack_require_661628__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __nested_webpack_require_661628__(8).EventEmitter;
	var inherits = __nested_webpack_require_661628__(12);
	
	inherits(Stream, EE);
	Stream.Readable = __nested_webpack_require_661628__(13);
	Stream.Writable = __nested_webpack_require_661628__(27);
	Stream.Duplex = __nested_webpack_require_661628__(28);
	Stream.Transform = __nested_webpack_require_661628__(29);
	Stream.PassThrough = __nested_webpack_require_661628__(30);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 12 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 13 */
/***/ function(module, exports, __nested_webpack_require_666140__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __nested_webpack_require_666140__(11); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __nested_webpack_require_666140__(14);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __nested_webpack_require_666140__(22);
	exports.Duplex = __nested_webpack_require_666140__(21);
	exports.Transform = __nested_webpack_require_666140__(25);
	exports.PassThrough = __nested_webpack_require_666140__(26);
	
	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_666140__(6)))

/***/ },
/* 14 */
/***/ function(module, exports, __nested_webpack_require_666913__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __nested_webpack_require_666913__(15);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __nested_webpack_require_666913__(16);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __nested_webpack_require_666913__(8).EventEmitter;
	
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __nested_webpack_require_666913__(11);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __nested_webpack_require_666913__(8).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __nested_webpack_require_666913__(2).Buffer;
	/*<replacement>*/
	var bufferShim = __nested_webpack_require_666913__(17);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __nested_webpack_require_666913__(18);
	util.inherits = __nested_webpack_require_666913__(12);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __nested_webpack_require_666913__(19);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var BufferList = __nested_webpack_require_666913__(20);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __nested_webpack_require_666913__(21);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __nested_webpack_require_666913__(24).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __nested_webpack_require_666913__(21);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __nested_webpack_require_666913__(24).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_666913__(6)))

/***/ },
/* 15 */
/***/ function(module, exports, __nested_webpack_require_696299__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_696299__(6)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 17 */
/***/ function(module, exports, __nested_webpack_require_697767__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __nested_webpack_require_697767__(2);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 18 */
/***/ function(module, exports, __nested_webpack_require_701312__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_701312__(1)))

/***/ },
/* 19 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 20 */
/***/ function(module, exports, __nested_webpack_require_704703__) {

	'use strict';
	
	var Buffer = __nested_webpack_require_704703__(2).Buffer;
	/*<replacement>*/
	var bufferShim = __nested_webpack_require_704703__(17);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 21 */
/***/ function(module, exports, __nested_webpack_require_706306__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __nested_webpack_require_706306__(15);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __nested_webpack_require_706306__(18);
	util.inherits = __nested_webpack_require_706306__(12);
	/*</replacement>*/
	
	var Readable = __nested_webpack_require_706306__(14);
	var Writable = __nested_webpack_require_706306__(22);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 22 */
/***/ function(module, exports, __nested_webpack_require_708289__) {

	/* WEBPACK VAR INJECTION */(function(process) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __nested_webpack_require_708289__(15);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __nested_webpack_require_708289__(18);
	util.inherits = __nested_webpack_require_708289__(12);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __nested_webpack_require_708289__(23)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __nested_webpack_require_708289__(11);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __nested_webpack_require_708289__(8).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __nested_webpack_require_708289__(2).Buffer;
	/*<replacement>*/
	var bufferShim = __nested_webpack_require_708289__(17);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __nested_webpack_require_708289__(21);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __nested_webpack_require_708289__(21);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = Buffer.isBuffer(chunk);
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    chunk = decodeChunk(state, chunk, encoding);
	    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_708289__(6)))

/***/ },
/* 23 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 24 */
/***/ function(module, exports, __nested_webpack_require_726764__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __nested_webpack_require_726764__(2).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 25 */
/***/ function(module, exports, __nested_webpack_require_734862__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __nested_webpack_require_734862__(21);
	
	/*<replacement>*/
	var util = __nested_webpack_require_734862__(18);
	util.inherits = __nested_webpack_require_734862__(12);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ },
/* 26 */
/***/ function(module, exports, __nested_webpack_require_741571__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __nested_webpack_require_741571__(25);
	
	/*<replacement>*/
	var util = __nested_webpack_require_741571__(18);
	util.inherits = __nested_webpack_require_741571__(12);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 27 */
/***/ function(module, exports, __nested_webpack_require_742274__) {

	module.exports = __nested_webpack_require_742274__(22)


/***/ },
/* 28 */
/***/ function(module, exports, __nested_webpack_require_742392__) {

	module.exports = __nested_webpack_require_742392__(21)


/***/ },
/* 29 */
/***/ function(module, exports, __nested_webpack_require_742510__) {

	module.exports = __nested_webpack_require_742510__(25)


/***/ },
/* 30 */
/***/ function(module, exports, __nested_webpack_require_742628__) {

	module.exports = __nested_webpack_require_742628__(26)


/***/ },
/* 31 */
/***/ function(module, exports, __nested_webpack_require_742746__) {

	'use strict';
	
	
	var zlib_inflate = __nested_webpack_require_742746__(32);
	var utils        = __nested_webpack_require_742746__(33);
	var strings      = __nested_webpack_require_742746__(38);
	var c            = __nested_webpack_require_742746__(39);
	var msg          = __nested_webpack_require_742746__(40);
	var ZStream      = __nested_webpack_require_742746__(41);
	var GZheader     = __nested_webpack_require_742746__(42);
	
	var toString = Object.prototype.toString;
	
	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/
	
	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overriden.
	 **/
	
	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/
	
	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/
	
	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/
	
	
	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);
	
	  this.options = utils.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});
	
	  var opt = this.options;
	
	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }
	
	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }
	
	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }
	
	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data
	
	  this.strm   = new ZStream();
	  this.strm.avail_out = 0;
	
	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );
	
	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }
	
	  this.header = new GZheader();
	
	  zlib_inflate.inflateGetHeader(this.strm, this.header);
	}
	
	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;
	  var dict;
	
	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;
	
	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);
	
	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }
	
	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;
	
	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	
	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */
	
	    if (status === c.Z_NEED_DICT && dictionary) {
	      // Convert data if needed
	      if (typeof dictionary === 'string') {
	        dict = strings.string2buf(dictionary);
	      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
	        dict = new Uint8Array(dictionary);
	      } else {
	        dict = dictionary;
	      }
	
	      status = zlib_inflate.inflateSetDictionary(this.strm, dict);
	
	    }
	
	    if (status === c.Z_BUF_ERROR && allowBufError === true) {
	      status = c.Z_OK;
	      allowBufError = false;
	    }
	
	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	
	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {
	
	        if (this.options.to === 'string') {
	
	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
	
	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);
	
	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }
	
	          this.onData(utf8str);
	
	        } else {
	          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }
	
	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }
	
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
	
	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }
	
	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }
	
	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === c.Z_SYNC_FLUSH) {
	    this.onEnd(c.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }
	
	  return true;
	};
	
	
	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};
	
	
	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 alligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};
	
	
	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);
	
	  inflator.push(input, true);
	
	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }
	
	  return inflator.result;
	}
	
	
	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}
	
	
	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/
	
	
	exports.Inflate = Inflate;
	exports.inflate = inflate;
	exports.inflateRaw = inflateRaw;
	exports.ungzip  = inflate;


/***/ },
/* 32 */
/***/ function(module, exports, __nested_webpack_require_755379__) {

	'use strict';
	
	
	var utils         = __nested_webpack_require_755379__(33);
	var adler32       = __nested_webpack_require_755379__(34);
	var crc32         = __nested_webpack_require_755379__(35);
	var inflate_fast  = __nested_webpack_require_755379__(36);
	var inflate_table = __nested_webpack_require_755379__(37);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;
	
	/* The deflate compression method */
	var Z_DEFLATED  = 8;
	
	
	/* STATES ====================================================================*/
	/* ===========================================================================*/
	
	
	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
	
	/* ===========================================================================*/
	
	
	
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
	
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;
	
	
	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}
	
	
	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */
	
	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */
	
	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */
	
	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */
	
	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */
	
	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */
	
	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */
	
	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */
	
	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}
	
	function inflateResetKeep(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
	
	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}
	
	function inflateReset(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);
	
	}
	
	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;
	
	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }
	
	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }
	
	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}
	
	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;
	
	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */
	
	  state = new InflateState();
	
	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}
	
	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}
	
	
	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;
	
	var lenfix, distfix; // We have no pointers in JS, so keep tables separate
	
	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;
	
	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);
	
	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }
	
	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
	
	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }
	
	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
	
	    /* do this just once */
	    virgin = false;
	  }
	
	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}
	
	
	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.
	
	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;
	
	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;
	
	    state.window = new utils.Buf8(state.wsize);
	  }
	
	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}
	
	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;
	
	  var n; // temporary var for NEED_BITS
	
	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
	
	
	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }
	
	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */
	
	
	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---
	
	  _in = have;
	  _out = left;
	  ret = Z_OK;
	
	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//
	
	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;
	
	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }
	
	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }
	
	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }
	
	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }
	
	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---
	
	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
	
	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }
	
	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
	
	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */
	
	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---
	
	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}
	
	function inflateEnd(strm) {
	
	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}
	
	function inflateGetHeader(strm, head) {
	  var state;
	
	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
	
	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}
	
	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var state;
	  var dictid;
	  var ret;
	
	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}
	
	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';
	
	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';
	
	
	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');
	
	
	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }
	
	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }
	
	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }
	
	  return obj;
	};
	
	
	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};
	
	
	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;
	
	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }
	
	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }
	
	    return result;
	  }
	};
	
	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};
	
	
	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};
	
	exports.setTyped(TYPED_OK);


/***/ },
/* 34 */
/***/ function(module, exports) {

	'use strict';
	
	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.
	
	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;
	
	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;
	
	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);
	
	    s1 %= 65521;
	    s2 %= 65521;
	  }
	
	  return (s1 | (s2 << 16)) |0;
	}
	
	
	module.exports = adler32;


/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.
	
	
	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];
	
	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }
	
	  return table;
	}
	
	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();
	
	
	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;
	
	  crc ^= -1;
	
	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }
	
	  return (crc ^ (-1)); // >>> 0;
	}
	
	
	module.exports = crc32;


/***/ },
/* 36 */
/***/ function(module, exports) {

	'use strict';
	
	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	
	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.
	
	   Entry assumptions:
	
	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8
	
	   On return, state.mode is one of:
	
	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data
	
	   Notes:
	
	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.
	
	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;
	
	
	  var input, output; // JS specific, because we have no pointers
	
	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;
	
	
	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */
	
	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }
	
	    here = lcode[hold & lmask];
	
	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];
	
	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;
	
	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }
	
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }
	
	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }
	
	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);
	
	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;
	
	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 37 */
/***/ function(module, exports, __nested_webpack_require_820647__) {

	'use strict';
	
	
	var utils = __nested_webpack_require_820647__(33);
	
	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];
	
	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];
	
	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];
	
	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];
	
	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */
	
	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;
	
	  var here_bits, here_op, here_val;
	
	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.
	
	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.
	
	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.
	
	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */
	
	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }
	
	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	
	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }
	
	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }
	
	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }
	
	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }
	
	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.
	
	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.
	
	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.
	
	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.
	
	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */
	
	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;
	
	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;
	
	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }
	
	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */
	
	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }
	
	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }
	
	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);
	
	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }
	
	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }
	
	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }
	
	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */
	
	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }
	
	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }
	
	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }
	
	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }
	
	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 38 */
/***/ function(module, exports, __nested_webpack_require_832585__) {

	// String encode/decode helpers
	'use strict';
	
	
	var utils = __nested_webpack_require_832585__(33);
	
	
	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safary
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;
	
	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }
	
	
	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils.Buf8(256);
	for (var q = 0; q < 256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
	
	
	// convert string to array (typed, when possible)
	exports.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
	
	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }
	
	  // allocate buffer
	  buf = new utils.Buf8(buf_len);
	
	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }
	
	  return buf;
	};
	
	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
	    }
	  }
	
	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}
	
	
	// Convert byte array to binary string
	exports.buf2binstring = function (buf) {
	  return buf2binstring(buf, buf.length);
	};
	
	
	// Convert binary string (typed, when possible)
	exports.binstring2buf = function (str) {
	  var buf = new utils.Buf8(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};
	
	
	// convert array to string
	exports.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;
	
	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);
	
	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }
	
	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }
	
	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }
	
	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
	
	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }
	
	  return buf2binstring(utf16buf, out);
	};
	
	
	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	exports.utf8border = function (buf, max) {
	  var pos;
	
	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }
	
	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
	
	  // Fuckup - very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }
	
	  // If we came to start of buffer - that means vuffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }
	
	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};


/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict';
	
	
	module.exports = {
	
	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,
	
	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,
	
	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,
	
	
	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,
	
	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,
	
	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 40 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';
	
	
	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}
	
	module.exports = ZStream;


/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';
	
	
	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications
	
	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //
	
	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}
	
	module.exports = GZheader;


/***/ }
/******/ ])
});
;
//# sourceMappingURL=browserfs.js.map

/***/ }),

/***/ "./node_modules/jquery-powertip/dist/jquery.powertip.js":
/*!**************************************************************!*\
  !*** ./node_modules/jquery-powertip/dist/jquery.powertip.js ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 PowerTip v1.3.1 (2018-04-15)
 https://stevenbenner.github.io/jquery-powertip/
 Copyright (c) 2018 Steven Benner (http://stevenbenner.com/).
 Released under MIT license.
 https://raw.github.com/stevenbenner/jquery-powertip/master/LICENSE.txt
*/
(function(root, factory) {
	// support loading the plugin via common patterns
	if (true) {
		// load the plugin as an amd module
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}(this, function($) {
	// useful private variables
	var $document = $(document),
		$window = $(window),
		$body = $('body');

	// constants
	var DATA_DISPLAYCONTROLLER = 'displayController',
		DATA_HASACTIVEHOVER = 'hasActiveHover',
		DATA_FORCEDOPEN = 'forcedOpen',
		DATA_HASMOUSEMOVE = 'hasMouseMove',
		DATA_MOUSEONTOTIP = 'mouseOnToPopup',
		DATA_ORIGINALTITLE = 'originalTitle',
		DATA_POWERTIP = 'powertip',
		DATA_POWERTIPJQ = 'powertipjq',
		DATA_POWERTIPTARGET = 'powertiptarget',
		EVENT_NAMESPACE = '.powertip',
		RAD2DEG = 180 / Math.PI,
		MOUSE_EVENTS = [
			'click',
			'dblclick',
			'mousedown',
			'mouseup',
			'mousemove',
			'mouseover',
			'mouseout',
			'mouseenter',
			'mouseleave',
			'contextmenu'
		];

	/**
	 * Session data
	 * Private properties global to all powerTip instances
	 */
	var session = {
		elements: null,
		tooltips: null,
		isTipOpen: false,
		isFixedTipOpen: false,
		isClosing: false,
		tipOpenImminent: false,
		activeHover: null,
		currentX: 0,
		currentY: 0,
		previousX: 0,
		previousY: 0,
		desyncTimeout: null,
		closeDelayTimeout: null,
		mouseTrackingActive: false,
		delayInProgress: false,
		windowWidth: 0,
		windowHeight: 0,
		scrollTop: 0,
		scrollLeft: 0
	};

	/**
	 * Collision enumeration
	 * @enum {number}
	 */
	var Collision = {
		none: 0,
		top: 1,
		bottom: 2,
		left: 4,
		right: 8
	};

	/**
	 * Display hover tooltips on the matched elements.
	 * @param {(Object|string)=} opts The options object to use for the plugin, or
	 *     the name of a method to invoke on the first matched element.
	 * @param {*=} [arg] Argument for an invoked method (optional).
	 * @return {jQuery} jQuery object for the matched selectors.
	 */
	$.fn.powerTip = function(opts, arg) {
		var targetElements = this,
			options,
			tipController;

		// don't do any work if there were no matched elements
		if (!targetElements.length) {
			return targetElements;
		}

		// handle api method calls on the plugin, e.g. powerTip('hide')
		if ($.type(opts) === 'string' && $.powerTip[opts]) {
			return $.powerTip[opts].call(targetElements, targetElements, arg);
		}

		// extend options
		options = $.extend({}, $.fn.powerTip.defaults, opts);

		// handle repeated powerTip calls on the same element by destroying any
		// original instance hooked to it and replacing it with this call
		$.powerTip.destroy(targetElements);

		// instantiate the TooltipController for this instance
		tipController = new TooltipController(options);

		// hook mouse and viewport dimension tracking
		initTracking();

		// setup the elements
		targetElements.each(function elementSetup() {
			var $this = $(this),
				dataPowertip = $this.data(DATA_POWERTIP),
				dataElem = $this.data(DATA_POWERTIPJQ),
				dataTarget = $this.data(DATA_POWERTIPTARGET),
				title = $this.attr('title');

			// attempt to use title attribute text if there is no data-powertip,
			// data-powertipjq or data-powertiptarget. If we do use the title
			// attribute, delete the attribute so the browser will not show it
			if (!dataPowertip && !dataTarget && !dataElem && title) {
				$this.data(DATA_POWERTIP, title);
				$this.data(DATA_ORIGINALTITLE, title);
				$this.removeAttr('title');
			}

			// create hover controllers for each element
			$this.data(
				DATA_DISPLAYCONTROLLER,
				new DisplayController($this, options, tipController)
			);
		});

		// attach events to matched elements if the manual option is not enabled
		if (!options.manual) {
			// attach open events
			$.each(options.openEvents, function(idx, evt) {
				if ($.inArray(evt, options.closeEvents) > -1) {
					// event is in both openEvents and closeEvents, so toggle it
					targetElements.on(evt + EVENT_NAMESPACE, function elementToggle(event) {
						$.powerTip.toggle(this, event);
					});
				} else {
					targetElements.on(evt + EVENT_NAMESPACE, function elementOpen(event) {
						$.powerTip.show(this, event);
					});
				}
			});

			// attach close events
			$.each(options.closeEvents, function(idx, evt) {
				if ($.inArray(evt, options.openEvents) < 0) {
					targetElements.on(evt + EVENT_NAMESPACE, function elementClose(event) {
						// set immediate to true for any event without mouse info
						$.powerTip.hide(this, !isMouseEvent(event));
					});
				}
			});

			// attach escape key close event
			targetElements.on('keydown' + EVENT_NAMESPACE, function elementKeyDown(event) {
				// always close tooltip when the escape key is pressed
				if (event.keyCode === 27) {
					$.powerTip.hide(this, true);
				}
			});
		}

		// remember elements that the plugin is attached to
		session.elements = session.elements ? session.elements.add(targetElements) : targetElements;

		return targetElements;
	};

	/**
	 * Default options for the powerTip plugin.
	 */
	$.fn.powerTip.defaults = {
		fadeInTime: 200,
		fadeOutTime: 100,
		followMouse: false,
		popupId: 'powerTip',
		popupClass: null,
		intentSensitivity: 7,
		intentPollInterval: 100,
		closeDelay: 100,
		placement: 'n',
		smartPlacement: false,
		offset: 10,
		mouseOnToPopup: false,
		manual: false,
		openEvents: [ 'mouseenter', 'focus' ],
		closeEvents: [ 'mouseleave', 'blur' ]
	};

	/**
	 * Default smart placement priority lists.
	 * The first item in the array is the highest priority, the last is the lowest.
	 * The last item is also the default, which will be used if all previous options
	 * do not fit.
	 */
	$.fn.powerTip.smartPlacementLists = {
		n: [ 'n', 'ne', 'nw', 's' ],
		e: [ 'e', 'ne', 'se', 'w', 'nw', 'sw', 'n', 's', 'e' ],
		s: [ 's', 'se', 'sw', 'n' ],
		w: [ 'w', 'nw', 'sw', 'e', 'ne', 'se', 'n', 's', 'w' ],
		nw: [ 'nw', 'w', 'sw', 'n', 's', 'se', 'nw' ],
		ne: [ 'ne', 'e', 'se', 'n', 's', 'sw', 'ne' ],
		sw: [ 'sw', 'w', 'nw', 's', 'n', 'ne', 'sw' ],
		se: [ 'se', 'e', 'ne', 's', 'n', 'nw', 'se' ],
		'nw-alt': [ 'nw-alt', 'n', 'ne-alt', 'sw-alt', 's', 'se-alt', 'w', 'e' ],
		'ne-alt': [ 'ne-alt', 'n', 'nw-alt', 'se-alt', 's', 'sw-alt', 'e', 'w' ],
		'sw-alt': [ 'sw-alt', 's', 'se-alt', 'nw-alt', 'n', 'ne-alt', 'w', 'e' ],
		'se-alt': [ 'se-alt', 's', 'sw-alt', 'ne-alt', 'n', 'nw-alt', 'e', 'w' ]
	};

	/**
	 * Public API
	 */
	$.powerTip = {
		/**
		 * Attempts to show the tooltip for the specified element.
		 * @param {jQuery|Element} element The element to open the tooltip for.
		 * @param {jQuery.Event=} event jQuery event for hover intent and mouse
		 *     tracking (optional).
		 * @return {jQuery|Element} The original jQuery object or DOM Element.
		 */
		show: function apiShowTip(element, event) {
			// if we were given a mouse event then run the hover intent testing,
			// otherwise, simply show the tooltip asap
			if (isMouseEvent(event)) {
				trackMouse(event);
				session.previousX = event.pageX;
				session.previousY = event.pageY;
				$(element).data(DATA_DISPLAYCONTROLLER).show();
			} else {
				$(element).first().data(DATA_DISPLAYCONTROLLER).show(true, true);
			}
			return element;
		},

		/**
		 * Repositions the tooltip on the element.
		 * @param {jQuery|Element} element The element the tooltip is shown for.
		 * @return {jQuery|Element} The original jQuery object or DOM Element.
		 */
		reposition: function apiResetPosition(element) {
			$(element).first().data(DATA_DISPLAYCONTROLLER).resetPosition();
			return element;
		},

		/**
		 * Attempts to close any open tooltips.
		 * @param {(jQuery|Element)=} element The element with the tooltip that
		 *     should be closed (optional).
		 * @param {boolean=} immediate Disable close delay (optional).
		 * @return {jQuery|Element|undefined} The original jQuery object or DOM
		 *     Element, if one was specified.
		 */
		hide: function apiCloseTip(element, immediate) {
			var displayController;

			// set immediate to true when no element is specified
			immediate = element ? immediate : true;

			// find the relevant display controller
			if (element) {
				displayController = $(element).first().data(DATA_DISPLAYCONTROLLER);
			} else if (session.activeHover) {
				displayController = session.activeHover.data(DATA_DISPLAYCONTROLLER);
			}

			// if found, hide the tip
			if (displayController) {
				displayController.hide(immediate);
			}

			return element;
		},

		/**
		 * Toggles the tooltip for the specified element. This will open a closed
		 * tooltip, or close an open tooltip.
		 * @param {jQuery|Element} element The element with the tooltip that
		 *     should be toggled.
		 * @param {jQuery.Event=} event jQuery event for hover intent and mouse
		 *     tracking (optional).
		 * @return {jQuery|Element} The original jQuery object or DOM Element.
		 */
		toggle: function apiToggle(element, event) {
			if (session.activeHover && session.activeHover.is(element)) {
				// tooltip for element is active, so close it
				$.powerTip.hide(element, !isMouseEvent(event));
			} else {
				// tooltip for element is not active, so open it
				$.powerTip.show(element, event);
			}
			return element;
		},

		/**
		 * Destroy and roll back any powerTip() instance on the specified elements.
		 * If no elements are specified then all elements that the plugin is
		 * currently attached to will be rolled back.
		 * @param {(jQuery|Element)=} element The element with the powerTip instance.
		 * @return {jQuery|Element|undefined} The original jQuery object or DOM
		 *     Element, if one was specified.
		 */
		destroy: function apiDestroy(element) {
			var $element = element ? $(element) : session.elements;

			// if the plugin is not hooked to any elements then there is no point
			// trying to destroy anything, or dealing with the possible errors
			if (!session.elements || session.elements.length === 0) {
				return element;
			}

			// if a tooltip is currently open for an element we are being asked to
			// destroy then it should be forced to close
			if (session.isTipOpen && !session.isClosing && $element.filter(session.activeHover).length > 0) {
				// if the tooltip is waiting to close then cancel that delay timer
				if (session.delayInProgress) {
					session.activeHover.data(DATA_DISPLAYCONTROLLER).cancel();
				}
				// hide the tooltip, immediately
				$.powerTip.hide(session.activeHover, true);
			}

			// unhook events and destroy plugin changes to each element
			$element.off(EVENT_NAMESPACE).each(function destroy() {
				var $this = $(this),
					dataAttributes = [
						DATA_ORIGINALTITLE,
						DATA_DISPLAYCONTROLLER,
						DATA_HASACTIVEHOVER,
						DATA_FORCEDOPEN
					];

				// revert title attribute
				if ($this.data(DATA_ORIGINALTITLE)) {
					$this.attr('title', $this.data(DATA_ORIGINALTITLE));
					dataAttributes.push(DATA_POWERTIP);
				}

				// remove data attributes
				$this.removeData(dataAttributes);
			});

			// remove destroyed element from active elements collection
			session.elements = session.elements.not($element);

			// if there are no active elements left then we will unhook all of the
			// events that we've bound code to and remove the tooltip elements
			if (session.elements.length === 0) {
				$window.off(EVENT_NAMESPACE);
				$document.off(EVENT_NAMESPACE);
				session.mouseTrackingActive = false;
				session.tooltips.remove();
				session.tooltips = null;
			}

			return element;
		}
	};

	// API aliasing
	$.powerTip.showTip = $.powerTip.show;
	$.powerTip.closeTip = $.powerTip.hide;

	/**
	 * Creates a new CSSCoordinates object.
	 * @private
	 * @constructor
	 */
	function CSSCoordinates() {
		var me = this;

		// initialize object properties
		me.top = 'auto';
		me.left = 'auto';
		me.right = 'auto';
		me.bottom = 'auto';

		/**
		 * Set a property to a value.
		 * @private
		 * @param {string} property The name of the property.
		 * @param {number} value The value of the property.
		 */
		me.set = function(property, value) {
			if ($.isNumeric(value)) {
				me[property] = Math.round(value);
			}
		};
	}

	/**
	 * Creates a new tooltip display controller.
	 * @private
	 * @constructor
	 * @param {jQuery} element The element that this controller will handle.
	 * @param {Object} options Options object containing settings.
	 * @param {TooltipController} tipController The TooltipController object for
	 *     this instance.
	 */
	function DisplayController(element, options, tipController) {
		var hoverTimer = null,
			myCloseDelay = null;

		/**
		 * Begins the process of showing a tooltip.
		 * @private
		 * @param {boolean=} immediate Skip intent testing (optional).
		 * @param {boolean=} forceOpen Ignore cursor position and force tooltip to
		 *     open (optional).
		 */
		function openTooltip(immediate, forceOpen) {
			cancelTimer();
			if (!element.data(DATA_HASACTIVEHOVER)) {
				if (!immediate) {
					session.tipOpenImminent = true;
					hoverTimer = setTimeout(
						function intentDelay() {
							hoverTimer = null;
							checkForIntent();
						},
						options.intentPollInterval
					);
				} else {
					if (forceOpen) {
						element.data(DATA_FORCEDOPEN, true);
					}
					closeAnyDelayed();
					tipController.showTip(element);
				}
			} else {
				// cursor left and returned to this element, cancel close
				cancelClose();
			}
		}

		/**
		 * Begins the process of closing a tooltip.
		 * @private
		 * @param {boolean=} disableDelay Disable close delay (optional).
		 */
		function closeTooltip(disableDelay) {
			// if this instance already has a close delay in progress then halt it
			if (myCloseDelay) {
				myCloseDelay = session.closeDelayTimeout = clearTimeout(myCloseDelay);
				session.delayInProgress = false;
			}
			cancelTimer();
			session.tipOpenImminent = false;
			if (element.data(DATA_HASACTIVEHOVER)) {
				element.data(DATA_FORCEDOPEN, false);
				if (!disableDelay) {
					session.delayInProgress = true;
					session.closeDelayTimeout = setTimeout(
						function closeDelay() {
							session.closeDelayTimeout = null;
							tipController.hideTip(element);
							session.delayInProgress = false;
							myCloseDelay = null;
						},
						options.closeDelay
					);
					// save internal reference close delay id so we can check if the
					// active close delay belongs to this instance
					myCloseDelay = session.closeDelayTimeout;
				} else {
					tipController.hideTip(element);
				}
			}
		}

		/**
		 * Checks mouse position to make sure that the user intended to hover on the
		 * specified element before showing the tooltip.
		 * @private
		 */
		function checkForIntent() {
			// calculate mouse position difference
			var xDifference = Math.abs(session.previousX - session.currentX),
				yDifference = Math.abs(session.previousY - session.currentY),
				totalDifference = xDifference + yDifference;

			// check if difference has passed the sensitivity threshold
			if (totalDifference < options.intentSensitivity) {
				cancelClose();
				closeAnyDelayed();
				tipController.showTip(element);
			} else {
				// try again
				session.previousX = session.currentX;
				session.previousY = session.currentY;
				openTooltip();
			}
		}

		/**
		 * Cancels active hover timer.
		 * @private
		 * @param {boolean=} stopClose Cancel any active close delay timer.
		 */
		function cancelTimer(stopClose) {
			hoverTimer = clearTimeout(hoverTimer);
			// cancel the current close delay if the active close delay is for this
			// element or the stopClose argument is true
			if (session.closeDelayTimeout && myCloseDelay === session.closeDelayTimeout || stopClose) {
				cancelClose();
			}
		}

		/**
		 * Cancels any active close delay timer.
		 * @private
		 */
		function cancelClose() {
			session.closeDelayTimeout = clearTimeout(session.closeDelayTimeout);
			session.delayInProgress = false;
		}

		/**
		 * Asks any tooltips waiting on their close delay to close now.
		 * @private
		 */
		function closeAnyDelayed() {
			// if another element is waiting for its close delay then we should ask
			// it to close immediately so we can proceed without unexpected timeout
			// code being run during this tooltip's lifecycle
			if (session.delayInProgress && session.activeHover && !session.activeHover.is(element)) {
				session.activeHover.data(DATA_DISPLAYCONTROLLER).hide(true);
			}
		}

		/**
		 * Repositions the tooltip on this element.
		 * @private
		 */
		function repositionTooltip() {
			tipController.resetPosition(element);
		}

		// expose the methods
		this.show = openTooltip;
		this.hide = closeTooltip;
		this.cancel = cancelTimer;
		this.resetPosition = repositionTooltip;
	}

	/**
	 * Creates a new Placement Calculator.
	 * @private
	 * @constructor
	 */
	function PlacementCalculator() {
		/**
		 * Compute the CSS position to display a tooltip at the specified placement
		 * relative to the specified element.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 * @param {string} placement The placement for the tooltip.
		 * @param {number} tipWidth Width of the tooltip element in pixels.
		 * @param {number} tipHeight Height of the tooltip element in pixels.
		 * @param {number} offset Distance to offset tooltips in pixels.
		 * @return {CSSCoordinates} A CSSCoordinates object with the position.
		 */
		function computePlacementCoords(element, placement, tipWidth, tipHeight, offset) {
			var placementBase = placement.split('-')[0], // ignore 'alt' for corners
				coords = new CSSCoordinates(),
				position;

			if (isSvgElement(element)) {
				position = getSvgPlacement(element, placementBase);
			} else {
				position = getHtmlPlacement(element, placementBase);
			}

			// calculate the appropriate x and y position in the document
			switch (placement) {
				case 'n':
					coords.set('left', position.left - (tipWidth / 2));
					coords.set('bottom', session.windowHeight - position.top + offset);
					break;
				case 'e':
					coords.set('left', position.left + offset);
					coords.set('top', position.top - (tipHeight / 2));
					break;
				case 's':
					coords.set('left', position.left - (tipWidth / 2));
					coords.set('top', position.top + offset);
					break;
				case 'w':
					coords.set('top', position.top - (tipHeight / 2));
					coords.set('right', session.windowWidth - position.left + offset);
					break;
				case 'nw':
					coords.set('bottom', session.windowHeight - position.top + offset);
					coords.set('right', session.windowWidth - position.left - 20);
					break;
				case 'nw-alt':
					coords.set('left', position.left);
					coords.set('bottom', session.windowHeight - position.top + offset);
					break;
				case 'ne':
					coords.set('left', position.left - 20);
					coords.set('bottom', session.windowHeight - position.top + offset);
					break;
				case 'ne-alt':
					coords.set('bottom', session.windowHeight - position.top + offset);
					coords.set('right', session.windowWidth - position.left);
					break;
				case 'sw':
					coords.set('top', position.top + offset);
					coords.set('right', session.windowWidth - position.left - 20);
					break;
				case 'sw-alt':
					coords.set('left', position.left);
					coords.set('top', position.top + offset);
					break;
				case 'se':
					coords.set('left', position.left - 20);
					coords.set('top', position.top + offset);
					break;
				case 'se-alt':
					coords.set('top', position.top + offset);
					coords.set('right', session.windowWidth - position.left);
					break;
			}

			return coords;
		}

		/**
		 * Finds the tooltip attachment point in the document for a HTML DOM element
		 * for the specified placement.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 * @param {string} placement The placement for the tooltip.
		 * @return {Object} An object with the top,left position values.
		 */
		function getHtmlPlacement(element, placement) {
			var objectOffset = element.offset(),
				objectWidth = element.outerWidth(),
				objectHeight = element.outerHeight(),
				left,
				top;

			// calculate the appropriate x and y position in the document
			switch (placement) {
				case 'n':
					left = objectOffset.left + objectWidth / 2;
					top = objectOffset.top;
					break;
				case 'e':
					left = objectOffset.left + objectWidth;
					top = objectOffset.top + objectHeight / 2;
					break;
				case 's':
					left = objectOffset.left + objectWidth / 2;
					top = objectOffset.top + objectHeight;
					break;
				case 'w':
					left = objectOffset.left;
					top = objectOffset.top + objectHeight / 2;
					break;
				case 'nw':
					left = objectOffset.left;
					top = objectOffset.top;
					break;
				case 'ne':
					left = objectOffset.left + objectWidth;
					top = objectOffset.top;
					break;
				case 'sw':
					left = objectOffset.left;
					top = objectOffset.top + objectHeight;
					break;
				case 'se':
					left = objectOffset.left + objectWidth;
					top = objectOffset.top + objectHeight;
					break;
			}

			return {
				top: top,
				left: left
			};
		}

		/**
		 * Finds the tooltip attachment point in the document for a SVG element for
		 * the specified placement.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 * @param {string} placement The placement for the tooltip.
		 * @return {Object} An object with the top,left position values.
		 */
		function getSvgPlacement(element, placement) {
			var svgElement = element.closest('svg')[0],
				domElement = element[0],
				point = svgElement.createSVGPoint(),
				boundingBox = domElement.getBBox(),
				matrix = domElement.getScreenCTM(),
				halfWidth = boundingBox.width / 2,
				halfHeight = boundingBox.height / 2,
				placements = [],
				placementKeys = [ 'nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w' ],
				coords,
				rotation,
				steps,
				x;

			/**
			 * Transform and append the current points to the placements list.
			 * @private
			 */
			function pushPlacement() {
				placements.push(point.matrixTransform(matrix));
			}

			// get bounding box corners and midpoints
			point.x = boundingBox.x;
			point.y = boundingBox.y;
			pushPlacement();
			point.x += halfWidth;
			pushPlacement();
			point.x += halfWidth;
			pushPlacement();
			point.y += halfHeight;
			pushPlacement();
			point.y += halfHeight;
			pushPlacement();
			point.x -= halfWidth;
			pushPlacement();
			point.x -= halfWidth;
			pushPlacement();
			point.y -= halfHeight;
			pushPlacement();

			// determine rotation
			if (placements[0].y !== placements[1].y || placements[0].x !== placements[7].x) {
				rotation = Math.atan2(matrix.b, matrix.a) * RAD2DEG;
				steps = Math.ceil(((rotation % 360) - 22.5) / 45);
				if (steps < 1) {
					steps += 8;
				}
				while (steps--) {
					placementKeys.push(placementKeys.shift());
				}
			}

			// find placement
			for (x = 0; x < placements.length; x++) {
				if (placementKeys[x] === placement) {
					coords = placements[x];
					break;
				}
			}

			return {
				top: coords.y + session.scrollTop,
				left: coords.x + session.scrollLeft
			};
		}

		// expose methods
		this.compute = computePlacementCoords;
	}

	/**
	 * Creates a new tooltip controller.
	 * @private
	 * @constructor
	 * @param {Object} options Options object containing settings.
	 */
	function TooltipController(options) {
		var placementCalculator = new PlacementCalculator(),
			tipElement = $('#' + options.popupId);

		// build and append tooltip div if it does not already exist
		if (tipElement.length === 0) {
			tipElement = $('<div/>', { id: options.popupId });
			// grab body element if it was not populated when the script loaded
			// note: this hack exists solely for jsfiddle support
			if ($body.length === 0) {
				$body = $('body');
			}
			$body.append(tipElement);
			// remember the tooltip elements that the plugin has created
			session.tooltips = session.tooltips ? session.tooltips.add(tipElement) : tipElement;
		}

		// hook mousemove for cursor follow tooltips
		if (options.followMouse) {
			// only one positionTipOnCursor hook per tooltip element, please
			if (!tipElement.data(DATA_HASMOUSEMOVE)) {
				$document.on('mousemove' + EVENT_NAMESPACE, positionTipOnCursor);
				$window.on('scroll' + EVENT_NAMESPACE, positionTipOnCursor);
				tipElement.data(DATA_HASMOUSEMOVE, true);
			}
		}

		/**
		 * Gives the specified element the active-hover state and queues up the
		 * showTip function.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 */
		function beginShowTip(element) {
			element.data(DATA_HASACTIVEHOVER, true);
			// show tooltip, asap
			tipElement.queue(function queueTipInit(next) {
				showTip(element);
				next();
			});
		}

		/**
		 * Shows the tooltip, as soon as possible.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 */
		function showTip(element) {
			var tipContent;

			// it is possible, especially with keyboard navigation, to move on to
			// another element with a tooltip during the queue to get to this point
			// in the code. if that happens then we need to not proceed or we may
			// have the fadeout callback for the last tooltip execute immediately
			// after this code runs, causing bugs.
			if (!element.data(DATA_HASACTIVEHOVER)) {
				return;
			}

			// if the tooltip is open and we got asked to open another one then the
			// old one is still in its fadeOut cycle, so wait and try again
			if (session.isTipOpen) {
				if (!session.isClosing) {
					hideTip(session.activeHover);
				}
				tipElement.delay(100).queue(function queueTipAgain(next) {
					showTip(element);
					next();
				});
				return;
			}

			// trigger powerTipPreRender event
			element.trigger('powerTipPreRender');

			// set tooltip content
			tipContent = getTooltipContent(element);
			if (tipContent) {
				tipElement.empty().append(tipContent);
			} else {
				// we have no content to display, give up
				return;
			}

			// trigger powerTipRender event
			element.trigger('powerTipRender');

			session.activeHover = element;
			session.isTipOpen = true;

			tipElement.data(DATA_MOUSEONTOTIP, options.mouseOnToPopup);

			// add custom class to tooltip element
			tipElement.addClass(options.popupClass);

			// set tooltip position
			// revert to static placement when the "force open" flag was set because
			// that flag means that we do not have accurate mouse position info
			if (!options.followMouse || element.data(DATA_FORCEDOPEN)) {
				positionTipOnElement(element);
				session.isFixedTipOpen = true;
			} else {
				positionTipOnCursor();
			}

			// close tooltip when clicking anywhere on the page, with the exception
			// of the tooltip's trigger element and any elements that are within a
			// tooltip that has 'mouseOnToPopup' option enabled
			// always enable this feature when the "force open" flag is set on a
			// followMouse tooltip because we reverted to static placement above
			if (!element.data(DATA_FORCEDOPEN) && !options.followMouse) {
				$document.on('click' + EVENT_NAMESPACE, function documentClick(event) {
					var target = event.target;
					if (target !== element[0]) {
						if (options.mouseOnToPopup) {
							if (target !== tipElement[0] && !$.contains(tipElement[0], target)) {
								$.powerTip.hide();
							}
						} else {
							$.powerTip.hide();
						}
					}
				});
			}

			// if we want to be able to mouse on to the tooltip then we need to
			// attach hover events to the tooltip that will cancel a close request
			// on mouseenter and start a new close request on mouseleave
			// only hook these listeners if we're not in manual mode
			if (options.mouseOnToPopup && !options.manual) {
				tipElement.on('mouseenter' + EVENT_NAMESPACE, function tipMouseEnter() {
					// check activeHover in case the mouse cursor entered the
					// tooltip during the fadeOut and close cycle
					if (session.activeHover) {
						session.activeHover.data(DATA_DISPLAYCONTROLLER).cancel();
					}
				});
				tipElement.on('mouseleave' + EVENT_NAMESPACE, function tipMouseLeave() {
					// check activeHover in case the mouse cursor left the tooltip
					// during the fadeOut and close cycle
					if (session.activeHover) {
						session.activeHover.data(DATA_DISPLAYCONTROLLER).hide();
					}
				});
			}

			// fadein
			tipElement.fadeIn(options.fadeInTime, function fadeInCallback() {
				// start desync polling
				if (!session.desyncTimeout) {
					session.desyncTimeout = setInterval(closeDesyncedTip, 500);
				}

				// trigger powerTipOpen event
				element.trigger('powerTipOpen');
			});
		}

		/**
		 * Hides the tooltip.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 */
		function hideTip(element) {
			// reset session
			session.isClosing = true;
			session.isTipOpen = false;

			// stop desync polling
			session.desyncTimeout = clearInterval(session.desyncTimeout);

			// reset element state
			element.data(DATA_HASACTIVEHOVER, false);
			element.data(DATA_FORCEDOPEN, false);

			// remove document click handler
			$document.off('click' + EVENT_NAMESPACE);

			// unbind the mouseOnToPopup events if they were set
			tipElement.off(EVENT_NAMESPACE);

			// fade out
			tipElement.fadeOut(options.fadeOutTime, function fadeOutCallback() {
				var coords = new CSSCoordinates();

				// reset session and tooltip element
				session.activeHover = null;
				session.isClosing = false;
				session.isFixedTipOpen = false;
				tipElement.removeClass();

				// support mouse-follow and fixed position tips at the same time by
				// moving the tooltip to the last cursor location after it is hidden
				coords.set('top', session.currentY + options.offset);
				coords.set('left', session.currentX + options.offset);
				tipElement.css(coords);

				// trigger powerTipClose event
				element.trigger('powerTipClose');
			});
		}

		/**
		 * Moves the tooltip to the users mouse cursor.
		 * @private
		 */
		function positionTipOnCursor() {
			var tipWidth,
				tipHeight,
				coords,
				collisions,
				collisionCount;

			// to support having fixed tooltips on the same page as cursor tooltips,
			// where both instances are referencing the same tooltip element, we
			// need to keep track of the mouse position constantly, but we should
			// only set the tip location if a fixed tip is not currently open, a tip
			// open is imminent or active, and the tooltip element in question does
			// have a mouse-follow using it.
			if (!session.isFixedTipOpen && (session.isTipOpen || (session.tipOpenImminent && tipElement.data(DATA_HASMOUSEMOVE)))) {
				// grab measurements
				tipWidth = tipElement.outerWidth();
				tipHeight = tipElement.outerHeight();
				coords = new CSSCoordinates();

				// grab collisions
				coords.set('top', session.currentY + options.offset);
				coords.set('left', session.currentX + options.offset);
				collisions = getViewportCollisions(
					coords,
					tipWidth,
					tipHeight
				);

				// handle tooltip view port collisions
				if (collisions !== Collision.none) {
					collisionCount = countFlags(collisions);
					if (collisionCount === 1) {
						// if there is only one collision (bottom or right) then
						// simply constrain the tooltip to the view port
						if (collisions === Collision.right) {
							coords.set('left', session.scrollLeft + session.windowWidth - tipWidth);
						} else if (collisions === Collision.bottom) {
							coords.set('top', session.scrollTop + session.windowHeight - tipHeight);
						}
					} else {
						// if the tooltip has more than one collision then it is
						// trapped in the corner and should be flipped to get it out
						// of the users way
						coords.set('left', session.currentX - tipWidth - options.offset);
						coords.set('top', session.currentY - tipHeight - options.offset);
					}
				}

				// position the tooltip
				tipElement.css(coords);
			}
		}

		/**
		 * Sets the tooltip to the correct position relative to the specified target
		 * element. Based on options settings.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 */
		function positionTipOnElement(element) {
			var priorityList,
				finalPlacement;

			// when the followMouse option is enabled and the "force open" flag is
			// set we revert to static positioning. since the developer may not have
			// considered this scenario we should use smart placement
			if (options.smartPlacement || (options.followMouse && element.data(DATA_FORCEDOPEN))) {
				priorityList = $.fn.powerTip.smartPlacementLists[options.placement];

				// iterate over the priority list and use the first placement option
				// that does not collide with the view port. if they all collide
				// then the last placement in the list will be used.
				$.each(priorityList, function(idx, pos) {
					// place tooltip and find collisions
					var collisions = getViewportCollisions(
						placeTooltip(element, pos),
						tipElement.outerWidth(),
						tipElement.outerHeight()
					);

					// update the final placement variable
					finalPlacement = pos;

					// break if there were no collisions
					return collisions !== Collision.none;
				});
			} else {
				// if we're not going to use the smart placement feature then just
				// compute the coordinates and do it
				placeTooltip(element, options.placement);
				finalPlacement = options.placement;
			}

			// add placement as class for CSS arrows
			tipElement.removeClass('w nw sw e ne se n s w se-alt sw-alt ne-alt nw-alt');
			tipElement.addClass(finalPlacement);
		}

		/**
		 * Sets the tooltip position to the appropriate values to show the tip at
		 * the specified placement. This function will iterate and test the tooltip
		 * to support elastic tooltips.
		 * @private
		 * @param {jQuery} element The element that the tooltip should target.
		 * @param {string} placement The placement for the tooltip.
		 * @return {CSSCoordinates} A CSSCoordinates object with the top, left, and
		 *     right position values.
		 */
		function placeTooltip(element, placement) {
			var iterationCount = 0,
				tipWidth,
				tipHeight,
				coords = new CSSCoordinates();

			// set the tip to 0,0 to get the full expanded width
			coords.set('top', 0);
			coords.set('left', 0);
			tipElement.css(coords);

			// to support elastic tooltips we need to check for a change in the
			// rendered dimensions after the tooltip has been positioned
			do {
				// grab the current tip dimensions
				tipWidth = tipElement.outerWidth();
				tipHeight = tipElement.outerHeight();

				// get placement coordinates
				coords = placementCalculator.compute(
					element,
					placement,
					tipWidth,
					tipHeight,
					options.offset
				);

				// place the tooltip
				tipElement.css(coords);
			} while (
				// sanity check: limit to 5 iterations, and...
				++iterationCount <= 5 &&
				// try again if the dimensions changed after placement
				(tipWidth !== tipElement.outerWidth() || tipHeight !== tipElement.outerHeight())
			);

			return coords;
		}

		/**
		 * Checks for a tooltip desync and closes the tooltip if one occurs.
		 * @private
		 */
		function closeDesyncedTip() {
			var isDesynced = false,
				hasDesyncableCloseEvent = $.grep(
					[ 'mouseleave', 'mouseout', 'blur', 'focusout' ],
					function(eventType) {
						return $.inArray(eventType, options.closeEvents) !== -1;
					}
				).length > 0;

			// It is possible for the mouse cursor to leave an element without
			// firing the mouseleave or blur event. This most commonly happens when
			// the element is disabled under mouse cursor. If this happens it will
			// result in a desynced tooltip because the tooltip was never asked to
			// close. So we should periodically check for a desync situation and
			// close the tip if such a situation arises.
			if (session.isTipOpen && !session.isClosing && !session.delayInProgress && hasDesyncableCloseEvent) {
				if (session.activeHover.data(DATA_HASACTIVEHOVER) === false || session.activeHover.is(':disabled')) {
					// user moused onto another tip or active hover is disabled
					isDesynced = true;
				} else if (!isMouseOver(session.activeHover) && !session.activeHover.is(':focus') && !session.activeHover.data(DATA_FORCEDOPEN)) {
					// hanging tip - have to test if mouse position is not over the
					// active hover and not over a tooltip set to let the user
					// interact with it.
					// for keyboard navigation: this only counts if the element does
					// not have focus.
					// for tooltips opened via the api: we need to check if it has
					// the forcedOpen flag.
					if (tipElement.data(DATA_MOUSEONTOTIP)) {
						if (!isMouseOver(tipElement)) {
							isDesynced = true;
						}
					} else {
						isDesynced = true;
					}
				}

				if (isDesynced) {
					// close the desynced tip
					hideTip(session.activeHover);
				}
			}
		}

		// expose methods
		this.showTip = beginShowTip;
		this.hideTip = hideTip;
		this.resetPosition = positionTipOnElement;
	}

	/**
	 * Determine whether a jQuery object is an SVG element
	 * @private
	 * @param {jQuery} element The element to check
	 * @return {boolean} Whether this is an SVG element
	 */
	function isSvgElement(element) {
		return Boolean(window.SVGElement && element[0] instanceof SVGElement);
	}

	/**
	 * Determines if the specified jQuery.Event object has mouse data.
	 * @private
	 * @param {jQuery.Event=} event The jQuery.Event object to test.
	 * @return {boolean} True if there is mouse data, otherwise false.
	 */
	function isMouseEvent(event) {
		return Boolean(event && $.inArray(event.type, MOUSE_EVENTS) > -1 &&
			typeof event.pageX === 'number');
	}

	/**
	 * Initializes the viewport dimension cache and hooks up the mouse position
	 * tracking and viewport dimension tracking events.
	 * Prevents attaching the events more than once.
	 * @private
	 */
	function initTracking() {
		if (!session.mouseTrackingActive) {
			session.mouseTrackingActive = true;

			// grab the current viewport dimensions on load
			getViewportDimensions();
			$(getViewportDimensions);

			// hook mouse move tracking
			$document.on('mousemove' + EVENT_NAMESPACE, trackMouse);

			// hook viewport dimensions tracking
			$window.on('resize' + EVENT_NAMESPACE, trackResize);
			$window.on('scroll' + EVENT_NAMESPACE, trackScroll);
		}
	}

	/**
	 * Updates the viewport dimensions cache.
	 * @private
	 */
	function getViewportDimensions() {
		session.scrollLeft = $window.scrollLeft();
		session.scrollTop = $window.scrollTop();
		session.windowWidth = $window.width();
		session.windowHeight = $window.height();
	}

	/**
	 * Updates the window size info in the viewport dimensions cache.
	 * @private
	 */
	function trackResize() {
		session.windowWidth = $window.width();
		session.windowHeight = $window.height();
	}

	/**
	 * Updates the scroll offset info in the viewport dimensions cache.
	 * @private
	 */
	function trackScroll() {
		var x = $window.scrollLeft(),
			y = $window.scrollTop();
		if (x !== session.scrollLeft) {
			session.currentX += x - session.scrollLeft;
			session.scrollLeft = x;
		}
		if (y !== session.scrollTop) {
			session.currentY += y - session.scrollTop;
			session.scrollTop = y;
		}
	}

	/**
	 * Saves the current mouse coordinates to the session object.
	 * @private
	 * @param {jQuery.Event} event The mousemove event for the document.
	 */
	function trackMouse(event) {
		session.currentX = event.pageX;
		session.currentY = event.pageY;
	}

	/**
	 * Tests if the mouse is currently over the specified element.
	 * @private
	 * @param {jQuery} element The element to check for hover.
	 * @return {boolean} True if the mouse is over the element, otherwise false.
	 */
	function isMouseOver(element) {
		// use getBoundingClientRect() because jQuery's width() and height()
		// methods do not work with SVG elements
		// compute width/height because those properties do not exist on the object
		// returned by getBoundingClientRect() in older versions of IE
		var elementPosition = element.offset(),
			elementBox = element[0].getBoundingClientRect(),
			elementWidth = elementBox.right - elementBox.left,
			elementHeight = elementBox.bottom - elementBox.top;

		return session.currentX >= elementPosition.left &&
			session.currentX <= elementPosition.left + elementWidth &&
			session.currentY >= elementPosition.top &&
			session.currentY <= elementPosition.top + elementHeight;
	}

	/**
	 * Fetches the tooltip content from the specified element's data attributes.
	 * @private
	 * @param {jQuery} element The element to get the tooltip content for.
	 * @return {(string|jQuery|undefined)} The text/HTML string, jQuery object, or
	 *     undefined if there was no tooltip content for the element.
	 */
	function getTooltipContent(element) {
		var tipText = element.data(DATA_POWERTIP),
			tipObject = element.data(DATA_POWERTIPJQ),
			tipTarget = element.data(DATA_POWERTIPTARGET),
			targetElement,
			content;

		if (tipText) {
			if ($.isFunction(tipText)) {
				tipText = tipText.call(element[0]);
			}
			content = tipText;
		} else if (tipObject) {
			if ($.isFunction(tipObject)) {
				tipObject = tipObject.call(element[0]);
			}
			if (tipObject.length > 0) {
				content = tipObject.clone(true, true);
			}
		} else if (tipTarget) {
			targetElement = $('#' + tipTarget);
			if (targetElement.length > 0) {
				content = targetElement.html();
			}
		}

		return content;
	}

	/**
	 * Finds any viewport collisions that an element (the tooltip) would have if it
	 * were absolutely positioned at the specified coordinates.
	 * @private
	 * @param {CSSCoordinates} coords Coordinates for the element.
	 * @param {number} elementWidth Width of the element in pixels.
	 * @param {number} elementHeight Height of the element in pixels.
	 * @return {number} Value with the collision flags.
	 */
	function getViewportCollisions(coords, elementWidth, elementHeight) {
		var viewportTop = session.scrollTop,
			viewportLeft = session.scrollLeft,
			viewportBottom = viewportTop + session.windowHeight,
			viewportRight = viewportLeft + session.windowWidth,
			collisions = Collision.none;

		if (coords.top < viewportTop || Math.abs(coords.bottom - session.windowHeight) - elementHeight < viewportTop) {
			collisions |= Collision.top;
		}
		if (coords.top + elementHeight > viewportBottom || Math.abs(coords.bottom - session.windowHeight) > viewportBottom) {
			collisions |= Collision.bottom;
		}
		if (coords.left < viewportLeft || coords.right + elementWidth > viewportRight) {
			collisions |= Collision.left;
		}
		if (coords.left + elementWidth > viewportRight || coords.right < viewportLeft) {
			collisions |= Collision.right;
		}

		return collisions;
	}

	/**
	 * Counts the number of bits set on a flags value.
	 * @param {number} value The flags value.
	 * @return {number} The number of bits that have been set.
	 */
	function countFlags(value) {
		var count = 0;
		while (value) {
			value &= value - 1;
			count++;
		}
		return count;
	}

	// return api for commonjs and amd environments
	return $.powerTip;
}));


/***/ }),

/***/ "./node_modules/jquery/external/sizzle/dist/sizzle.js":
/*!************************************************************!*\
  !*** ./node_modules/jquery/external/sizzle/dist/sizzle.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

// EXPOSE
var _sizzle = window.Sizzle;

Sizzle.noConflict = function() {
	if ( window.Sizzle === Sizzle ) {
		window.Sizzle = _sizzle;
	}

	return Sizzle;
};

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return Sizzle;
	}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

// Sizzle requires that there be a global window in Common-JS like environments
} else {}

// EXPOSE

} )( window );


/***/ }),

/***/ "./node_modules/jquery/src/ajax.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/ajax.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"),
	__webpack_require__(/*! ./ajax/var/location */ "./node_modules/jquery/src/ajax/var/location.js"),
	__webpack_require__(/*! ./ajax/var/nonce */ "./node_modules/jquery/src/ajax/var/nonce.js"),
	__webpack_require__(/*! ./ajax/var/rquery */ "./node_modules/jquery/src/ajax/var/rquery.js"),

	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./core/parseXML */ "./node_modules/jquery/src/core/parseXML.js"),
	__webpack_require__(/*! ./event/trigger */ "./node_modules/jquery/src/event/trigger.js"),
	__webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"),
	__webpack_require__(/*! ./serialize */ "./node_modules/jquery/src/serialize.js") // jQuery.param
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document, isFunction, rnothtmlwhite, location, nonce, rquery ) {

"use strict";

var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/jsonp.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/ajax/jsonp.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/nonce */ "./node_modules/jquery/src/ajax/var/nonce.js"),
	__webpack_require__(/*! ./var/rquery */ "./node_modules/jquery/src/ajax/var/rquery.js"),
	__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, isFunction, nonce, rquery ) {

"use strict";

var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/load.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/ajax/load.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/stripAndCollapse */ "./node_modules/jquery/src/core/stripAndCollapse.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ../core/parseHTML */ "./node_modules/jquery/src/core/parseHTML.js"),
	__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js"),
	__webpack_require__(/*! ../traversing */ "./node_modules/jquery/src/traversing.js"),
	__webpack_require__(/*! ../manipulation */ "./node_modules/jquery/src/manipulation.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, stripAndCollapse, isFunction ) {

"use strict";

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/script.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/ajax/script.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document ) {

"use strict";

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/var/location.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/ajax/var/location.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return window.location;
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/var/nonce.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/ajax/var/nonce.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return { guid: Date.now() };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/var/rquery.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/ajax/var/rquery.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return ( /\?/ );
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/ajax/xhr.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/ajax/xhr.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js"),
	__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, support ) {

"use strict";

jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/attributes.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/attributes.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./attributes/attr */ "./node_modules/jquery/src/attributes/attr.js"),
	__webpack_require__(/*! ./attributes/prop */ "./node_modules/jquery/src/attributes/prop.js"),
	__webpack_require__(/*! ./attributes/classes */ "./node_modules/jquery/src/attributes/classes.js"),
	__webpack_require__(/*! ./attributes/val */ "./node_modules/jquery/src/attributes/val.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

// Return jQuery for attributes-only inclusion
return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/attributes/attr.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/attributes/attr.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ../core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/attributes/support.js"),
	__webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, access, nodeName, support, rnothtmlwhite ) {

"use strict";

var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/attributes/classes.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/attributes/classes.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/stripAndCollapse */ "./node_modules/jquery/src/core/stripAndCollapse.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"),
	__webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ../core/init */ "./node_modules/jquery/src/core/init.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, stripAndCollapse, isFunction, rnothtmlwhite, dataPriv ) {

"use strict";

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/attributes/prop.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/attributes/prop.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/attributes/support.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, access, support ) {

"use strict";

var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/attributes/support.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/attributes/support.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( document, support ) {

"use strict";

( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();

return support;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/attributes/val.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/attributes/val.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/stripAndCollapse */ "./node_modules/jquery/src/core/stripAndCollapse.js"),
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/attributes/support.js"),
	__webpack_require__(/*! ../core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),

	__webpack_require__(/*! ../core/init */ "./node_modules/jquery/src/core/init.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, stripAndCollapse, support, nodeName, isFunction ) {

"use strict";

var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/callbacks.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/callbacks.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, toType, isFunction, rnothtmlwhite ) {

"use strict";

// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/core.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./var/arr */ "./node_modules/jquery/src/var/arr.js"),
	__webpack_require__(/*! ./var/getProto */ "./node_modules/jquery/src/var/getProto.js"),
	__webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"),
	__webpack_require__(/*! ./var/flat */ "./node_modules/jquery/src/var/flat.js"),
	__webpack_require__(/*! ./var/push */ "./node_modules/jquery/src/var/push.js"),
	__webpack_require__(/*! ./var/indexOf */ "./node_modules/jquery/src/var/indexOf.js"),
	__webpack_require__(/*! ./var/class2type */ "./node_modules/jquery/src/var/class2type.js"),
	__webpack_require__(/*! ./var/toString */ "./node_modules/jquery/src/var/toString.js"),
	__webpack_require__(/*! ./var/hasOwn */ "./node_modules/jquery/src/var/hasOwn.js"),
	__webpack_require__(/*! ./var/fnToString */ "./node_modules/jquery/src/var/fnToString.js"),
	__webpack_require__(/*! ./var/ObjectFunctionString */ "./node_modules/jquery/src/var/ObjectFunctionString.js"),
	__webpack_require__(/*! ./var/support */ "./node_modules/jquery/src/var/support.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"),
	__webpack_require__(/*! ./core/DOMEval */ "./node_modules/jquery/src/core/DOMEval.js"),
	__webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( arr, getProto, slice, flat, push, indexOf,
	class2type, toString, hasOwn, fnToString, ObjectFunctionString,
	support, isFunction, isWindow, DOMEval, toType ) {

"use strict";

var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/DOMEval.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/core/DOMEval.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( document ) {
	"use strict";

	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}

	return DOMEval;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/access.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/core/access.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/toType */ "./node_modules/jquery/src/core/toType.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, toType, isFunction ) {

"use strict";

// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};

return access;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/camelCase.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/core/camelCase.js ***!
  \***************************************************/
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {

"use strict";

// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}

return camelCase;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/init.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/core/init.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Initialize a jQuery object
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/rsingleTag */ "./node_modules/jquery/src/core/var/rsingleTag.js"),

	__webpack_require__(/*! ../traversing/findFilter */ "./node_modules/jquery/src/traversing/findFilter.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document, isFunction, rsingleTag ) {

"use strict";

// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );

return init;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/isAttached.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/core/isAttached.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js") // jQuery.contains
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, documentElement ) {
	"use strict";

	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}

	return isAttached;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/nodeName.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/core/nodeName.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {

"use strict";

function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}

return nodeName;

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/parseHTML.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/core/parseHTML.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ./var/rsingleTag */ "./node_modules/jquery/src/core/var/rsingleTag.js"),
	__webpack_require__(/*! ../manipulation/buildFragment */ "./node_modules/jquery/src/manipulation/buildFragment.js"),

	// This is the only module that needs core/support
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/core/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document, rsingleTag, buildFragment, support ) {

"use strict";

// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};

return jQuery.parseHTML;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/parseXML.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/core/parseXML.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};

return jQuery.parseXML;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/ready.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/core/ready.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../core/readyException */ "./node_modules/jquery/src/core/readyException.js"),
	__webpack_require__(/*! ../deferred */ "./node_modules/jquery/src/deferred.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document ) {

"use strict";

// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/readyException.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/core/readyException.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/stripAndCollapse.js":
/*!**********************************************************!*\
  !*** ./node_modules/jquery/src/core/stripAndCollapse.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( rnothtmlwhite ) {
	"use strict";

	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}

	return stripAndCollapse;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/support.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/core/support.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( document, support ) {

"use strict";

// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();

return support;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/toType.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/core/toType.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/class2type */ "./node_modules/jquery/src/var/class2type.js"),
	__webpack_require__(/*! ../var/toString */ "./node_modules/jquery/src/var/toString.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( class2type, toString ) {

"use strict";

function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}

return toType;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/core/var/rsingleTag.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/core/var/rsingleTag.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	// rsingleTag matches a string consisting of a single HTML element with no attributes
	// and captures the element's name
	return ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css.js":
/*!****************************************!*\
  !*** ./node_modules/jquery/src/css.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"),
	__webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),
	__webpack_require__(/*! ./var/rcssNum */ "./node_modules/jquery/src/var/rcssNum.js"),
	__webpack_require__(/*! ./css/var/rnumnonpx */ "./node_modules/jquery/src/css/var/rnumnonpx.js"),
	__webpack_require__(/*! ./css/var/cssExpand */ "./node_modules/jquery/src/css/var/cssExpand.js"),
	__webpack_require__(/*! ./css/var/getStyles */ "./node_modules/jquery/src/css/var/getStyles.js"),
	__webpack_require__(/*! ./css/var/swap */ "./node_modules/jquery/src/css/var/swap.js"),
	__webpack_require__(/*! ./css/curCSS */ "./node_modules/jquery/src/css/curCSS.js"),
	__webpack_require__(/*! ./css/adjustCSS */ "./node_modules/jquery/src/css/adjustCSS.js"),
	__webpack_require__(/*! ./css/addGetHookIf */ "./node_modules/jquery/src/css/addGetHookIf.js"),
	__webpack_require__(/*! ./css/support */ "./node_modules/jquery/src/css/support.js"),
	__webpack_require__(/*! ./css/finalPropName */ "./node_modules/jquery/src/css/finalPropName.js"),

	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./core/ready */ "./node_modules/jquery/src/core/ready.js"),
	__webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js") // contains
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, access, camelCase, nodeName, rcssNum, rnumnonpx, cssExpand,
	getStyles, swap, curCSS, adjustCSS, addGetHookIf, support, finalPropName ) {

"use strict";

var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/addGetHookIf.js":
/*!*****************************************************!*\
  !*** ./node_modules/jquery/src/css/addGetHookIf.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {

"use strict";

function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}

return addGetHookIf;

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/adjustCSS.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/css/adjustCSS.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/rcssNum */ "./node_modules/jquery/src/var/rcssNum.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, rcssNum ) {

"use strict";

function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}

return adjustCSS;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/curCSS.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/css/curCSS.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/isAttached */ "./node_modules/jquery/src/core/isAttached.js"),
	__webpack_require__(/*! ./var/rboxStyle */ "./node_modules/jquery/src/css/var/rboxStyle.js"),
	__webpack_require__(/*! ./var/rnumnonpx */ "./node_modules/jquery/src/css/var/rnumnonpx.js"),
	__webpack_require__(/*! ./var/getStyles */ "./node_modules/jquery/src/css/var/getStyles.js"),
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/css/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, isAttached, rboxStyle, rnumnonpx, getStyles, support ) {

"use strict";

function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}

return curCSS;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/finalPropName.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/finalPropName.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( document, jQuery ) {

"use strict";

var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}

return finalPropName;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/hiddenVisibleSelectors.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/css/hiddenVisibleSelectors.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/showHide.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/css/showHide.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ../css/var/isHiddenWithinTree */ "./node_modules/jquery/src/css/var/isHiddenWithinTree.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, dataPriv, isHiddenWithinTree ) {

"use strict";

var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );

return showHide;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/support.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/css/support.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"),
	__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document, documentElement, support ) {

"use strict";

( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();

return support;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/var/cssExpand.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/cssExpand.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return [ "Top", "Right", "Bottom", "Left" ];
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/var/getStyles.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/getStyles.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/var/isHiddenWithinTree.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/css/var/isHiddenWithinTree.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../../core/isAttached */ "./node_modules/jquery/src/core/isAttached.js")

	// css is assumed
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, isAttached ) {
	"use strict";

	// isHiddenWithinTree reports if an element has a non-"none" display style (inline and/or
	// through the CSS cascade), which is useful in deciding whether or not to make it visible.
	// It differs from the :hidden selector (jQuery.expr.pseudos.hidden) in two important ways:
	// * A hidden ancestor does not force an element to be classified as hidden.
	// * Being disconnected from the document does not force an element to be classified as hidden.
	// These differences improve the behavior of .toggle() et al. when applied to elements that are
	// detached or contained within hidden ancestors (gh-2404, gh-2863).
	return function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/var/rboxStyle.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/rboxStyle.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./cssExpand */ "./node_modules/jquery/src/css/var/cssExpand.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( cssExpand ) {
	"use strict";

	return new RegExp( cssExpand.join( "|" ), "i" );
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/var/rnumnonpx.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/rnumnonpx.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../../var/pnum */ "./node_modules/jquery/src/var/pnum.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( pnum ) {
	"use strict";

	return new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/css/var/swap.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/css/var/swap.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {

"use strict";

// A method for quickly swapping in/out CSS properties to get correct calculations.
return function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/data.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/data.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"),
	__webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ./data/var/dataUser */ "./node_modules/jquery/src/data/var/dataUser.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, access, camelCase, dataPriv, dataUser ) {

"use strict";

//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/data/Data.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/data/Data.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"),
	__webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"),
	__webpack_require__(/*! ./var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, camelCase, rnothtmlwhite, acceptData ) {

"use strict";

function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};

return Data;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/data/var/acceptData.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/data/var/acceptData.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {

"use strict";

/**
 * Determines whether an object can have data
 */
return function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/data/var/dataPriv.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/data/var/dataPriv.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../Data */ "./node_modules/jquery/src/data/Data.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( Data ) {
	"use strict";

	return new Data();
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/data/var/dataUser.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/data/var/dataUser.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../Data */ "./node_modules/jquery/src/data/Data.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( Data ) {
	"use strict";

	return new Data();
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/deferred.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/deferred.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"),
	__webpack_require__(/*! ./callbacks */ "./node_modules/jquery/src/callbacks.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, isFunction, slice ) {

"use strict";

function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/deferred/exceptionHook.js":
/*!***********************************************************!*\
  !*** ./node_modules/jquery/src/deferred/exceptionHook.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../deferred */ "./node_modules/jquery/src/deferred.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/deprecated.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/deprecated.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),
	__webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"),
	__webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"),
	__webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"),

	__webpack_require__(/*! ./deprecated/ajax-event-alias */ "./node_modules/jquery/src/deprecated/ajax-event-alias.js"),
	__webpack_require__(/*! ./deprecated/event */ "./node_modules/jquery/src/deprecated/event.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, nodeName, camelCase, toType, isFunction, isWindow, slice ) {

"use strict";

// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/deprecated/ajax-event-alias.js":
/*!****************************************************************!*\
  !*** ./node_modules/jquery/src/deprecated/ajax-event-alias.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js"),
	__webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/deprecated/event.js":
/*!*****************************************************!*\
  !*** ./node_modules/jquery/src/deprecated/event.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),

	__webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js"),
	__webpack_require__(/*! ../event/trigger */ "./node_modules/jquery/src/event/trigger.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/dimensions.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/dimensions.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"),
	__webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, access, isWindow ) {

"use strict";

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/effects.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/src/effects.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"),
	__webpack_require__(/*! ./var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/rcssNum */ "./node_modules/jquery/src/var/rcssNum.js"),
	__webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"),
	__webpack_require__(/*! ./css/var/cssExpand */ "./node_modules/jquery/src/css/var/cssExpand.js"),
	__webpack_require__(/*! ./css/var/isHiddenWithinTree */ "./node_modules/jquery/src/css/var/isHiddenWithinTree.js"),
	__webpack_require__(/*! ./css/adjustCSS */ "./node_modules/jquery/src/css/adjustCSS.js"),
	__webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ./css/showHide */ "./node_modules/jquery/src/css/showHide.js"),

	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./queue */ "./node_modules/jquery/src/queue.js"),
	__webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"),
	__webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"),
	__webpack_require__(/*! ./manipulation */ "./node_modules/jquery/src/manipulation.js"),
	__webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js"),
	__webpack_require__(/*! ./effects/Tween */ "./node_modules/jquery/src/effects/Tween.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, camelCase, document, isFunction, rcssNum, rnothtmlwhite, cssExpand,
	isHiddenWithinTree, adjustCSS, dataPriv, showHide ) {

"use strict";

var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/effects/Tween.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/effects/Tween.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../css/finalPropName */ "./node_modules/jquery/src/css/finalPropName.js"),

	__webpack_require__(/*! ../css */ "./node_modules/jquery/src/css.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, finalPropName ) {

"use strict";

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/effects/animatedSelector.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery/src/effects/animatedSelector.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js"),
	__webpack_require__(/*! ../effects */ "./node_modules/jquery/src/effects.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/event.js":
/*!******************************************!*\
  !*** ./node_modules/jquery/src/event.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ./var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"),
	__webpack_require__(/*! ./var/rcheckableType */ "./node_modules/jquery/src/var/rcheckableType.js"),
	__webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"),
	__webpack_require__(/*! ./data/var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js"),
	__webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),

	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document, documentElement, isFunction, rnothtmlwhite,
	rcheckableType, slice, acceptData, dataPriv, nodeName ) {

"use strict";

var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/event/focusin.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/event/focusin.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/event/support.js"),

	__webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js"),
	__webpack_require__(/*! ./trigger */ "./node_modules/jquery/src/event/trigger.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, dataPriv, support ) {

"use strict";

// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/event/support.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/event/support.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( support ) {

"use strict";

support.focusin = "onfocusin" in window;

return support;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/event/trigger.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/event/trigger.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ../data/var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js"),
	__webpack_require__(/*! ../var/hasOwn */ "./node_modules/jquery/src/var/hasOwn.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ../var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"),
	__webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, document, dataPriv, acceptData, hasOwn, isFunction, isWindow ) {

"use strict";

var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/exports/amd.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/exports/amd.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/exports/global.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/exports/global.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/jquery.js":
/*!*******************************************!*\
  !*** ./node_modules/jquery/src/jquery.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js"),
	__webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"),
	__webpack_require__(/*! ./callbacks */ "./node_modules/jquery/src/callbacks.js"),
	__webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"),
	__webpack_require__(/*! ./deferred/exceptionHook */ "./node_modules/jquery/src/deferred/exceptionHook.js"),
	__webpack_require__(/*! ./core/ready */ "./node_modules/jquery/src/core/ready.js"),
	__webpack_require__(/*! ./data */ "./node_modules/jquery/src/data.js"),
	__webpack_require__(/*! ./queue */ "./node_modules/jquery/src/queue.js"),
	__webpack_require__(/*! ./queue/delay */ "./node_modules/jquery/src/queue/delay.js"),
	__webpack_require__(/*! ./attributes */ "./node_modules/jquery/src/attributes.js"),
	__webpack_require__(/*! ./event */ "./node_modules/jquery/src/event.js"),
	__webpack_require__(/*! ./event/focusin */ "./node_modules/jquery/src/event/focusin.js"),
	__webpack_require__(/*! ./manipulation */ "./node_modules/jquery/src/manipulation.js"),
	__webpack_require__(/*! ./manipulation/_evalUrl */ "./node_modules/jquery/src/manipulation/_evalUrl.js"),
	__webpack_require__(/*! ./wrap */ "./node_modules/jquery/src/wrap.js"),
	__webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js"),
	__webpack_require__(/*! ./css/hiddenVisibleSelectors */ "./node_modules/jquery/src/css/hiddenVisibleSelectors.js"),
	__webpack_require__(/*! ./serialize */ "./node_modules/jquery/src/serialize.js"),
	__webpack_require__(/*! ./ajax */ "./node_modules/jquery/src/ajax.js"),
	__webpack_require__(/*! ./ajax/xhr */ "./node_modules/jquery/src/ajax/xhr.js"),
	__webpack_require__(/*! ./ajax/script */ "./node_modules/jquery/src/ajax/script.js"),
	__webpack_require__(/*! ./ajax/jsonp */ "./node_modules/jquery/src/ajax/jsonp.js"),
	__webpack_require__(/*! ./ajax/load */ "./node_modules/jquery/src/ajax/load.js"),
	__webpack_require__(/*! ./core/parseXML */ "./node_modules/jquery/src/core/parseXML.js"),
	__webpack_require__(/*! ./core/parseHTML */ "./node_modules/jquery/src/core/parseHTML.js"),
	__webpack_require__(/*! ./effects */ "./node_modules/jquery/src/effects.js"),
	__webpack_require__(/*! ./effects/animatedSelector */ "./node_modules/jquery/src/effects/animatedSelector.js"),
	__webpack_require__(/*! ./offset */ "./node_modules/jquery/src/offset.js"),
	__webpack_require__(/*! ./dimensions */ "./node_modules/jquery/src/dimensions.js"),
	__webpack_require__(/*! ./deprecated */ "./node_modules/jquery/src/deprecated.js"),
	__webpack_require__(/*! ./exports/amd */ "./node_modules/jquery/src/exports/amd.js"),
	__webpack_require__(/*! ./exports/global */ "./node_modules/jquery/src/exports/global.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

return jQuery;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/manipulation.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/isAttached */ "./node_modules/jquery/src/core/isAttached.js"),
	__webpack_require__(/*! ./var/flat */ "./node_modules/jquery/src/var/flat.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/push */ "./node_modules/jquery/src/var/push.js"),
	__webpack_require__(/*! ./var/rcheckableType */ "./node_modules/jquery/src/var/rcheckableType.js"),
	__webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ./manipulation/var/rtagName */ "./node_modules/jquery/src/manipulation/var/rtagName.js"),
	__webpack_require__(/*! ./manipulation/var/rscriptType */ "./node_modules/jquery/src/manipulation/var/rscriptType.js"),
	__webpack_require__(/*! ./manipulation/wrapMap */ "./node_modules/jquery/src/manipulation/wrapMap.js"),
	__webpack_require__(/*! ./manipulation/getAll */ "./node_modules/jquery/src/manipulation/getAll.js"),
	__webpack_require__(/*! ./manipulation/setGlobalEval */ "./node_modules/jquery/src/manipulation/setGlobalEval.js"),
	__webpack_require__(/*! ./manipulation/buildFragment */ "./node_modules/jquery/src/manipulation/buildFragment.js"),
	__webpack_require__(/*! ./manipulation/support */ "./node_modules/jquery/src/manipulation/support.js"),

	__webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ./data/var/dataUser */ "./node_modules/jquery/src/data/var/dataUser.js"),
	__webpack_require__(/*! ./data/var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js"),
	__webpack_require__(/*! ./core/DOMEval */ "./node_modules/jquery/src/core/DOMEval.js"),
	__webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),

	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"),
	__webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js"),
	__webpack_require__(/*! ./event */ "./node_modules/jquery/src/event.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, isAttached, flat, isFunction, push, rcheckableType,
	access, rtagName, rscriptType,
	wrapMap, getAll, setGlobalEval, buildFragment, support,
	dataPriv, dataUser, acceptData, DOMEval, nodeName ) {

"use strict";

var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/_evalUrl.js":
/*!**********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/_evalUrl.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};

return jQuery._evalUrl;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/buildFragment.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/buildFragment.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/toType */ "./node_modules/jquery/src/core/toType.js"),
	__webpack_require__(/*! ../core/isAttached */ "./node_modules/jquery/src/core/isAttached.js"),
	__webpack_require__(/*! ./var/rtagName */ "./node_modules/jquery/src/manipulation/var/rtagName.js"),
	__webpack_require__(/*! ./var/rscriptType */ "./node_modules/jquery/src/manipulation/var/rscriptType.js"),
	__webpack_require__(/*! ./wrapMap */ "./node_modules/jquery/src/manipulation/wrapMap.js"),
	__webpack_require__(/*! ./getAll */ "./node_modules/jquery/src/manipulation/getAll.js"),
	__webpack_require__(/*! ./setGlobalEval */ "./node_modules/jquery/src/manipulation/setGlobalEval.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, toType, isAttached, rtagName, rscriptType, wrapMap, getAll, setGlobalEval ) {

"use strict";

var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}

return buildFragment;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/getAll.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/getAll.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../core/nodeName */ "./node_modules/jquery/src/core/nodeName.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, nodeName ) {

"use strict";

function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}

return getAll;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/setGlobalEval.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/setGlobalEval.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( dataPriv ) {

"use strict";

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}

return setGlobalEval;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/support.js":
/*!*********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/support.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"),
	__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( document, support ) {

"use strict";

( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();

return support;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/var/rscriptType.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/var/rscriptType.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return ( /^$|^module$|\/(?:java|ecma)script/i );
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/var/rtagName.js":
/*!**************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/var/rtagName.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	// rtagName captures the name from the first start tag in a string of HTML
	// https://html.spec.whatwg.org/multipage/syntax.html#tag-open-state
	// https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state
	return ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/manipulation/wrapMap.js":
/*!*********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/wrapMap.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./support */ "./node_modules/jquery/src/manipulation/support.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( support ) {

"use strict";

// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}

return wrapMap;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/offset.js":
/*!*******************************************!*\
  !*** ./node_modules/jquery/src/offset.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"),
	__webpack_require__(/*! ./var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./css/var/rnumnonpx */ "./node_modules/jquery/src/css/var/rnumnonpx.js"),
	__webpack_require__(/*! ./css/curCSS */ "./node_modules/jquery/src/css/curCSS.js"),
	__webpack_require__(/*! ./css/addGetHookIf */ "./node_modules/jquery/src/css/addGetHookIf.js"),
	__webpack_require__(/*! ./css/support */ "./node_modules/jquery/src/css/support.js"),
	__webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"),
	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js"),
	__webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js") // contains
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, access, documentElement, isFunction, rnumnonpx,
	curCSS, addGetHookIf, support, isWindow ) {

"use strict";

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/queue.js":
/*!******************************************!*\
  !*** ./node_modules/jquery/src/queue.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"),
	__webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"),
	__webpack_require__(/*! ./callbacks */ "./node_modules/jquery/src/callbacks.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, dataPriv ) {

"use strict";

jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/queue/delay.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/queue/delay.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../queue */ "./node_modules/jquery/src/queue.js"),
	__webpack_require__(/*! ../effects */ "./node_modules/jquery/src/effects.js") // Delay is optional because of this dependency
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};

return jQuery.fn.delay;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/selector-sizzle.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/selector-sizzle.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../external/sizzle/dist/sizzle */ "./node_modules/jquery/external/sizzle/dist/sizzle.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, Sizzle ) {

"use strict";

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/selector.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/selector.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! ./selector-sizzle */ "./node_modules/jquery/src/selector-sizzle.js") ], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/serialize.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/serialize.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js"),
	__webpack_require__(/*! ./var/rcheckableType */ "./node_modules/jquery/src/var/rcheckableType.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"), // filter
	__webpack_require__(/*! ./attributes/prop */ "./node_modules/jquery/src/attributes/prop.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, toType, rcheckableType, isFunction ) {

"use strict";

var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/traversing.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/traversing.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./var/getProto */ "./node_modules/jquery/src/var/getProto.js"),
	__webpack_require__(/*! ./var/indexOf */ "./node_modules/jquery/src/var/indexOf.js"),
	__webpack_require__(/*! ./traversing/var/dir */ "./node_modules/jquery/src/traversing/var/dir.js"),
	__webpack_require__(/*! ./traversing/var/siblings */ "./node_modules/jquery/src/traversing/var/siblings.js"),
	__webpack_require__(/*! ./traversing/var/rneedsContext */ "./node_modules/jquery/src/traversing/var/rneedsContext.js"),
	__webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"),

	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./traversing/findFilter */ "./node_modules/jquery/src/traversing/findFilter.js"),
	__webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, getProto, indexOf, dir, siblings, rneedsContext, nodeName ) {

"use strict";

var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/traversing/findFilter.js":
/*!**********************************************************!*\
  !*** ./node_modules/jquery/src/traversing/findFilter.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../var/indexOf */ "./node_modules/jquery/src/var/indexOf.js"),
	__webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./var/rneedsContext */ "./node_modules/jquery/src/traversing/var/rneedsContext.js"),
	__webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, indexOf, isFunction, rneedsContext ) {

"use strict";

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/traversing/var/dir.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/traversing/var/dir.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../../core */ "./node_modules/jquery/src/core.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {

"use strict";

return function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/traversing/var/rneedsContext.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jquery/src/traversing/var/rneedsContext.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../../core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ../../selector */ "./node_modules/jquery/src/selector.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery ) {
	"use strict";

	return jQuery.expr.match.needsContext;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/traversing/var/siblings.js":
/*!************************************************************!*\
  !*** ./node_modules/jquery/src/traversing/var/siblings.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {

"use strict";

return function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/ObjectFunctionString.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery/src/var/ObjectFunctionString.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./fnToString */ "./node_modules/jquery/src/var/fnToString.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( fnToString ) {
	"use strict";

	return fnToString.call( Object );
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/arr.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/src/var/arr.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return [];
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/class2type.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/var/class2type.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	// [[Class]] -> type pairs
	return {};
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/document.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/document.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return window.document;
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/documentElement.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/var/documentElement.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./document */ "./node_modules/jquery/src/var/document.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( document ) {
	"use strict";

	return document.documentElement;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/flat.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/var/flat.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( arr ) {

"use strict";

// Support: IE 9 - 11+, Edge 18+, Android Browser 4.0 - 4.3 only, iOS 7 - 11 only, Safari 11 only,
// Firefox <= 61 only
// Provide fallback for browsers without Array#flat.
return arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/fnToString.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/var/fnToString.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./hasOwn */ "./node_modules/jquery/src/var/hasOwn.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( hasOwn ) {
	"use strict";

	return hasOwn.toString;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/getProto.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/getProto.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return Object.getPrototypeOf;
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/hasOwn.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/var/hasOwn.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./class2type */ "./node_modules/jquery/src/var/class2type.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( class2type ) {
	"use strict";

	return class2type.hasOwnProperty;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/indexOf.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/var/indexOf.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( arr ) {
	"use strict";

	return arr.indexOf;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/isFunction.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/var/isFunction.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/isWindow.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/isWindow.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};

}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/pnum.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/var/pnum.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/push.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/var/push.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( arr ) {
	"use strict";

	return arr.push;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/rcheckableType.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/var/rcheckableType.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	return ( /^(?:checkbox|radio)$/i );
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/rcssNum.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/var/rcssNum.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ../var/pnum */ "./node_modules/jquery/src/var/pnum.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( pnum ) {

"use strict";

return new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );

}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/rnothtmlwhite.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/var/rnothtmlwhite.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	// Only count HTML whitespace
	// Other whitespace should count in values
	// https://infra.spec.whatwg.org/#ascii-whitespace
	return ( /[^\x20\t\r\n\f]+/g );
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/slice.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/var/slice.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( arr ) {
	"use strict";

	return arr.slice;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/support.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/var/support.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
	"use strict";

	// All support tests are defined in their respective modules.
	return {};
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/var/toString.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/toString.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./class2type */ "./node_modules/jquery/src/var/class2type.js")
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( class2type ) {
	"use strict";

	return class2type.toString;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/jquery/src/wrap.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/wrap.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"),
	__webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"),
	__webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"),
	__webpack_require__(/*! ./manipulation */ "./node_modules/jquery/src/manipulation.js"), // clone
	__webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js") // parent, contents
], __WEBPACK_AMD_DEFINE_RESULT__ = (function( jQuery, isFunction ) {

"use strict";

jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );

return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;


/***/ }),

/***/ "./node_modules/toastr/toastr.js":
/*!***************************************!*\
  !*** ./node_modules/toastr/toastr.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 * Toastr
 * Copyright 2012-2015
 * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * ARIA Support: Greta Krafsig
 *
 * Project: https://github.com/CodeSeven/toastr
 */
/* global define */
(function (define) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {
        return (function () {
            var $container;
            var listener;
            var toastId = 0;
            var toastType = {
                error: 'error',
                info: 'info',
                success: 'success',
                warning: 'warning'
            };

            var toastr = {
                clear: clear,
                remove: remove,
                error: error,
                getContainer: getContainer,
                info: info,
                options: {},
                subscribe: subscribe,
                success: success,
                version: '2.1.4',
                warning: warning
            };

            var previousToast;

            return toastr;

            ////////////////

            function error(message, title, optionsOverride) {
                return notify({
                    type: toastType.error,
                    iconClass: getOptions().iconClasses.error,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function getContainer(options, create) {
                if (!options) { options = getOptions(); }
                $container = $('#' + options.containerId);
                if ($container.length) {
                    return $container;
                }
                if (create) {
                    $container = createContainer(options);
                }
                return $container;
            }

            function info(message, title, optionsOverride) {
                return notify({
                    type: toastType.info,
                    iconClass: getOptions().iconClasses.info,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function subscribe(callback) {
                listener = callback;
            }

            function success(message, title, optionsOverride) {
                return notify({
                    type: toastType.success,
                    iconClass: getOptions().iconClasses.success,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function warning(message, title, optionsOverride) {
                return notify({
                    type: toastType.warning,
                    iconClass: getOptions().iconClasses.warning,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function clear($toastElement, clearOptions) {
                var options = getOptions();
                if (!$container) { getContainer(options); }
                if (!clearToast($toastElement, options, clearOptions)) {
                    clearContainer(options);
                }
            }

            function remove($toastElement) {
                var options = getOptions();
                if (!$container) { getContainer(options); }
                if ($toastElement && $(':focus', $toastElement).length === 0) {
                    removeToast($toastElement);
                    return;
                }
                if ($container.children().length) {
                    $container.remove();
                }
            }

            // internal functions

            function clearContainer (options) {
                var toastsToClear = $container.children();
                for (var i = toastsToClear.length - 1; i >= 0; i--) {
                    clearToast($(toastsToClear[i]), options);
                }
            }

            function clearToast ($toastElement, options, clearOptions) {
                var force = clearOptions && clearOptions.force ? clearOptions.force : false;
                if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {
                    $toastElement[options.hideMethod]({
                        duration: options.hideDuration,
                        easing: options.hideEasing,
                        complete: function () { removeToast($toastElement); }
                    });
                    return true;
                }
                return false;
            }

            function createContainer(options) {
                $container = $('<div/>')
                    .attr('id', options.containerId)
                    .addClass(options.positionClass);

                $container.appendTo($(options.target));
                return $container;
            }

            function getDefaults() {
                return {
                    tapToDismiss: true,
                    toastClass: 'toast',
                    containerId: 'toast-container',
                    debug: false,

                    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery
                    showDuration: 300,
                    showEasing: 'swing', //swing and linear are built into jQuery
                    onShown: undefined,
                    hideMethod: 'fadeOut',
                    hideDuration: 1000,
                    hideEasing: 'swing',
                    onHidden: undefined,
                    closeMethod: false,
                    closeDuration: false,
                    closeEasing: false,
                    closeOnHover: true,

                    extendedTimeOut: 1000,
                    iconClasses: {
                        error: 'toast-error',
                        info: 'toast-info',
                        success: 'toast-success',
                        warning: 'toast-warning'
                    },
                    iconClass: 'toast-info',
                    positionClass: 'toast-top-right',
                    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky
                    titleClass: 'toast-title',
                    messageClass: 'toast-message',
                    escapeHtml: false,
                    target: 'body',
                    closeHtml: '<button type="button">&times;</button>',
                    closeClass: 'toast-close-button',
                    newestOnTop: true,
                    preventDuplicates: false,
                    progressBar: false,
                    progressClass: 'toast-progress',
                    rtl: false
                };
            }

            function publish(args) {
                if (!listener) { return; }
                listener(args);
            }

            function notify(map) {
                var options = getOptions();
                var iconClass = map.iconClass || options.iconClass;

                if (typeof (map.optionsOverride) !== 'undefined') {
                    options = $.extend(options, map.optionsOverride);
                    iconClass = map.optionsOverride.iconClass || iconClass;
                }

                if (shouldExit(options, map)) { return; }

                toastId++;

                $container = getContainer(options, true);

                var intervalId = null;
                var $toastElement = $('<div/>');
                var $titleElement = $('<div/>');
                var $messageElement = $('<div/>');
                var $progressElement = $('<div/>');
                var $closeElement = $(options.closeHtml);
                var progressBar = {
                    intervalId: null,
                    hideEta: null,
                    maxHideTime: null
                };
                var response = {
                    toastId: toastId,
                    state: 'visible',
                    startTime: new Date(),
                    options: options,
                    map: map
                };

                personalizeToast();

                displayToast();

                handleEvents();

                publish(response);

                if (options.debug && console) {
                    console.log(response);
                }

                return $toastElement;

                function escapeHtml(source) {
                    if (source == null) {
                        source = '';
                    }

                    return source
                        .replace(/&/g, '&amp;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#39;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;');
                }

                function personalizeToast() {
                    setIcon();
                    setTitle();
                    setMessage();
                    setCloseButton();
                    setProgressBar();
                    setRTL();
                    setSequence();
                    setAria();
                }

                function setAria() {
                    var ariaValue = '';
                    switch (map.iconClass) {
                        case 'toast-success':
                        case 'toast-info':
                            ariaValue =  'polite';
                            break;
                        default:
                            ariaValue = 'assertive';
                    }
                    $toastElement.attr('aria-live', ariaValue);
                }

                function handleEvents() {
                    if (options.closeOnHover) {
                        $toastElement.hover(stickAround, delayedHideToast);
                    }

                    if (!options.onclick && options.tapToDismiss) {
                        $toastElement.click(hideToast);
                    }

                    if (options.closeButton && $closeElement) {
                        $closeElement.click(function (event) {
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {
                                event.cancelBubble = true;
                            }

                            if (options.onCloseClick) {
                                options.onCloseClick(event);
                            }

                            hideToast(true);
                        });
                    }

                    if (options.onclick) {
                        $toastElement.click(function (event) {
                            options.onclick(event);
                            hideToast();
                        });
                    }
                }

                function displayToast() {
                    $toastElement.hide();

                    $toastElement[options.showMethod](
                        {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}
                    );

                    if (options.timeOut > 0) {
                        intervalId = setTimeout(hideToast, options.timeOut);
                        progressBar.maxHideTime = parseFloat(options.timeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                        if (options.progressBar) {
                            progressBar.intervalId = setInterval(updateProgress, 10);
                        }
                    }
                }

                function setIcon() {
                    if (map.iconClass) {
                        $toastElement.addClass(options.toastClass).addClass(iconClass);
                    }
                }

                function setSequence() {
                    if (options.newestOnTop) {
                        $container.prepend($toastElement);
                    } else {
                        $container.append($toastElement);
                    }
                }

                function setTitle() {
                    if (map.title) {
                        var suffix = map.title;
                        if (options.escapeHtml) {
                            suffix = escapeHtml(map.title);
                        }
                        $titleElement.append(suffix).addClass(options.titleClass);
                        $toastElement.append($titleElement);
                    }
                }

                function setMessage() {
                    if (map.message) {
                        var suffix = map.message;
                        if (options.escapeHtml) {
                            suffix = escapeHtml(map.message);
                        }
                        $messageElement.append(suffix).addClass(options.messageClass);
                        $toastElement.append($messageElement);
                    }
                }

                function setCloseButton() {
                    if (options.closeButton) {
                        $closeElement.addClass(options.closeClass).attr('role', 'button');
                        $toastElement.prepend($closeElement);
                    }
                }

                function setProgressBar() {
                    if (options.progressBar) {
                        $progressElement.addClass(options.progressClass);
                        $toastElement.prepend($progressElement);
                    }
                }

                function setRTL() {
                    if (options.rtl) {
                        $toastElement.addClass('rtl');
                    }
                }

                function shouldExit(options, map) {
                    if (options.preventDuplicates) {
                        if (map.message === previousToast) {
                            return true;
                        } else {
                            previousToast = map.message;
                        }
                    }
                    return false;
                }

                function hideToast(override) {
                    var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;
                    var duration = override && options.closeDuration !== false ?
                        options.closeDuration : options.hideDuration;
                    var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;
                    if ($(':focus', $toastElement).length && !override) {
                        return;
                    }
                    clearTimeout(progressBar.intervalId);
                    return $toastElement[method]({
                        duration: duration,
                        easing: easing,
                        complete: function () {
                            removeToast($toastElement);
                            clearTimeout(intervalId);
                            if (options.onHidden && response.state !== 'hidden') {
                                options.onHidden();
                            }
                            response.state = 'hidden';
                            response.endTime = new Date();
                            publish(response);
                        }
                    });
                }

                function delayedHideToast() {
                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                        intervalId = setTimeout(hideToast, options.extendedTimeOut);
                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                    }
                }

                function stickAround() {
                    clearTimeout(intervalId);
                    progressBar.hideEta = 0;
                    $toastElement.stop(true, true)[options.showMethod](
                        {duration: options.showDuration, easing: options.showEasing}
                    );
                }

                function updateProgress() {
                    var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;
                    $progressElement.width(percentage + '%');
                }
            }

            function getOptions() {
                return $.extend({}, getDefaults(), toastr.options);
            }

            function removeToast($toastElement) {
                if (!$container) { $container = getContainer(); }
                if ($toastElement.is(':visible')) {
                    return;
                }
                $toastElement.remove();
                $toastElement = null;
                if ($container.children().length === 0) {
                    $container.remove();
                    previousToast = undefined;
                }
            }

        })();
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}(__webpack_require__.amdD));


/***/ }),

/***/ "./node_modules/vex-dialog/dist/vex.dialog.js":
/*!****************************************************!*\
  !*** ./node_modules/vex-dialog/dist/vex.dialog.js ***!
  \****************************************************/
/***/ ((module) => {

(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=undefined;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=undefined;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

function deepcopy(value) {
  if (!(!!value && typeof value == 'object')) {
    return value;
  }
  if (Object.prototype.toString.call(value) == '[object Date]') {
    return new Date(value.getTime());
  }
  if (Array.isArray(value)) {
    return value.map(deepcopy);
  }
  var result = {};
  Object.keys(value).forEach(
    function(key) { result[key] = deepcopy(value[key]); });
  return result;
}

module.exports = deepcopy;

},{}],2:[function(require,module,exports){

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Tests for browser support.
 */

var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== 'undefined') {
  bugTestDiv = document.createElement('div');
  // Setup
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE
  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
  bugTestDiv = undefined;
}

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};

map.td =
map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option =
map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead =
map.tbody =
map.colgroup =
map.caption =
map.tfoot = [1, '<table>', '</table>'];

map.polyline =
map.ellipse =
map.polygon =
map.circle =
map.text =
map.line =
map.path =
map.rect =
map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }

  return fragment;
}

},{}],3:[function(require,module,exports){
// get successful control from form and assemble into object
// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2

// types which indicate a submit action and are not successful controls
// these will be ignored
var k_r_submitter = /^(?:submit|button|image|reset|file)$/i;

// node names which could be successful controls
var k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;

// Matches bracket notation.
var brackets = /(\[[^\[\]]*\])/g;

// serializes form fields
// @param form MUST be an HTMLForm element
// @param options is an optional argument to configure the serialization. Default output
// with no options specified is a url encoded string
//    - hash: [true | false] Configure the output type. If true, the output will
//    be a js object.
//    - serializer: [function] Optional serializer function to override the default one.
//    The function takes 3 arguments (result, key, value) and should return new result
//    hash and url encoded str serializers are provided with this module
//    - disabled: [true | false]. If true serialize disabled fields.
//    - empty: [true | false]. If true serialize empty fields
function serialize(form, options) {
    if (typeof options != 'object') {
        options = { hash: !!options };
    }
    else if (options.hash === undefined) {
        options.hash = true;
    }

    var result = (options.hash) ? {} : '';
    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);

    var elements = form && form.elements ? form.elements : [];

    //Object store each radio and set if it's empty or not
    var radio_store = Object.create(null);

    for (var i=0 ; i<elements.length ; ++i) {
        var element = elements[i];

        // ingore disabled fields
        if ((!options.disabled && element.disabled) || !element.name) {
            continue;
        }
        // ignore anyhting that is not considered a success field
        if (!k_r_success_contrls.test(element.nodeName) ||
            k_r_submitter.test(element.type)) {
            continue;
        }

        var key = element.name;
        var val = element.value;

        // we can't just use element.value for checkboxes cause some browsers lie to us
        // they say "on" for value when the box isn't checked
        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {
            val = undefined;
        }

        // If we want empty elements
        if (options.empty) {
            // for checkbox
            if (element.type === 'checkbox' && !element.checked) {
                val = '';
            }

            // for radio
            if (element.type === 'radio') {
                if (!radio_store[element.name] && !element.checked) {
                    radio_store[element.name] = false;
                }
                else if (element.checked) {
                    radio_store[element.name] = true;
                }
            }

            // if options empty is true, continue only if its radio
            if (!val && element.type == 'radio') {
                continue;
            }
        }
        else {
            // value-less fields are ignored unless options.empty is true
            if (!val) {
                continue;
            }
        }

        // multi select boxes
        if (element.type === 'select-multiple') {
            val = [];

            var selectOptions = element.options;
            var isSelectedOptions = false;
            for (var j=0 ; j<selectOptions.length ; ++j) {
                var option = selectOptions[j];
                var allowedEmpty = options.empty && !option.value;
                var hasValue = (option.value || allowedEmpty);
                if (option.selected && hasValue) {
                    isSelectedOptions = true;

                    // If using a hash serializer be sure to add the
                    // correct notation for an array in the multi-select
                    // context. Here the name attribute on the select element
                    // might be missing the trailing bracket pair. Both names
                    // "foo" and "foo[]" should be arrays.
                    if (options.hash && key.slice(key.length - 2) !== '[]') {
                        result = serializer(result, key + '[]', option.value);
                    }
                    else {
                        result = serializer(result, key, option.value);
                    }
                }
            }

            // Serialize if no selected options and options.empty is true
            if (!isSelectedOptions && options.empty) {
                result = serializer(result, key, '');
            }

            continue;
        }

        result = serializer(result, key, val);
    }

    // Check for all empty radio buttons and serialize them with key=""
    if (options.empty) {
        for (var key in radio_store) {
            if (!radio_store[key]) {
                result = serializer(result, key, '');
            }
        }
    }

    return result;
}

function parse_keys(string) {
    var keys = [];
    var prefix = /^([^\[\]]*)/;
    var children = new RegExp(brackets);
    var match = prefix.exec(string);

    if (match[1]) {
        keys.push(match[1]);
    }

    while ((match = children.exec(string)) !== null) {
        keys.push(match[1]);
    }

    return keys;
}

function hash_assign(result, keys, value) {
    if (keys.length === 0) {
        result = value;
        return result;
    }

    var key = keys.shift();
    var between = key.match(/^\[(.+?)\]$/);

    if (key === '[]') {
        result = result || [];

        if (Array.isArray(result)) {
            result.push(hash_assign(null, keys, value));
        }
        else {
            // This might be the result of bad name attributes like "[][foo]",
            // in this case the original `result` object will already be
            // assigned to an object literal. Rather than coerce the object to
            // an array, or cause an exception the attribute "_values" is
            // assigned as an array.
            result._values = result._values || [];
            result._values.push(hash_assign(null, keys, value));
        }

        return result;
    }

    // Key is an attribute name and can be assigned directly.
    if (!between) {
        result[key] = hash_assign(result[key], keys, value);
    }
    else {
        var string = between[1];
        // +var converts the variable into a number
        // better than parseInt because it doesn't truncate away trailing
        // letters and actually fails if whole thing is not a number
        var index = +string;

        // If the characters between the brackets is not a number it is an
        // attribute name and can be assigned directly.
        if (isNaN(index)) {
            result = result || {};
            result[string] = hash_assign(result[string], keys, value);
        }
        else {
            result = result || [];
            result[index] = hash_assign(result[index], keys, value);
        }
    }

    return result;
}

// Object/hash encoding serializer.
function hash_serializer(result, key, value) {
    var matches = key.match(brackets);

    // Has brackets? Use the recursive assignment function to walk the keys,
    // construct any missing objects in the result tree and make the assignment
    // at the end of the chain.
    if (matches) {
        var keys = parse_keys(key);
        hash_assign(result, keys, value);
    }
    else {
        // Non bracket notation can make assignments directly.
        var existing = result[key];

        // If the value has been assigned already (for instance when a radio and
        // a checkbox have the same name attribute) convert the previous value
        // into an array before pushing into it.
        //
        // NOTE: If this requirement were removed all hash creation and
        // assignment could go through `hash_assign`.
        if (existing) {
            if (!Array.isArray(existing)) {
                result[key] = [ existing ];
            }

            result[key].push(value);
        }
        else {
            result[key] = value;
        }
    }

    return result;
}

// urlform encoding serializer
function str_serialize(result, key, value) {
    // encode newlines as \r\n cause the html spec says so
    value = value.replace(/(\r)?\n/g, '\r\n');
    value = encodeURIComponent(value);

    // spaces should be '+' rather than '%20'.
    value = value.replace(/%20/g, '+');
    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;
}

module.exports = serialize;

},{}],4:[function(require,module,exports){
var domify = require('domify')
var serialize = require('form-serialize')
var cloneDeep = require('deep-clone-simple')

// Build DOM elements for the structure of the dialog
var buildDialogForm = function buildDialogForm (options) {
  var form = document.createElement('form')
  form.classList.add('vex-dialog-form')

  var message = document.createElement('div')
  message.classList.add('vex-dialog-message')
  message.appendChild(options.message instanceof window.Node ? options.message : domify(options.message))

  var input = document.createElement('div')
  input.classList.add('vex-dialog-input')
  input.appendChild(options.input instanceof window.Node ? options.input : domify(options.input))

  form.appendChild(message)
  form.appendChild(input)

  return form
}

// Take an array of buttons (see the default buttons below) and turn them into DOM elements
var buttonsToDOM = function buttonsToDOM (buttons) {
  var domButtons = document.createElement('div')
  domButtons.classList.add('vex-dialog-buttons')

  for (var i = 0; i < buttons.length; i++) {
    var button = buttons[i]
    var domButton = document.createElement('button')
    domButton.type = button.type
    domButton.textContent = button.text
    domButton.className = button.className
    domButton.classList.add('vex-dialog-button')
    if (i === 0) {
      domButton.classList.add('vex-first')
    } else if (i === buttons.length - 1) {
      domButton.classList.add('vex-last')
    }
    // Attach click listener to button with closure
    (function (button) {
      domButton.addEventListener('click', function (e) {
        if (button.click) {
          button.click.call(this, e)
        }
      }.bind(this))
    }.bind(this)(button))

    domButtons.appendChild(domButton)
  }

  return domButtons
}

var plugin = function plugin (vex) {
  // Define the API first
  var dialog = {
    // Plugin name
    name: 'dialog',

    // Open
    open: function open (opts) {
      var options = Object.assign({}, cloneDeep(this.defaultOptions), opts)

      // `message` is unsafe internally, so translate
      // safe default: HTML-escape the message before passing it through
      if (options.unsafeMessage && !options.message) {
        options.message = options.unsafeMessage
      } else if (options.message) {
        options.message = vex._escapeHtml(options.message)
      }

      // Build the form from the options
      var form = options.unsafeContent = buildDialogForm(options)

      // Open the dialog
      var dialogInstance = vex.open(options)

      if (options.yesText !== '') {
        options.buttons[0].text = options.yesText
      }

      if (options.noText !== '') {
        options.buttons[1].text = options.noText
      }

      // Quick comment - these options and appending buttons and everything
      // would preferably be done _before_ opening the dialog. However, since
      // they rely on the context of the vex instance, we have to do them
      // after. A potential future fix would be to differentiate between
      // a "created" vex instance and an "opened" vex instance, so any actions
      // that rely on the specific context of the instance can do their stuff
      // before opening the dialog on the page.

      // Override the before close callback to also pass the value of the form
      var beforeClose = options.beforeClose && options.beforeClose.bind(dialogInstance)
      dialogInstance.options.beforeClose = function dialogBeforeClose () {
        // Only call the callback once - when the validation in beforeClose, if present, is true
        var shouldClose = beforeClose ? beforeClose() : true
        if (shouldClose) {
          options.callback(this.value || false)
        }
        // Return the result of beforeClose() to vex
        return shouldClose
      }.bind(dialogInstance)

      // Append buttons to form with correct context
      form.appendChild(buttonsToDOM.call(dialogInstance, options.buttons))

      // Attach form to instance
      dialogInstance.form = form

      // Add submit listener to form
      form.addEventListener('submit', options.onSubmit.bind(dialogInstance))

      // Optionally focus the first input in the form
      if (options.focusFirstInput) {
        var el = dialogInstance.contentEl.querySelector('button, input, select, textarea')
        if (el) {
          el.focus()
        }
      }

      // For chaining
      return dialogInstance
    },

    // Alert
    alert: function (options) {
      // Allow string as message
      if (typeof options === 'string') {
        options = {
          message: options
        }
      }
      options = Object.assign({}, cloneDeep(this.defaultOptions), cloneDeep(this.defaultAlertOptions), options)
      return this.open(options)
    },

    // Confirm
    confirm: function (options) {
      if (typeof options !== 'object' || typeof options.callback !== 'function') {
        throw new Error('dialog.confirm(options) requires options.callback.')
      }
      options = Object.assign({}, cloneDeep(this.defaultOptions), cloneDeep(this.defaultConfirmOptions), options)
      return this.open(options)
    },

    // Prompt
    prompt: function (options) {
      if (typeof options !== 'object' || typeof options.callback !== 'function') {
        throw new Error('dialog.prompt(options) requires options.callback.')
      }
      var defaults = Object.assign({}, cloneDeep(this.defaultOptions), cloneDeep(this.defaultPromptOptions))
      var dynamicDefaults = {
        unsafeMessage: '<label for="vex">' + vex._escapeHtml(options.label || defaults.label) + '</label>',
        input: '<input name="vex" type="text" class="vex-dialog-prompt-input" placeholder="' + vex._escapeHtml(options.placeholder || defaults.placeholder) + '" value="' + vex._escapeHtml(options.value || defaults.value) + '" />'
      }
      options = Object.assign(defaults, dynamicDefaults, options)
      // Pluck the value of the "vex" input field as the return value for prompt's callback
      // More closely mimics "window.prompt" in that a single string is returned
      var callback = options.callback
      options.callback = function promptCallback (value) {
        if (typeof value === 'object') {
          var keys = Object.keys(value)
          value = keys.length ? value[keys[0]] : ''
        }
        callback(value)
      }
      return this.open(options)
    }
  }

  // Now define any additional data that's not the direct dialog API
  dialog.buttons = {
    YES: {
      text: 'OK',
      type: 'submit',
      className: 'vex-dialog-button-primary',
      click: function yesClick () {
        this.value = true
      }
    },

    NO: {
      text: 'Cancel',
      type: 'button',
      className: 'vex-dialog-button-secondary',
      click: function noClick () {
        this.value = false
        this.close()
      }
    }
  }

  dialog.defaultOptions = {
    callback: function () {},
    afterOpen: function () {},
    message: '',
    input: '',
    yesText: '',
    noText: '',
    buttons: [
      dialog.buttons.YES,
      dialog.buttons.NO
    ],
    showCloseButton: false,
    onSubmit: function onDialogSubmit (e) {
      e.preventDefault()
      if (this.options.input) {
        this.value = serialize(this.form, { hash: true })
      }
      return this.close()
    },
    focusFirstInput: true
  }

  dialog.defaultAlertOptions = {
    buttons: [
      dialog.buttons.YES
    ]
  }

  dialog.defaultPromptOptions = {
    label: 'Prompt:',
    placeholder: '',
    value: ''
  }

  dialog.defaultConfirmOptions = {}

  return dialog
}

module.exports = plugin

},{"deep-clone-simple":1,"domify":2,"form-serialize":3}]},{},[4])(4)
});

/***/ }),

/***/ "./node_modules/vex-js/dist/js/vex.js":
/*!********************************************!*\
  !*** ./node_modules/vex-js/dist/js/vex.js ***!
  \********************************************/
/***/ ((module) => {

(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=undefined;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=undefined;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.1.20170427
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

if ("document" in window.self) {

// Full polyfill for browsers with no classList support
// Including IE < Edge missing SVGElement.classList
if (!("classList" in document.createElement("_")) 
	|| document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg","g"))) {

(function (view) {

"use strict";

if (!('Element' in view)) return;

var
	  classListProp = "classList"
	, protoProp = "prototype"
	, elemCtrProto = view.Element[protoProp]
	, objCtr = Object
	, strTrim = String[protoProp].trim || function () {
		return this.replace(/^\s+|\s+$/g, "");
	}
	, arrIndexOf = Array[protoProp].indexOf || function (item) {
		var
			  i = 0
			, len = this.length
		;
		for (; i < len; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	}
	// Vendors: please allow content code to instantiate DOMExceptions
	, DOMEx = function (type, message) {
		this.name = type;
		this.code = DOMException[type];
		this.message = message;
	}
	, checkTokenAndGetIndex = function (classList, token) {
		if (token === "") {
			throw new DOMEx(
				  "SYNTAX_ERR"
				, "An invalid or illegal string was specified"
			);
		}
		if (/\s/.test(token)) {
			throw new DOMEx(
				  "INVALID_CHARACTER_ERR"
				, "String contains an invalid character"
			);
		}
		return arrIndexOf.call(classList, token);
	}
	, ClassList = function (elem) {
		var
			  trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
			, i = 0
			, len = classes.length
		;
		for (; i < len; i++) {
			this.push(classes[i]);
		}
		this._updateClassName = function () {
			elem.setAttribute("class", this.toString());
		};
	}
	, classListProto = ClassList[protoProp] = []
	, classListGetter = function () {
		return new ClassList(this);
	}
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
	return this[i] || null;
};
classListProto.contains = function (token) {
	token += "";
	return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.remove = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
		, index
	;
	do {
		token = tokens[i] + "";
		index = checkTokenAndGetIndex(this, token);
		while (index !== -1) {
			this.splice(index, 1);
			updated = true;
			index = checkTokenAndGetIndex(this, token);
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.toggle = function (token, force) {
	token += "";

	var
		  result = this.contains(token)
		, method = result ?
			force !== true && "remove"
		:
			force !== false && "add"
	;

	if (method) {
		this[method](token);
	}

	if (force === true || force === false) {
		return force;
	} else {
		return !result;
	}
};
classListProto.toString = function () {
	return this.join(" ");
};

if (objCtr.defineProperty) {
	var classListPropDesc = {
		  get: classListGetter
		, enumerable: true
		, configurable: true
	};
	try {
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	} catch (ex) { // IE 8 doesn't support enumerable:true
		// adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
		// modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
		if (ex.number === undefined || ex.number === -0x7FF5EC54) {
			classListPropDesc.enumerable = false;
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		}
	}
} else if (objCtr[protoProp].__defineGetter__) {
	elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(window.self));

}

// There is full or partial native classList support, so just check if we need
// to normalize the add/remove and toggle APIs.

(function () {
	"use strict";

	var testElement = document.createElement("_");

	testElement.classList.add("c1", "c2");

	// Polyfill for IE 10/11 and Firefox <26, where classList.add and
	// classList.remove exist but support only one argument at a time.
	if (!testElement.classList.contains("c2")) {
		var createMethod = function(method) {
			var original = DOMTokenList.prototype[method];

			DOMTokenList.prototype[method] = function(token) {
				var i, len = arguments.length;

				for (i = 0; i < len; i++) {
					token = arguments[i];
					original.call(this, token);
				}
			};
		};
		createMethod('add');
		createMethod('remove');
	}

	testElement.classList.toggle("c3", false);

	// Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	// support the second argument.
	if (testElement.classList.contains("c3")) {
		var _toggle = DOMTokenList.prototype.toggle;

		DOMTokenList.prototype.toggle = function(token, force) {
			if (1 in arguments && !this.contains(token) === !force) {
				return force;
			} else {
				return _toggle.call(this, token);
			}
		};

	}

	testElement = null;
}());

}

},{}],2:[function(require,module,exports){

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Tests for browser support.
 */

var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== 'undefined') {
  bugTestDiv = document.createElement('div');
  // Setup
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  // Make sure that link elements get serialized correctly by innerHTML
  // This requires a wrapper element in IE
  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
  bugTestDiv = undefined;
}

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};

map.td =
map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option =
map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead =
map.tbody =
map.colgroup =
map.caption =
map.tfoot = [1, '<table>', '</table>'];

map.polyline =
map.ellipse =
map.polygon =
map.circle =
map.text =
map.line =
map.path =
map.rect =
map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }

  return fragment;
}

},{}],3:[function(require,module,exports){
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */

'use strict';

function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};

},{}],4:[function(require,module,exports){
// classList polyfill for old browsers
require('classlist-polyfill')
// Object.assign polyfill
require('es6-object-assign').polyfill()

// String to DOM function
var domify = require('domify')

// Use the DOM's HTML parsing to escape any dangerous strings
var escapeHtml = function escapeHtml (str) {
  if (typeof str !== 'undefined') {
    var div = document.createElement('div')
    div.appendChild(document.createTextNode(str))
    return div.innerHTML
  } else {
    return ''
  }
}

// Utility function to add space-delimited class strings to a DOM element's classList
var addClasses = function addClasses (el, classStr) {
  if (typeof classStr !== 'string' || classStr.length === 0) {
    return
  }
  var classes = classStr.split(' ')
  for (var i = 0; i < classes.length; i++) {
    var className = classes[i]
    if (className.length) {
      el.classList.add(className)
    }
  }
}

// Detect CSS Animation End Support
// https://github.com/limonte/sweetalert2/blob/99bd539f85e15ac170f69d35001d12e092ef0054/src/utils/dom.js#L194
var animationEndEvent = (function detectAnimationEndEvent () {
  var el = document.createElement('div')
  var eventNames = {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'animationend',
    'OAnimation': 'oanimationend',
    'msAnimation': 'MSAnimationEnd'
  }
  for (var i in eventNames) {
    if (el.style[i] !== undefined) {
      return eventNames[i]
    }
  }
  return false
})()

// vex base CSS classes
var baseClassNames = {
  vex: 'vex',
  content: 'vex-content',
  overlay: 'vex-overlay',
  close: 'vex-close',
  closing: 'vex-closing',
  open: 'vex-open'
}

// Private lookup table of all open vex objects, keyed by id
var vexes = {}
var globalId = 1

// Private boolean to assist the escapeButtonCloses option
var isEscapeActive = false

// vex itself is an object that exposes a simple API to open and close vex objects in various ways
var vex = {
  open: function open (opts) {
    // Check for usage of deprecated options, and log a warning
    var warnDeprecated = function warnDeprecated (prop) {
      console.warn('The "' + prop + '" property is deprecated in vex 3. Use CSS classes and the appropriate "ClassName" options, instead.')
      console.warn('See http://github.hubspot.com/vex/api/advanced/#options')
    }
    if (opts.css) {
      warnDeprecated('css')
    }
    if (opts.overlayCSS) {
      warnDeprecated('overlayCSS')
    }
    if (opts.contentCSS) {
      warnDeprecated('contentCSS')
    }
    if (opts.closeCSS) {
      warnDeprecated('closeCSS')
    }

    // The dialog instance
    var vexInstance = {}

    // Set id
    vexInstance.id = globalId++

    // Store internally
    vexes[vexInstance.id] = vexInstance

    // Set state
    vexInstance.isOpen = true

    // Close function on the vex instance
    // This is how all API functions should close individual vexes
    vexInstance.close = function instanceClose () {
      // Check state
      if (!this.isOpen) {
        return true
      }

      var options = this.options

      // escapeButtonCloses is checked first
      if (isEscapeActive && !options.escapeButtonCloses) {
        return false
      }

      // Allow the user to validate any info or abort the close with the beforeClose callback
      var shouldClose = (function shouldClose () {
        // Call before close callback
        if (options.beforeClose) {
          return options.beforeClose.call(this)
        }
        // Otherwise indicate that it's ok to continue with close
        return true
      }.bind(this)())

      // If beforeClose() fails, abort the close
      if (shouldClose === false) {
        return false
      }

      // Update state
      this.isOpen = false

      // Detect if the content el has any CSS animations defined
      var style = window.getComputedStyle(this.contentEl)
      function hasAnimationPre (prefix) {
        return style.getPropertyValue(prefix + 'animation-name') !== 'none' && style.getPropertyValue(prefix + 'animation-duration') !== '0s'
      }
      var hasAnimation = hasAnimationPre('') || hasAnimationPre('-webkit-') || hasAnimationPre('-moz-') || hasAnimationPre('-o-')

      // Define the function that will actually close the instance
      var close = function close () {
        if (!this.rootEl.parentNode) {
          return
        }
        // Run once
        this.rootEl.removeEventListener(animationEndEvent, close)
        this.overlayEl.removeEventListener(animationEndEvent, close)
        // Remove from lookup table (prevent memory leaks)
        delete vexes[this.id]
        // Remove the dialog from the DOM
        this.rootEl.parentNode.removeChild(this.rootEl)
        // Remove the overlay from the DOM
        this.bodyEl.removeChild(this.overlayEl)
        // Call after close callback
        if (options.afterClose) {
          options.afterClose.call(this)
        }
        // Remove styling from the body, if no more vexes are open
        if (Object.keys(vexes).length === 0) {
          document.body.classList.remove(baseClassNames.open)
        }
      }.bind(this)

      // Close the vex
      if (animationEndEvent && hasAnimation) {
        // Setup the end event listener, to remove the el from the DOM
        this.rootEl.addEventListener(animationEndEvent, close)
        this.overlayEl.addEventListener(animationEndEvent, close)
        // Add the closing class to the dialog, showing the close animation
        this.rootEl.classList.add(baseClassNames.closing)
        this.overlayEl.classList.add(baseClassNames.closing)
      } else {
        close()
      }

      return true
    }

    // Allow strings as content
    if (typeof opts === 'string') {
      opts = {
        content: opts
      }
    }

    // `content` is unsafe internally, so translate
    // safe default: HTML-escape the content before passing it through
    if (opts.unsafeContent && !opts.content) {
      opts.content = opts.unsafeContent
    } else if (opts.content) {
      opts.content = escapeHtml(opts.content)
    }

    // Store options on instance for future reference
    var options = vexInstance.options = Object.assign({}, vex.defaultOptions, opts)

    // Get Body Element
    var bodyEl = vexInstance.bodyEl = document.getElementsByTagName('body')[0]

    // vex root
    var rootEl = vexInstance.rootEl = document.createElement('div')
    rootEl.classList.add(baseClassNames.vex)
    addClasses(rootEl, options.className)

    // Overlay
    var overlayEl = vexInstance.overlayEl = document.createElement('div')
    overlayEl.classList.add(baseClassNames.overlay)
    addClasses(overlayEl, options.overlayClassName)
    if (options.overlayClosesOnClick) {
      rootEl.addEventListener('click', function overlayClickListener (e) {
        if (e.target === rootEl) {
          vexInstance.close()
        }
      })
    }
    bodyEl.appendChild(overlayEl)

    // Content
    var contentEl = vexInstance.contentEl = document.createElement('div')
    contentEl.classList.add(baseClassNames.content)
    addClasses(contentEl, options.contentClassName)
    contentEl.appendChild(options.content instanceof window.Node ? options.content : domify(options.content))
    rootEl.appendChild(contentEl)

    // Close button
    if (options.showCloseButton) {
      var closeEl = vexInstance.closeEl = document.createElement('div')
      closeEl.classList.add(baseClassNames.close)
      addClasses(closeEl, options.closeClassName)
      closeEl.addEventListener('click', vexInstance.close.bind(vexInstance))
      contentEl.appendChild(closeEl)
    }

    // Add to DOM
    document.querySelector(options.appendLocation).appendChild(rootEl)

    // Call after open callback
    if (options.afterOpen) {
      options.afterOpen.call(vexInstance)
    }

    // Apply styling to the body
    document.body.classList.add(baseClassNames.open)

    // Return the created vex instance
    return vexInstance
  },

  // A top-level vex.close function to close dialogs by reference or id
  close: function close (vexOrId) {
    var id
    if (vexOrId.id) {
      id = vexOrId.id
    } else if (typeof vexOrId === 'string') {
      id = vexOrId
    } else {
      throw new TypeError('close requires a vex object or id string')
    }
    if (!vexes[id]) {
      return false
    }
    return vexes[id].close()
  },

  // Close the most recently created/opened vex
  closeTop: function closeTop () {
    var ids = Object.keys(vexes)
    if (!ids.length) {
      return false
    }
    return vexes[ids[ids.length - 1]].close()
  },

  // Close every vex!
  closeAll: function closeAll () {
    for (var id in vexes) {
      this.close(id)
    }
    return true
  },

  // A getter for the internal lookup table
  getAll: function getAll () {
    return vexes
  },

  // A getter for the internal lookup table
  getById: function getById (id) {
    return vexes[id]
  }
}

// Close top vex on escape
window.addEventListener('keyup', function vexKeyupListener (e) {
  if (e.keyCode === 27) {
    isEscapeActive = true
    vex.closeTop()
    isEscapeActive = false
  }
})

// Close all vexes on history pop state (useful in single page apps)
window.addEventListener('popstate', function () {
  if (vex.defaultOptions.closeAllOnPopState) {
    vex.closeAll()
  }
})

vex.defaultOptions = {
  content: '',
  showCloseButton: true,
  escapeButtonCloses: true,
  overlayClosesOnClick: true,
  appendLocation: 'body',
  className: '',
  overlayClassName: '',
  contentClassName: '',
  closeClassName: '',
  closeAllOnPopState: true
}

// TODO Loading symbols?

// Include escapeHtml function on the library object
Object.defineProperty(vex, '_escapeHtml', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: escapeHtml
})

// Plugin system!
vex.registerPlugin = function registerPlugin (pluginFn, name) {
  var plugin = pluginFn(vex)
  var pluginName = name || plugin.name
  if (vex[pluginName]) {
    throw new Error('Plugin ' + name + ' is already registered.')
  }
  vex[pluginName] = plugin
}

module.exports = vex

},{"classlist-polyfill":1,"domify":2,"es6-object-assign":3}]},{},[4])(4)
});

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"vorple","version":"3.2.5","description":"Vorple Interactive Fiction User Interface Library","scripts":{"lint":"jshint src/*.js","start":"webpack serve","start:test":"NODE_ENV=unittest webpack serve","build":"rm -rf dist lib && webpack && babel --presets=@babel/preset-env -d lib/ src/index.js && babel --presets=@babel/preset-env -d lib/vorple/ src/vorple/*.js && babel --presets=@babel/preset-env -d lib/haven/ src/haven/*.js && cp -r src/quixe lib && mkdir -p lib/css && cat dist/interpreter/roboto.css dist/interpreter/jquery.powertip.css dist/interpreter/toastr.css dist/interpreter/vex.css dist/interpreter/vex-theme-plain.css dist/interpreter/haven.css dist/interpreter/vorple.css > lib/css/vorple.css && cp dist/interpreter/roboto-*.woff* lib/css/","build:test":"./tests/stories/compile.sh","test":"wdio wdio.conf.js","test:chrome":"BROWSER=chrome wdio wdio.conf.js","test:firefox":"BROWSER=firefox wdio wdio.conf.js","test:safari":"BROWSER=safari wdio wdio.conf.js --exclude ./tests/specs/audio.test.js","test:all":"npm run test:chrome && npm run test:firefox && npm run test:safari"},"repository":"github:vorple/vorple","author":"Juhana Leinonen","license":"MIT","bugs":{"url":"https://github.com/vorple/vorple/issues"},"homepage":"https://vorple-if.com","main":"./lib/index.js","files":["assets","dist","lib","src/haven/*.js","src/quixe","src/vorple","src/index.js"],"devDependencies":{"@babel/cli":"7.13.10","@babel/core":"7.13.10","@babel/plugin-transform-runtime":"7.13.10","@babel/preset-env":"7.13.10","@babel/runtime":"7.13.10","@wdio/cli":"7.2.0","@wdio/dot-reporter":"7.2.0","@wdio/local-runner":"7.2.0","@wdio/mocha-framework":"7.2.0","@wdio/selenium-standalone-service":"7.2.0","@wdio/sync":"7.2.0","chai":"4.3.4","chai-webdriverio":"1.0.0","chromedriver":"89.0.0","copy-webpack-plugin":"8.0.0","jshint":"2.12.0","path-browserify":"1.0.1","wdio-chromedriver-service":"7.0.0","webpack":"5.26.3","webpack-cli":"4.5.0","webpack-dev-server":"3.11.2"},"dependencies":{"browserfs":"1.4.3","custom-event-polyfill":"1.0.7","jquery":"3.6.0","jquery-powertip":"1.3.1","toastr":"2.1.4","vex-dialog":"1.1.0","vex-js":"4.1.0"}}');

/***/ }),

/***/ "./src/haven/assets.js":
/*!*****************************!*\
  !*** ./src/haven/assets.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addCallback": () => (/* binding */ addCallback),
/* harmony export */   "expect": () => (/* binding */ expect),
/* harmony export */   "finalCallback": () => (/* binding */ finalCallback),
/* harmony export */   "finished": () => (/* binding */ finished)
/* harmony export */ });
// assets that need to load before we can start
const expectedAssets = [ "storyfile" ];

// functions that are called when all assets have loaded
const callbacks = [];

// the callback that's called the very last
let lastCallback;


/**
 * When all assets are ready, run the callbacks.
 */
async function done() {
    for( let i = 0; i < callbacks.length; ++i ) {
        await callbacks[ i ]();
    }

    if( lastCallback ) {
        await lastCallback();
    }
}


/**
 * Adds a callback that's run when all assets are ready.
 * If all assets have already loaded, call the callback immediately.
 *
 * The first parameter of the callback function must be a function that
 * itself calls as a callback when it has finished.
 *
 * @param cb
 */
function addCallback( cb ) {
    if( expectedAssets.length === 0 ) {
        // make the function consistently asynchronous
        setTimeout( cb, 0 );
    }

    callbacks.push( cb );
}


/**
 * Add an expected asset to the list.
 *
 * @param {function} asset
 */
function expect( asset ) {
    if( expectedAssets.length === 0 ) {
        console.warn( "An expected asset \"" + asset + "\" was added "
            + "but all previous assets have already finished loading" );
        return;
    }

    expectedAssets.push( asset );
}


/**
 * As a bit of a hack this ensures the game starting callback is always
 * the last one.
 *
 * @param cb
 */
function finalCallback( cb ) {
    lastCallback = cb;
}


/**
 * When an asset has finished loading, this method should be called.
 *
 * @param asset The name of the asset that's ready
 * @returns {boolean} true if asset was expected
 */
function finished( asset ) {
    const index = expectedAssets.indexOf( asset );

    if( index === -1 ) {
        return false;
    }

    // remove from the list of expected assets
    expectedAssets.splice( index, 1 );

    // if everything's ready, run the callbacks
    if( expectedAssets.length === 0 ) {
        done();
    }

    return true;
}


/***/ }),

/***/ "./src/haven/buffer.js":
/*!*****************************!*\
  !*** ./src/haven/buffer.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "append": () => (/* binding */ append),
/* harmony export */   "flush": () => (/* binding */ flush),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "newline": () => (/* binding */ newline)
/* harmony export */ });
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ "./src/haven/input.js");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./style */ "./src/haven/style.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./window */ "./src/haven/window.js");




// output buffers for all windows
const outputBuffer = [ "" ];

// custom output filters
let outputFilter = null;

/**
 * Make text HTML-printable
 *
 * @param text
 * @returns {string}
 */
function encodeHtml( text ) {
    let encoded = "";
    for( let i = 0; i < text.length; ++i ) {

        // Extended Latin-1 characters need to be added as HTML entities
        if( text.charCodeAt( i ) > 127 ) {
            encoded += "&#" + text.charCodeAt( i ) + ";";
        }
        else {
            switch( text[ i ] ) {
                case "&":
                    encoded += "&amp;";
                    break;

                case "<":
                    encoded += "&lt;";
                    break;

                case ">":
                    encoded += "&gt;";
                    break;

                case "\r":
                    encoded += "\n";
                    break;

                default:
                    encoded += text[ i ];
                    break;
            }
        }
    }

    return encoded;
}


/**
 * Add text to the text buffer
 *
 * @param text
 * @param targetWindow
 */
function append( text, targetWindow = 0 ) {
    if( !outputBuffer[ targetWindow ] ) {
        outputBuffer[ targetWindow ] = "";
    }

    if( text.indexOf( "\n" ) > -1 || text.indexOf( "\r" ) > -1 ) {
        const nextLBR = Math.max( text.lastIndexOf( "\n" ), text.lastIndexOf( "\r" ) ) + 1;

        outputBuffer[ targetWindow ] += encodeHtml( text.substr( 0, nextLBR ) );
        flush( targetWindow );
        outputBuffer[ targetWindow ] = encodeHtml( text.substr( nextLBR ) );
    }
    else {
        outputBuffer[ targetWindow ] += encodeHtml( text );
    }
}


/**
 * Print out the text buffer
 *
 * @param targetWindow
 */
function flush( targetWindow ) {
    if( targetWindow === undefined ) {
        for( var i in outputBuffer ) {
            flush( +i );
        }

        return;
    }

    if( !outputBuffer[ targetWindow ] || !(0,_window__WEBPACK_IMPORTED_MODULE_2__.get)( targetWindow ) ) {
        return;
    }

    let output = outputBuffer[ targetWindow ];

    // call output filters
    if( targetWindow === 0 && outputFilter && output !== "" ) {
        const currentStyles = _style__WEBPACK_IMPORTED_MODULE_1__.font.get()[ 0 ];
        const filterResult = outputFilter(
            output,
            {
                style: {
                    bold: Boolean( currentStyles.bold ),
                    italic: Boolean( currentStyles.italic )
                }
            }
        );

        if( typeof filterResult === "string" ) {
            output = filterResult;
        }
    }

    (0,_window__WEBPACK_IMPORTED_MODULE_2__.append)( output, targetWindow );
    outputBuffer[ targetWindow ] = "";

    if( targetWindow === 0 ) {
        (0,_input__WEBPACK_IMPORTED_MODULE_0__.textWasPrinted)( true );
    }
}


/**
 * Register the output filter
 */
function init( opt ) {
    if( opt && opt.outputFilter ) {
        outputFilter = opt.outputFilter;
    }
}


/**
 * Add a newline to the buffer.
 *
 * @param targetWindow
 */
function newline( targetWindow ) {
    if( outputBuffer[ targetWindow ] ) {
        outputBuffer[ targetWindow ] += "\n";
    }
    else {
        outputBuffer[ targetWindow ] = "\n";
    }

    flush( targetWindow );
}


/***/ }),

/***/ "./src/haven/error.js":
/*!****************************!*\
  !*** ./src/haven/error.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ error)
/* harmony export */ });
/**
 * Show an error message and halt.
 */
function error( message ) {
    const elem = document.createElement( "div" );
    const spinner = document.getElementById( "spinner" );
    const loader = document.getElementById( "loader" );

    elem.id = "fatal-error";
    elem.innerHTML = message;
    document.body.appendChild( elem );

    // remove spinner animation if error happened on load
    if( spinner ) {
        spinner.parentNode.removeChild( spinner );
    }

    // visual notification that loading has stopped
    if( loader ) {
        loader.className = "stopped";
    }

    throw new Error( message );
}


/***/ }),

/***/ "./src/haven/file.js":
/*!***************************!*\
  !*** ./src/haven/file.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "syncfs": () => (/* binding */ syncfs)
/* harmony export */ });
/**
 * Synchronize virtual filesystem status with IndexedDB.
 */
 function syncfs() {
    FS.syncfs( false, function() {});
}


/***/ }),

/***/ "./src/haven/haven.js":
/*!****************************!*\
  !*** ./src/haven/haven.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "start": () => (/* binding */ start),
/* harmony export */   "engineStops": () => (/* binding */ engineStops)
/* harmony export */ });
/* harmony import */ var _assets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assets */ "./src/haven/assets.js");
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input */ "./src/haven/input.js");
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buffer */ "./src/haven/buffer.js");
/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loader */ "./src/haven/loader.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./options */ "./src/haven/options.js");
/* harmony import */ var _prompt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./prompt */ "./src/haven/prompt.js");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./style */ "./src/haven/style.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./window */ "./src/haven/window.js");
/* harmony import */ var _file__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./file */ "./src/haven/file.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./state */ "./src/haven/state.js");









// hook that's called when the game ends (engine stops)
let quitHook = null;


/**
 * Start the game. If assets haven't loaded yet, the game starts
 * as soon as they're ready.
 */
async function start( opt ) {
    // create the HTML structure
    let havenElement;
    let containerId = "haven";  // default main container id

    // opt.container can supply a different main container element or id
    if( opt.container instanceof Element ) {
        havenElement = opt.container;
    }
    else if( opt.container && typeof opt.container === "string" ) {
        havenElement = document.querySelector( opt.container );

        if( !havenElement ) {
            if( opt.container.charAt( 0 ) === "#" && opt.container.indexOf( " " ) === -1 ) {
                containerId = opt.container.substr( 1 );
            }
            else {
                throw new Error( `Can't find element "${opt.container}" to use as the main container` );
            }
        }
    }
    else {
        havenElement = document.getElementById( "haven" );
    }

    if( !havenElement ) {
        havenElement = document.createElement( "main" );
        havenElement.id = containerId;
        document.body.appendChild( havenElement );
    }

    let outputElement = document.getElementById( "output" );

    if( !outputElement ) {
        outputElement = document.createElement( "div" );
        outputElement.id = "output";
        havenElement.appendChild( outputElement );
    }

    let windowElement = document.getElementById( "window0" );

    if( !windowElement ) {
        windowElement = document.createElement( "div" );
        windowElement.id = "window0";
        windowElement.setAttribute( "aria-live", "polite" );
        windowElement.setAttribute( "aria-atomic", "false" );
        windowElement.setAttribute( "aria-relevant", "additions" );

        outputElement.appendChild( windowElement );
    }

    let loaderContainer = document.getElementById( "loader" );

    if( !loaderContainer ) {
        loaderContainer = document.createElement( "div" );
        loaderContainer.id = "loader";
        havenElement.appendChild( loaderContainer );
    }

    let loaderMessageElement = document.getElementById( "loader-message" );

    if( !loaderMessageElement ) {
        loaderMessageElement = document.createElement( "h2" );
        loaderMessageElement.id = "loader-message";
        loaderContainer.appendChild( loaderMessageElement );
    }

    let spinnerElement = document.getElementById( "spinner" );

    if( !spinnerElement ) {
        spinnerElement = document.createElement( "h2" );
        spinnerElement.id = "spinner";
        spinnerElement.innerText = ".";
        loaderContainer.appendChild( spinnerElement );
    }

    loaderMessageElement.innerText = "Loading interpreter and game file";

    // read options from URL
    (0,_options__WEBPACK_IMPORTED_MODULE_4__.init)( opt.options );

    // load the story file
    const storyFile = opt.loadStoryFile ? await opt.loadStoryFile( opt.virtualStoryfile ) : null;

    // set up window elements
    (0,_window__WEBPACK_IMPORTED_MODULE_7__.init)();

    // set up input handlers
    (0,_input__WEBPACK_IMPORTED_MODULE_1__.init)({
        expectHook: opt.hooks && opt.hooks.expectKeypress,
        submitHook: opt.hooks && opt.hooks.submitKeypress
    });

    // set up output handlers
    (0,_buffer__WEBPACK_IMPORTED_MODULE_2__.init)({
        outputFilter: opt.hooks && opt.filters.output
    });

    // set up the prompt
    (0,_prompt__WEBPACK_IMPORTED_MODULE_5__.init)({
        engineInputFunction: opt.engineInputFunction,
        enginePrompt: !!opt.enginePrompt,
        expectHook: opt.hooks && opt.hooks.expectCommand,
        inputFilter: opt.filters && opt.filters.input,
        submitHook: opt.hooks && opt.hooks.submitCommand,
        unicode: !!opt.unicode
    });

    // initialize style options
    (0,_style__WEBPACK_IMPORTED_MODULE_6__.init)({
        engineColors: !!opt.engineColors,
        engineFontFamily: !!opt.engineFontFamily
    });

    // remove the loader
    (0,_assets__WEBPACK_IMPORTED_MODULE_0__.addCallback)( _loader__WEBPACK_IMPORTED_MODULE_3__.remove );

    // add the quit hook
    if( opt.hooks && opt.hooks.quit ) {
        quitHook = opt.hooks.quit;
    }

    // start the engine
    (0,_assets__WEBPACK_IMPORTED_MODULE_0__.finalCallback)( () => opt.startEngine( storyFile ) );

    (0,_assets__WEBPACK_IMPORTED_MODULE_0__.finished)( "storyfile" );
}









// expose methods for the C engine to use
window.haven = {
    buffer: _buffer__WEBPACK_IMPORTED_MODULE_2__,
    file: _file__WEBPACK_IMPORTED_MODULE_8__,
    input: _input__WEBPACK_IMPORTED_MODULE_1__,
    prompt: _prompt__WEBPACK_IMPORTED_MODULE_5__,
    state: _state__WEBPACK_IMPORTED_MODULE_9__,
    window: _window__WEBPACK_IMPORTED_MODULE_7__
};


/**
 * Called by the engine to tell that the game has ended
 */
function engineStops() {
    if( typeof quitHook === "function" ) {
        quitHook();
    }
}


/***/ }),

/***/ "./src/haven/input.js":
/*!****************************!*\
  !*** ./src/haven/input.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "block": () => (/* binding */ block),
/* harmony export */   "getMode": () => (/* binding */ getMode),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "isBlocked": () => (/* binding */ isBlocked),
/* harmony export */   "keypress": () => (/* binding */ keypress),
/* harmony export */   "setMode": () => (/* binding */ setMode),
/* harmony export */   "textWasPrinted": () => (/* binding */ textWasPrinted),
/* harmony export */   "unblock": () => (/* binding */ unblock)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./src/haven/buffer.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ "./src/haven/error.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./options */ "./src/haven/options.js");
/* harmony import */ var _prompt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prompt */ "./src/haven/prompt.js");





// current mode of input the game expects: buffer, getkey, getline or endgame.
// null is no input accepted (during startup)
let inputMode = null;

// stores keypresses pressed when the engine isn't specifically expecting them ("buffer" inputMode)
const keypressBuffer = [];

let isTextPrinted = false;

// custom keypress hooks
let submitHook = null;

// is input blocked?
let blocked = false;


/**
 * Prevents user input.
 */
 function block() {
    blocked = true;
}


/**
 * Returns the current input mode.
 *
 * @returns {string}
 */
function getMode() {
    return inputMode;
}


/**
 * Registers listeners and hooks
 *
 * @param {object} opt
 */
function init( opt ) {
    // register hooks
    keypress.addListener( opt.expectHook );
    submitHook = opt.submitHook;

    // listen to keypresses and mouse clicks
    const keypressFunction = ( ...args ) => {
        if( !blocked ) {
            keypress.send( ...args );
        }
    };

    document.addEventListener( "keydown", keypressFunction, false );
    document.addEventListener( "click", keypressFunction, false );
}


/**
 * Returns the input block status
 * 
 * @returns {boolean} True if blocked
 */
function isBlocked() {
    return blocked;
}


const keypressListeners = [];

const keypress = {
    /**
     * Add a listener that's called when the engine starts waiting for a keypress.
     *
     * @param {function} listener The function that's called
     * @returns {function} A function that will remove the listener when called.
     */
    addListener: function( listener ) {
        keypressListeners.push( listener );

        return () => keypress.removeListener( listener );
    },

    /**
     * Called when the game starts.
     */
    init: function() {
        // start expecting keypresses
        if( !inputMode ) {
            inputMode = "buffer";
        }
    },

    /**
     * Check if there's a keypress waiting in the buffer.
     *
     * Called by the engine.
     *
     * @returns {boolean}
     */
    isWaiting: function() {
        (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();

        if( isTextPrinted ) {
            (0,_prompt__WEBPACK_IMPORTED_MODULE_3__.scrollOrFocus)();
        }

        return keypressBuffer.length > 0;
    },

    /**
     * Remove a keypress listener.
     *
     * @param {function} listener The function to remove
     * @returns {boolean} True if the listener was found and removed, false if it wasn't found as a listener
     */
    removeListener: function( listener ) {
        const index = keypressListeners.indexOf( listener );

        if( index === -1 ) {
            return false;
        }

        keypressListeners.splice( index, 1 );

        return true;
    },

    /**
     * Send the keypress to the engine.
     *
     * @param {object} e The keypress event.
     */
    send: function( e ) {
        const keyCode = e.keyCode;
        const isClick = e instanceof MouseEvent;
        const doc = document.documentElement;
        const scrolltop = ( window.pageYOffset || doc.scrollTop ) - ( doc.clientTop || 0 );
        const promptHidden = !(0,_prompt__WEBPACK_IMPORTED_MODULE_3__.get)().parentNode;
        let shouldSendChar = false;

        // don't react to modifier keys
        if( e.altKey || e.ctrlKey || e.metaKey || e.shiftKey ) {
            return;
        }

        switch( inputMode ) {
            case "buffer":
                keypressBuffer.push( keyCode );
                break;

            case "getline":
            case null:
                // do nothing except scroll
                (0,_prompt__WEBPACK_IMPORTED_MODULE_3__.scrollOrFocus)( e );
                return;

            case "getkey":
                if( e.preventDefault ) {
                    e.preventDefault();
                }
                // continue with script
                shouldSendChar = true;
                break;

            case "endgame":
                window.location = (0,_options__WEBPACK_IMPORTED_MODULE_2__.get)( "exit_url" );
                return;

            default:
                (0,_error__WEBPACK_IMPORTED_MODULE_1__.default)( "Interpreter error: unknown input mode " + inputMode );
        }

        // let the scroll handler take this if we're not at the end of the page
        if( scrolltop + window.innerHeight < document.body.clientHeight - ( promptHidden ? 0 : 40 ) ) {
            (0,_prompt__WEBPACK_IMPORTED_MODULE_3__.scrollOrFocus)( e );

            // If the force flag is set, continue with the action.
            // Otherwise this was a user action and we can interpret it as
            // "just scroll to bottom".
            if( !e.force ) {
                return;
            }
        }

        inputMode = "buffer";

        if( shouldSendChar ) {
            if( typeof submitHook === "function" ) {
                const hook = submitHook({
                    event: e.force ? null : e,
                    input: isClick ? null : keyCode,
                    original: isClick ? null : keyCode,
                    userAction: !e.force,
                    mouseClick: isClick
                });

                if( typeof hook === "object" && hook.then ) {
                    hook.then( () => window.Glk.sendChar( keyCode ) );
                    return;
                }
            }

            window.Glk.sendChar( keyCode );
        }
    },

    wait: function() {
        inputMode = "getkey";

        (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();
        (0,_prompt__WEBPACK_IMPORTED_MODULE_3__.scrollOrFocus)();
        (0,_prompt__WEBPACK_IMPORTED_MODULE_3__.setDoScroll)();

        setTimeout( () => {
            keypressListeners.forEach( listener => listener() );

            // if there's something in the keypress buffer, "push" that key
            if( keypressBuffer.length > 0 ) {
                keypress.send({ keyCode: keypressBuffer.shift() });
            }
        }, 1 );
    }
};


/**
 * Set a new input mode.
 *
 * @param mode
 */
function setMode( mode ) {
    inputMode = mode;
}


/**
 * Makes a note that text has been printed on the screen since last check
 *
 * @param newState
 */
function textWasPrinted( newState = true ) {
    isTextPrinted = newState;
}

/**
 * Unblock the UI.
 */
 function unblock() {
    blocked = false;
}


/***/ }),

/***/ "./src/haven/loader.js":
/*!*****************************!*\
  !*** ./src/haven/loader.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "remove": () => (/* binding */ remove)
/* harmony export */ });
function remove() {
    const loaderOverlay = document.getElementById( "loader" );

    if( loaderOverlay ) {
        loaderOverlay.parentNode.removeChild( loaderOverlay );
    }
}


/***/ }),

/***/ "./src/haven/options.js":
/*!******************************!*\
  !*** ./src/haven/options.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getParameter": () => (/* binding */ getParameter),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "set": () => (/* binding */ set)
/* harmony export */ });
let opt = {
    autosave: true,
    exit_url: "",
    extra_opcodes: true,
    proxy_url: "https://zcode.appspot.com/proxy/?encode=base64&callback=processBase64Zcode&url=%s",
    use_proxy: "auto",
    windowing: true
};


/**
 * Parse a GET parameter.
 *
 * @param name
 * @param type
 * @param defaultValue
 */
function getParameter( name, type, defaultValue ) {
    var valueSearch = new RegExp( "[?&]" + name + "=(.*?)(#|&|$)", "i" ).exec( window.location.href ),
        value;

    if( valueSearch === null || valueSearch.length < 2 ) {
        return defaultValue;
    }

    value = decodeURIComponent( valueSearch[ 1 ].split( "+" ).join( " " ) );

    switch( type ) {
        case "boolean":
            if( value.toLowerCase() === "true" || value === "on" || value === "1" ) {
                return true;
            }

            if( value.toLowerCase() === "false" || value === "off" || value === "0" ) {
                return false;
            }

            return defaultValue;

        case "number":
            if( parseFloat( value ) + "" === value ) {
                return parseFloat( value );
            }

            return NaN;

        default:
            if( value.length === 0 ) {
                return defaultValue;
            }

            return value;
    }
}


/**
 * Returns the value of an option.
 *
 * @param name
 * @returns {*}
 */
function get( name ) {
    return opt[ name ];
}


/**
 * Read options from the URL
 */
function init( defaults ) {
    let option_key;

    defaults = defaults || {};

    opt = {
        ...opt,
        ...defaults
    };

    if( !opt.lock_story ) {
        // provide "storyfile" as an option to "story" to get around Quixe's automatic storyfile download if necessary
        opt.story = getParameter( "story", "string", opt.story ) || getParameter( "storyfile", "string", opt.story );
    }

    if( !opt.lock_options ) {
        for( option_key in opt ) {
            if( option_key !== "story" && option_key !== "storyfile" && option_key in opt ) {
                opt[ option_key ] = getParameter( option_key, typeof opt[ option_key ], opt[ option_key ] );
            }
        }

        // special cases
        if( opt.exit_url === "false" || opt.exit_url === "0" ) {
            opt.exit_url = false;
        }
    }
}


/**
 * Set the value of an option.
 *
 * @param name
 * @returns {*}
 */
function set( name, value ) {
    opt[ name ] = value;
}


/***/ }),

/***/ "./src/haven/prompt.js":
/*!*****************************!*\
  !*** ./src/haven/prompt.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expectInput": () => (/* binding */ expectInput),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "history": () => (/* binding */ history),
/* harmony export */   "sendCommand": () => (/* binding */ sendCommand),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "isReady": () => (/* binding */ isReady),
/* harmony export */   "prefix": () => (/* binding */ prefix),
/* harmony export */   "scrollOrFocus": () => (/* binding */ scrollOrFocus),
/* harmony export */   "setDoScroll": () => (/* binding */ setDoScroll),
/* harmony export */   "setEngineInputFunction": () => (/* binding */ setEngineInputFunction),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./src/haven/buffer.js");
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input */ "./src/haven/input.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "./src/haven/state.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./window */ "./src/haven/window.js");








// command history
let cmdHistory = [];

// current position in the command history.
let currentCmdIndex = 0;

// stores the currently typed command when browsing the history
let currentCmdText = "";

// should the screen scroll down? Set to false after screen clear.
let doScroll = false;

// does the engine handle printing the prompt prefix?
let enginePrompt = false;

// input element
let inputElem = null;

// prefix, i.e. the > or whatever else is shown before the input field
let prefixElem = null;

// the parent prompt form element
let promptElem = null;

// new event type for others (mainly Vorple) who need to know when line
// input is available
let lineinputReadyEvent = new CustomEvent( "lineinputReady" );

// the hooks that are called when the engine requests and sends lineinput
let expectHook = null;
let submitHook = null;

// the input filter that's applied to input going to the engine
let inputFilter = null;

// the function that sends the command to the engine
let sendToEngine = null;


/**
 * Append the line input to the transcript.
 *
 * @param caret
 * @param inputText
 * @param targetContainer
 */
function appendPrompt( caret, inputText, targetContainer = 0 ) {
    const target = _window__WEBPACK_IMPORTED_MODULE_3__.container.get( targetContainer );
    const lastLineinput = document.createElement( "div" );
    const lastPrefix = document.createElement( "span" );
    const lastCommand = document.createElement( "span" );

    // remove the last marker from the previously last input
    const previousLastPrompt = document.querySelector( ".lineinput.last" );

    if( previousLastPrompt ) {
        previousLastPrompt.classList.remove( "last" );
    }

    lastLineinput.className = "lineinput last";
    lastPrefix.className = "prompt-prefix";
    lastCommand.className = "prompt-input";

    lastPrefix.innerHTML = caret;
    lastCommand.innerHTML = inputText;

    lastLineinput.appendChild( lastPrefix );
    lastLineinput.appendChild( lastCommand );

    target.appendChild( lastLineinput );
}


/**
 * Change the prompt input to next or previous command in the command history.
 *
 * @param delta 1 for next command, -1 for previous
 */
function getCmdFromHistory( delta ) {
    const current = currentCmdIndex;
    const newCurrent = current + delta;
    const historyLength = cmdHistory.length;

    if( current === historyLength ) {
        currentCmdText = inputElem.value;
    }

    // Check it's within range
    if( newCurrent < historyLength && newCurrent >= 0 ) {
        inputElem.value = cmdHistory[ newCurrent ];
        currentCmdIndex = newCurrent;
    }
    else if( newCurrent === historyLength ) {
        inputElem.value = currentCmdText;
        currentCmdIndex = newCurrent;
    }
}


/**
 * Scroll down until text content becomes visible.
 */
function scrollToContent() {
    const output = (0,_window__WEBPACK_IMPORTED_MODULE_3__.get)( 0 );
    const statusline = (0,_window__WEBPACK_IMPORTED_MODULE_3__.get)( 1 );
    const nodes = textNodesUnder( output );
    const scrolltop = ( window.pageYOffset || document.documentElement.scrollTop ) - ( document.documentElement.clientTop || 0 );
    const nonWhitespaceRegex = /\S/;

    for( let i = 0; i < nodes.length; ++i ) {
        if( nonWhitespaceRegex.test( nodes[ i ].textContent ) ) {
            let newScrollTop = nodes[ i ].parentNode.getBoundingClientRect().top - window.innerHeight / 3;

            if( statusline ) {
                newScrollTop += statusline.getBoundingClientRect().height;
            }

            if( scrolltop < newScrollTop ) {
                window.scrollTo( 0, newScrollTop );
            }
            return;
        }
    }
}


/**
 * Get all text nodes contained by a DOM node
 *
 * From http://stackoverflow.com/a/10730777
 *
 * @param node
 * @returns {Array}
 */
function textNodesUnder( node ) {
    let all = [];

    for( node = node.firstChild; node; node = node.nextSibling ) {
        if( node.nodeType === 3 ) {
            all.push( node );
        }
        else {
            all = all.concat( textNodesUnder( node ) );
        }
    }

    return all;
}


/**
 * The engine is expecting lineinput. Show the prompt and trigger custom hooks.
 */
function expectInput() {
    // show the prompt
    show();

    // rotate turn markers
    const parentWindow = (0,_window__WEBPACK_IMPORTED_MODULE_3__.get)( 0 );
    const previousTurn = parentWindow.querySelector( ".turn.previous" );

    if( previousTurn ) {
        previousTurn.classList.remove( "previous" );
    }

    const currentTurn = parentWindow.querySelector( ".turn.current" );

    if( currentTurn ) {
        currentTurn.classList.remove( "current" );
        currentTurn.classList.add( "previous" );
    }

    // trigger hooks
    if( typeof expectHook === "function" ) {
        setTimeout( expectHook, 1 );
    }
}


/**
 * Getter for the lineinput form element.
 *
 * @returns {Element}
 */
function get() {
    return promptElem;
}


/**
 * Hide the prompt and stop expecting line input.
 */
function hide() {
    (0,_input__WEBPACK_IMPORTED_MODULE_1__.setMode)( "buffer" );

    if( promptElem.parentNode ) {
        promptElem.parentNode.removeChild( promptElem );
    }
}


/**
 * Add, remove, and clear commands in the history.
 */
const history = {
    /**
     * Add a command to the command history.
     *
     * @param cmd
     * @returns {boolean} True if successful
     */
    add: function( cmd ) {
        if( cmd ) {
            cmdHistory.push( cmd );

            // if the index was at the end of command history
            // (not currently browsing), make sure it stays there
            if( currentCmdIndex === cmdHistory.length - 1 ) {
                currentCmdIndex++;
            }

            return true;
        }

        return false;
    },


    /**
     * Clear the entire command history.
     */
    clear: function() {
        cmdHistory = [];
        currentCmdIndex = 0;
    },


    /**
     * Returns a copy of the entire command history.
     *
     * @returns {Array}
     */
    get: function() {
        return cmdHistory.slice();
    },


    /**
     * Remove a single item from the command history.
     *
     * @param {number} index The index of the command to remove. If empty,
     *  the last command will be removed.
     * @returns {boolean} True if removal was successful.
     */
    remove: function( index ) {
        if( cmdHistory.length === 0 ) {
            return false;
        }

        if( typeof index !== "number" ) {
            cmdHistory.pop();

            if( currentCmdIndex > cmdHistory.length ) {
                currentCmdIndex = cmdHistory.length;
            }

            return true;
        }

        if( index < 0 || index >= cmdHistory.length ) {
            return false;
        }

        cmdHistory.splice( index, 1 );

        // if this caused the history elements to shift and the current index
        // was in the part that shifted, move the index to match the old spot
        if( currentCmdIndex > index ) {
            currentCmdIndex--;
        }

        return true;
    },


    /**
     * Sets a completely new command history.
     *
     * @param {Array} newHistory An array of strings that becomes the new
     *  command history.
     */
    set: function( newHistory ) {
        cmdHistory = newHistory.slice();
    }
};


// Convert accented characters to plain ASCII. From http://stackoverflow.com/a/18391901
const defaultDiacriticsRemovalMap = [
    {
        base: "A",
        letters: "\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
    },
    { base: "AA", letters: "\uA732" },
    { base: "AE", letters: "\u00C6\u01FC\u01E2" },
    { base: "AO", letters: "\uA734" },
    { base: "AU", letters: "\uA736" },
    { base: "AV", letters: "\uA738\uA73A" },
    { base: "AY", letters: "\uA73C" },
    {
        base: "B",
        letters: "\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181"
    },
    {
        base: "C",
        letters: "\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E"
    },
    {
        base: "D",
        letters: "\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779"
    },
    { base: "DZ", letters: "\u01F1\u01C4" },
    { base: "Dz", letters: "\u01F2\u01C5" },
    {
        base: "E",
        letters: "\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E"
    },
    { base: "F", letters: "\u0046\u24BB\uFF26\u1E1E\u0191\uA77B" },
    {
        base: "G",
        letters: "\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E"
    },
    {
        base: "H",
        letters: "\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
    },
    {
        base: "I",
        letters: "\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
    },
    { base: "J", letters: "\u004A\u24BF\uFF2A\u0134\u0248" },
    {
        base: "K",
        letters: "\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
    },
    {
        base: "L",
        letters: "\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
    },
    { base: "LJ", letters: "\u01C7" },
    { base: "Lj", letters: "\u01C8" },
    { base: "M", letters: "\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C" },
    {
        base: "N",
        letters: "\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4"
    },
    { base: "NJ", letters: "\u01CA" },
    { base: "Nj", letters: "\u01CB" },
    {
        base: "O",
        letters: "\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C"
    },
    { base: "OI", letters: "\u01A2" },
    { base: "OO", letters: "\uA74E" },
    { base: "OU", letters: "\u0222" },
    { base: "OE", letters: "\u008C\u0152" },
    { base: "oe", letters: "\u009C\u0153" },
    {
        base: "P",
        letters: "\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
    },
    { base: "Q", letters: "\u0051\u24C6\uFF31\uA756\uA758\u024A" },
    {
        base: "R",
        letters: "\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
    },
    {
        base: "S",
        letters: "\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
    },
    {
        base: "T",
        letters: "\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
    },
    { base: "TZ", letters: "\uA728" },
    {
        base: "U",
        letters: "\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
    },
    { base: "V", letters: "\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
    { base: "VY", letters: "\uA760" },
    {
        base: "W",
        letters: "\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
    },
    { base: "X", letters: "\u0058\u24CD\uFF38\u1E8A\u1E8C" },
    {
        base: "Y",
        letters: "\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
    },
    {
        base: "Z",
        letters: "\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
    },
    {
        base: "a",
        letters: "\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250"
    },
    { base: "aa", letters: "\uA733" },
    { base: "ae", letters: "\u00E6\u01FD\u01E3" },
    { base: "ao", letters: "\uA735" },
    { base: "au", letters: "\uA737" },
    { base: "av", letters: "\uA739\uA73B" },
    { base: "ay", letters: "\uA73D" },
    {
        base: "b",
        letters: "\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253"
    },
    {
        base: "c",
        letters: "\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184"
    },
    {
        base: "d",
        letters: "\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A"
    },
    { base: "dz", letters: "\u01F3\u01C6" },
    {
        base: "e",
        letters: "\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD"
    },
    { base: "f", letters: "\u0066\u24D5\uFF46\u1E1F\u0192\uA77C" },
    {
        base: "g",
        letters: "\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F"
    },
    {
        base: "h",
        letters: "\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
    },
    { base: "hv", letters: "\u0195" },
    {
        base: "i",
        letters: "\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
    },
    { base: "j", letters: "\u006A\u24D9\uFF4A\u0135\u01F0\u0249" },
    {
        base: "k",
        letters: "\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
    },
    {
        base: "l",
        letters: "\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747"
    },
    { base: "lj", letters: "\u01C9" },
    { base: "m", letters: "\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
    {
        base: "n",
        letters: "\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5"
    },
    { base: "nj", letters: "\u01CC" },
    {
        base: "o",
        letters: "\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275"
    },
    { base: "oi", letters: "\u01A3" },
    { base: "ou", letters: "\u0223" },
    { base: "oo", letters: "\uA74F" },
    {
        base: "p",
        letters: "\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755"
    },
    { base: "q", letters: "\u0071\u24E0\uFF51\u024B\uA757\uA759" },
    {
        base: "r",
        letters: "\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
    },
    {
        base: "s",
        letters: "\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B"
    },
    {
        base: "t",
        letters: "\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
    },
    { base: "tz", letters: "\uA729" },
    {
        base: "u",
        letters: "\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
    },
    { base: "v", letters: "\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
    { base: "vy", letters: "\uA761" },
    {
        base: "w",
        letters: "\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
    },
    { base: "x", letters: "\u0078\u24E7\uFF58\u1E8B\u1E8D" },
    {
        base: "y",
        letters: "\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
    },
    {
        base: "z",
        letters: "\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
    }
];

const diacriticsMap = {};

for( let i = 0; i < defaultDiacriticsRemovalMap.length; i++ ) {
    const letters = defaultDiacriticsRemovalMap[ i ].letters;
    for( let j = 0; j < letters.length; j++ ) {
        diacriticsMap[ letters[ j ] ] = defaultDiacriticsRemovalMap [ i ].base;
    }
}

async function sendCommand( e, command ) {
        let isSilent = Boolean( e.detail && e.detail.silent );
        let userAction = e.detail && e.detail.userAction;
        const originalValue = command || inputElem.value;
        let finalValue = originalValue;
        const lastCommand = cmdHistory.length > 0 && cmdHistory[ cmdHistory.length - 1 ];

        // userAction is true if not specifically given
        if( typeof userAction !== "boolean" ) {
            userAction = true;
        }

        // Change accented characters to plain ASCII.
        // The Hugo engine doesn't receive non-ASCII characters correctly.
        if( !useUnicode ) {
            finalValue = finalValue.replace( /[^\u0000-\u007E]/g, function( a ) {
                return diacriticsMap[ a ] || a;
            });
        }

        // run input filters
        if( typeof inputFilter === "function" ) {
            finalValue = inputFilter( finalValue, { silent: isSilent, userAction });

            if( typeof finalValue === "object" && typeof finalValue.then === "function" ) {
                try {
                    finalValue = await Promise.resolve( finalValue );
                }
                catch( e ) {
                    // if the promise throws, cancel the event
                    return;
                }
            }
        }

        // receiving false from the filter cancels the event
        if( finalValue === false ) {
            return;
        }

        // the value shown in the transcript
        const transcriptCommand = command || inputElem.value;

        // cleanup
        if( userAction ) {
            inputElem.value = "";
        }
        hide();

        // trigger submit hook
        if( typeof submitHook === "function" ) {
            await submitHook({
                input: finalValue,
                original: originalValue,
                silent: isSilent,
                userAction: userAction
            });
        }

        // save input to history
        if( !isSilent && originalValue !== lastCommand && /\S/.test( originalValue ) ) {
            history.add( originalValue );
        }

        // reset the current spot in the command history
        if( userAction ) {
            currentCmdIndex = cmdHistory.length;
        }

        // Vorple-specific
        if( !enginePrompt ) {
            // Turn has ended, create a new container for the next turn.
            // Do this before appending the command to the transcript so that
            // the command and its response are in the same container.
            (0,_window__WEBPACK_IMPORTED_MODULE_3__.newTurnContainer)( 0 );
            
            // append the command to the transcript, unless the submit events tells us not to
            if( !isSilent ) {
                appendPrompt( prefix.get(), transcriptCommand, 0 );
            }
        }

        // send the final command to the interpreter
        sendToEngine( finalValue );
}

let useUnicode = true;

/**
 * Initialize line input event handlers.
 */
function init( opt ) {
    // find elements
    promptElem = document.getElementById( "lineinput" );
    prefixElem = document.getElementById( "lineinput-prefix" );
    inputElem = document.getElementById( "lineinput-field" );

    if( !promptElem ) {
        promptElem = document.createElement( "form" );
        promptElem.id = "lineinput";
        document.getElementById( "output" ).appendChild( promptElem );
    }

    if( !prefixElem ) {
        prefixElem = document.createElement( "label" );
        prefixElem.id = "lineinput-prefix";
        prefixElem.setAttribute( "for", "lineinput-field" );
        promptElem.appendChild( prefixElem );
    }

    if( !inputElem ) {
        inputElem = document.createElement( "input" );
        inputElem.id = "lineinput-field";
        inputElem.setAttribute( "name", "lineinput" );
        inputElem.setAttribute( "type", "text" );
        inputElem.setAttribute( "autocapitalize", "none" );
        inputElem.setAttribute( "autocomplete", "off" );
        promptElem.appendChild( inputElem );
    }

    // save references to hooks
    expectHook = opt.expectHook;
    submitHook = opt.submitHook;

    // save the reference to the input filter
    inputFilter = opt.inputFilter;

    // make a note if the engine handles printing the prompt or not
    enginePrompt = !!opt.enginePrompt;
    useUnicode = !!opt.unicode;

    // set the engine input function if provided
    if( opt.engineInputFunction ) {
        setEngineInputFunction( opt.engineInputFunction );
    }

    // handle line input submission
    promptElem.addEventListener( "submit", function( e ) {
        e.preventDefault();
        sendCommand( e );
    }, false );

    // block input if that has been requested
    inputElem.addEventListener( "keydown", function( e ) {
        if( (0,_input__WEBPACK_IMPORTED_MODULE_1__.isBlocked)() ) {
            e.preventDefault();
            e.stopPropagation();
            return;
        }
    }, false );
    
    // Command history. Adapted from Parchment.
    inputElem.addEventListener( "keydown", function( e ) {
        const keyCode = e.which || e.keyCode;

        // Check for up/down to use the command history
        if( keyCode === 38 ) // up -> prev
        {
            getCmdFromHistory( -1 );
            e.preventDefault();
        }
        if( keyCode === 40 ) // down -> next
        {
            getCmdFromHistory( +1 );
            e.preventDefault();
        }
    }, false );

    // fix Mobile Safari bug that breaks fixed positioning when the virtual keyboard pops up
    if( "ontouchstart" in window ) {
        // the focus event at the start of the game doesn't open the keyboard
        let firstFocus = true;

        inputElem.addEventListener( "focus", function() {
            if( !firstFocus ) {
                document.body.classList.add( "safarifix" );
            }
            else {
                firstFocus = false;
            }
        });

        inputElem.addEventListener( "blur", function() {
            document.body.classList.remove( "safarifix" );
        });
    }

    // remove the prompt from the DOM
    promptElem.parentNode.removeChild( promptElem );
}


/**
 * Returns true if the command prompt is ready for line input.
 */
function isReady() {
    return (0,_input__WEBPACK_IMPORTED_MODULE_1__.getMode)() === "getline";
}


const prefix = {
    /**
     * Get the current prompt prefix, or empty string if the engine is
     * handling printing the prompt.
     *
     * @returns {string}
     */
    get: function() {
        if( enginePrompt ) {
            return "";
        }

        return prefixElem.innerHTML;
    },

    /**
     * Set the prefix (>) that's shown before the command input.
     * The caret is expected to be "clean" i.e. it's safe to use innerHTML
     * to place it in the element.
     *
     * @param {string} prefix
     */
    set: function( prefix ) {
        if( !enginePrompt ) {
            prefixElem.innerHTML = prefix;
        }
    }
};


/**
 * Either scroll the page down one page, or if the prompt is visible,
 * set focus to the prompt.
 *
 * @param e
 */
function scrollOrFocus( e ) {
    const doc = document.documentElement;
    const scrolltop = ( window.pageYOffset || doc.scrollTop ) - ( doc.clientTop || 0 );
    const selection = window.getSelection ||
    function() {
        return document.selection ? document.selection.createRange().text : "";
    };
    const promptHidden = !promptElem.parentNode;
    let playAreaHeight = window.innerHeight;

    if( (0,_window__WEBPACK_IMPORTED_MODULE_3__.get)( 1 ) ) {
        playAreaHeight = window.innerHeight - (0,_window__WEBPACK_IMPORTED_MODULE_3__.get)( 1 ).getBoundingClientRect().height;
    }

    // let non-ASCII keycodes, navigation keys, keys pressed with ctrl/alt/cmd pass
    // so that they don't block browser shortcuts
    if( e && ( e.keycode === 32 || e.keyCode > 127 || e.altKey || e.ctrlKey || e.metaKey ) ) {
        return;
    }

    // Only intercept on things that aren't inputs and if the user isn't selecting text
    // and if the prompt is available
    if( !e || !e.target || ( e.target.nodeName !== "INPUT" && selection().toString() === "" ) ) {
        // If the input box is close to the viewport then focus it
        if( promptHidden || scrolltop + window.innerHeight > document.body.clientHeight - 60 ) {
            if( promptElem.parentNode ) {
                // Manually reset the target in case focus/trigger don't - we don't want the trigger to recurse
                inputElem.focus();

                // Stop propagating after re-triggering it, so that the trigger will work for all keys
                if( e && e.stopPropagation && document.activeElement !== inputElem ) {
                    e.stopPropagation();
                }
            }
            window.scrollTo( 0, ( document.scrollingElement || document.body ).scrollHeight );
        }
        else {
            // if there's no prompt, scroll down one pageful
            if( doScroll ) {
                window.scrollTo( 0, scrolltop + playAreaHeight - 40 );

                // focus on the prompt if it's visible
                if( promptElem.parentNode && scrolltop + playAreaHeight + window.innerHeight - 40 >= document.body.clientHeight ) {
                    inputElem.focus();
                }

                if( e && e.preventDefault ) {
                    e.preventDefault();
                }
            }
            // otherwise just scroll the content into view
            else {
                scrollToContent();
            }

            // Intercept the backspace key
            if( e && e.type === "keydown" && ( e.which || e.keyCode ) === 8 ) {
                return false;
            }
        }
    }
}


/**
 * Set the "doScroll" status which tells whether a keypress scrolls the page.
 */
function setDoScroll( status ) {
    doScroll = status;
}


/**
 * Sets the function that sends the input to the engine
 */
function setEngineInputFunction( func ) {
    sendToEngine = func;
}


/**
 * Show the prompt and start expecting line input.
 */
function show() {
    (0,_input__WEBPACK_IMPORTED_MODULE_1__.setMode)( "getline" );
    (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();

    if( enginePrompt ) {
        // Hugo: the prompt is part of the engine output
        _window__WEBPACK_IMPORTED_MODULE_3__.container.get( 0 ).appendChild( promptElem );
    }
    else {
        // Vorple: separate prompt
        (0,_window__WEBPACK_IMPORTED_MODULE_3__.get)( 0 ).appendChild( promptElem );
    }

    // scroll page down or give the prompt focus
    scrollOrFocus();
    doScroll = true;

    // do autosave when line input is expected
    _state__WEBPACK_IMPORTED_MODULE_2__.autosave.save();

    promptElem.dispatchEvent( lineinputReadyEvent );
}


/***/ }),

/***/ "./src/haven/state.js":
/*!****************************!*\
  !*** ./src/haven/state.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "autosave": () => (/* binding */ autosave),
/* harmony export */   "restoreUI": () => (/* binding */ restoreUI)
/* harmony export */ });
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options */ "./src/haven/options.js");
/* harmony import */ var _prompt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prompt */ "./src/haven/prompt.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./window */ "./src/haven/window.js");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./style */ "./src/haven/style.js");







let autosaveFilename = "";


/**
 * Read the UI state from the filesystem.
 */
function readUIState() {
    try {
        const state = FS.readFile(
            autosaveFilename + "_uidata",
            { encoding: "utf8" }
        );

        return JSON.parse( state );
    }
    catch( e ) {
        return null;
    }
}


const autosave = {
    /**
     * Delete the autosave files.
     */
    remove: function() {
        try {
            FS.unlink( autosaveFilename );
        }
        catch( e ) {}

        try {
            FS.unlink( autosaveFilename + "_uidata" );
        }
        catch( e ) {}
    },

    /**
     * Pass the autosave's filename to the engine that takes care of
     * reloading the save.
     */
    restore: function() {
        try {
            // Try to open the autosave file.
            // If it doesn't exist, this throws an error.
            FS.stat( autosaveFilename );

            Module.ccall(
                "hugojs_set_autosave_filename",
                "null",
                [ "string" ],
                [ autosaveFilename ]
            );
        }
        catch( e ) {
            // autosave file doesn't exist, do nothing
        }
    },

    save: function() {
        if( !(0,_options__WEBPACK_IMPORTED_MODULE_0__.get)( "autosave" ) ) {
            return;
        }

        // trigger engine autosave
        const engineSaveSucceeded = Module.ccall(
            "haven_save_autosave",
            "int",
            [ "string" ],
            [ autosaveFilename ]
        );

        // save UI state
        if( engineSaveSucceeded ) {
            FS.writeFile(
                autosaveFilename + "_uidata",
                JSON.stringify( haven.window.getUIState() ),
                { encoding: "utf8" }
            );
        }
    },

    /**
     * Remember the autosave's filename
     * @param filename
     */
    setName: function( filename ) {
        autosaveFilename = filename;
    }
};


/**
 * Restore saved UI state.
 */
function restoreUI() {
    const savedState = readUIState();
    let windowCount;

    if( !savedState ) {
        return;
    }

    // if windowing has been set off in options, restore only the main window
    if( (0,_options__WEBPACK_IMPORTED_MODULE_0__.get)( "windowing" ) ) {
        windowCount = savedState.windowContents.length;
    }
    else {
        windowCount = 1;
    }

    (0,_window__WEBPACK_IMPORTED_MODULE_2__.clear)();

    for( let i = 0; i < windowCount; ++i ) {
        (0,_window__WEBPACK_IMPORTED_MODULE_2__.create)(
            i,
            savedState.windowDimensions[ i ].left,
            savedState.windowDimensions[ i ].top,
            savedState.windowDimensions[ i ].right,
            savedState.windowDimensions[ i ].bottom
        );
    }

    _style__WEBPACK_IMPORTED_MODULE_3__.color.restore( savedState.currentColors );
    (0,_style__WEBPACK_IMPORTED_MODULE_3__.restore)( savedState.font );
    _window__WEBPACK_IMPORTED_MODULE_2__.position.restore( savedState.position );

    if( savedState.title ) {
        document.title = savedState.title;
    }

    for( let i = 0; i < savedState.windowContents.length; ++i ) {
        (0,_window__WEBPACK_IMPORTED_MODULE_2__.get)( i ).innerHTML = savedState.windowContents[ i ];
        (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( haven.window.get( i ), i );
    }

    (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( document.body, 0 );

    // TODO: only for Hugo!
    // set the same style we had when saving
    Module.ccall(
        "hugojs_set_font",
        "null",
        [ "int" ],
        [ savedState.font[ 0 ].original ]
    );

    Module.ccall(
        "hugojs_set_colors",
        "null",
        [ "int", "int" ],
        [ savedState.currentColors[ 0 ].text, savedState.currentColors[ 0 ].background ]
    );

    // restore command history
    _prompt__WEBPACK_IMPORTED_MODULE_1__.history.set( savedState.cmdHistory || [] );

    // scroll to the bottom
    window.scrollTo( 0, ( document.scrollingElement || document.body ).scrollHeight );
    (0,_prompt__WEBPACK_IMPORTED_MODULE_1__.setDoScroll)();
}


/***/ }),

/***/ "./src/haven/style.js":
/*!****************************!*\
  !*** ./src/haven/style.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "apply": () => (/* binding */ apply),
/* harmony export */   "color": () => (/* binding */ color),
/* harmony export */   "font": () => (/* binding */ font),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "restore": () => (/* binding */ restore),
/* harmony export */   "set": () => (/* binding */ set),
/* harmony export */   "setGlulxStyle": () => (/* binding */ setGlulxStyle),
/* harmony export */   "setGlulxStyleHint": () => (/* binding */ setGlulxStyleHint)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./src/haven/buffer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./options */ "./src/haven/options.js");
/* harmony import */ var _prompt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompt */ "./src/haven/prompt.js");




// currently set colors
let currentColors = [ defaultColors( 0 ) ];

// currently set fonts
let currentFont = [ defaultStyles() ];

// let engine decide text and background colors?
let engineColors = true;

// ignore font family settings? (proportional/fixed-width)
let ignoreFontFamily = false;


/**
 * Get the default colors of a font object
 *
 * @param targetWindow
 * @returns {{text: number, background: number}}
 */
function defaultColors( targetWindow ) {
    if( targetWindow === 1 ) {  // status line
        return {
            text: 15,
            background: 1
        };
    }
    else {
        return {
            text: 7,
            background: 0
        };
    }
}


/**
 * Default styles of the font
 */
function defaultStyles() {
    return {
        bold: false,
        italic: false,
        underline: false,
        proportional: true,
        original: 0     // the original integer value of the font
    };
}


/**
 * Set currently active font styles and colors to an element.
 *
 * @param elem
 * @param targetWindow
 */
function apply( elem, targetWindow ) {
    const newClasses = [];
    const prompt = (0,_prompt__WEBPACK_IMPORTED_MODULE_2__.get)().getElementsByTagName( "INPUT" )[ 0 ];
    const setPromptStyle = ( targetWindow === 0 );

    if( !currentColors[ targetWindow ] ) {
        currentColors[ targetWindow ] = defaultColors( targetWindow );
    }

    if( engineColors ) {
        newClasses.push( "textcolor-" + currentColors[ targetWindow ].text );
        newClasses.push( "bgcolor-" + currentColors[ targetWindow ].background );
    }

    // remove old class styles
    elem.className = elem.className.replace( /\b(text|bg)color-\d+/g, "" );
    elem.classList.remove( "font-fixed-width" );

    if( setPromptStyle ) {
        prompt.className = prompt.className.replace( /\b(text|bg)color-\d+/g, "" );
        prompt.classList.remove( "font-fixed-width" );
    }

    if( !currentFont[ targetWindow ] ) {
        currentFont[ targetWindow ] = defaultStyles();
    }

    for( let prop in currentFont[ targetWindow ] ) {
        if( ignoreFontFamily && prop === "proportional" ) {
            continue;
        }

        if( currentFont[ targetWindow ].hasOwnProperty( prop ) ) {
            elem.classList.remove( "font-" + prop );

            if( setPromptStyle ) {
                prompt.classList.remove( "font-" + prop );
            }

            if( currentFont[ targetWindow ][ prop ] ) {
                newClasses.push( "font-" + prop );
            }
        }
    }

    if( !ignoreFontFamily && currentFont[ targetWindow ].hasOwnProperty( "proportional" ) && !currentFont[ targetWindow ].proportional ) {
        newClasses.push( "font-fixed-width" );
    }

    for( let i = 0; i < newClasses.length; ++i ) {
        elem.classList.add( newClasses[ i ] );

        if( setPromptStyle ) {
            prompt.classList.add( newClasses[ i ] );
        }
    }
}


const color = {
    get: function() {
        return currentColors;
    },

    restore: function( oldState ) {
        currentColors = oldState;
    },

    /**
     * Set colors in windows
     *
     * @param which
     * @param color
     * @param targetWindow
     */
    set: function( which, color, targetWindow ) {
        if( !currentColors[ targetWindow ] ) {
            currentColors[ targetWindow ] = defaultColors( targetWindow );
        }

        if( currentColors[ targetWindow ][ which ] === color ) {
            // the color doesn't change, do nothing
            return;
        }

        (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)( targetWindow );

        currentColors[ targetWindow ][ which ] = color;
    }
};


const font = {
    get: function() {
        return currentFont;
    }
};


function init( options ) {
    ignoreFontFamily = !options.engineFontFamily;
    engineColors = options.engineColors;
}


/**
 * Restore the entire style state.
 *
 * @param oldState
 */
function restore( oldState ) {
    currentFont = oldState;
}


/**
 * Set a current style attribute.
 *
 * @param {string} type  bold, italic, underline, or proportional
 * @param {boolean} value
 * @param {number} targetWindow
 */
function set( type, value, targetWindow ) {
    (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)( targetWindow );
    currentFont[ targetWindow ][ type ] = value;
}

const stylehints = [];

// default
stylehints[ 0 ] = {
    bold: false,
    italic: false,
    underline: false
//  proportional: true
};

// Emphasized
stylehints[ 1 ] = {
    italic: true
};

// Preformatted
stylehints[ 2 ] = {
// proportional: false
};

// Header
stylehints[ 3 ] = {
    bold: true
};

// Subheader
stylehints[ 4 ] = {
    bold: true
};


function setGlulxStyle( style ) {
    /*
     #define style_Normal (0)
     #define style_Emphasized (1)
     #define style_Preformatted (2)
     #define style_Header (3)
     #define style_Subheader (4)
     #define style_Alert (5)
     #define style_Note (6)
     #define style_BlockQuote (7)
     #define style_Input (8)
     #define style_User1 (9)
     #define style_User2 (10)
     #define style_NUMSTYLES (11)
     */

    if( !stylehints[ style ] ) {
        return;
    }

    for( let i in stylehints[ style ] ) {
        set( i, stylehints[ style ][ i ], 0 );
    }
}


/**
 * Changes the appearance of a default style.
 *
 * @param style
 * @param hint
 * @param value
 */
function setGlulxStyleHint( style, hint, value ) {
    if( !stylehints[ style ] ) {
        stylehints[ style ] = {
            bold: false,
            italic: false,
            underline: false
//          proportional: true
        };
    }

    const st = stylehints[ style ];

    switch( hint ) {
        case 4:     // Weight
            st.bold = ( value === 1 );
            break;

        case 5:     // Oblique
            st.italic = ( value === 1 );
            break;

        case 6:     // Proportional
//                st.proportional = (value === 1);
            break;
    }
}

/*
// Set Emscripten's command line arguments that load the story file
window.Module.arguments = [
    '-q',   // quiet (don't print interpreter info)
    '-u',   // with unicode support
    '/storyfile.gblorb'
];

*/


/***/ }),

/***/ "./src/haven/window.js":
/*!*****************************!*\
  !*** ./src/haven/window.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "append": () => (/* binding */ append),
/* harmony export */   "clear": () => (/* binding */ clear),
/* harmony export */   "create": () => (/* binding */ create),
/* harmony export */   "container": () => (/* binding */ container),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getUIState": () => (/* binding */ getUIState),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "measureDimensions": () => (/* binding */ measureDimensions),
/* harmony export */   "newTurnContainer": () => (/* binding */ newTurnContainer),
/* harmony export */   "position": () => (/* binding */ position),
/* harmony export */   "setTitle": () => (/* binding */ setTitle)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./src/haven/buffer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./options */ "./src/haven/options.js");
/* harmony import */ var _prompt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompt */ "./src/haven/prompt.js");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./style */ "./src/haven/style.js");









// DOM containers for windows
const outputWindows = [];

// the parent of all windows
const currentContainers = [];
const windowDimensions = [];
let mainContainer = null;

let cursorPosition = [];


/**
 * Add lines to the output.
 *
 * @param amount Number of lines
 * @param column Number of spaces that are added to the last line
 * @param havenWindow
 */
function createLines( amount, column, havenWindow ) {
    for( let i = 0; i < amount; ++i ) {
        const newlineFiller = document.createElement( "span" );

        newlineFiller.className = "font-fixed-width";
        newlineFiller.innerHTML = "\n";
        currentContainers[ havenWindow ].appendChild( newlineFiller );
    }

    if( column > 0 ) {
        const spaceFiller = document.createElement( "span" );

        spaceFiller.innerHTML = Array( column ).join( " " );
        spaceFiller.className = "font-fixed-width";
        currentContainers[ havenWindow ].appendChild( spaceFiller );
    }

    position.reset( havenWindow );
}


/**
 * Prints text to a specific spot in the text window.
 *
 * @param line
 * @param col
 * @param newContent
 * @param havenWindow
 */
function replacePart( line, col, newContent, havenWindow ) {
    const output = currentContainers[ havenWindow ];
    const nodes = textNodesUnder( output );
    const range = document.createRange();

    let currentLine = 1;
    let currentCol = 1;
    let startFound = false;
    let endCounter = 0;

    // check if the new content goes on top of existing content or does the
    // container "overflow" (i.e. new lines need to be created as a padding)
    const overflow = ( function() {
        for( let i = 0; i < nodes.length; ++i ) {
            let textContent = nodes[ i ].textContent;
            if( currentLine === line ) {
                for( let j = 0; j < textContent.length; ++j ) {
                    if( startFound ) {
                        endCounter++;
                        if( endCounter === newContent.textContent.length || textContent[ j ] === "\n" ) {
                            range.setEnd( nodes[ i ], j );
                            return false;
                        }
                    }
                    else if( currentCol === col ) {
                        range.setStart( nodes[ i ], j );
                        startFound = true;
                        if( j === textContent.length - 1 ) {
                            range.setEnd( nodes[ i ], j );
                            return false;
                        }
                    }
                    else if( textContent[ j ] === "\n" ) {
                        const filler = document.createTextNode( Array( col - currentCol + 1 ).join( " " ) + "\n" );

                        nodes[ i ].textContent = textContent.substr( 0, j ) + " ";
                        nodes[ i ].parentNode.insertBefore( filler, nodes[ i ].nextSibling );
                        range.setStart( filler, col - currentCol - 1 );
                        range.setEnd( filler, col - currentCol - 1 );
                        return false;
                    }

                    currentCol++;
                }
            }
            else {
                if( textContent.indexOf( "\n" ) > -1 ) {
                    currentLine++;
                }
            }
        }

        return true;
    })();

    if( overflow ) {
        createLines( cursorPosition[ havenWindow ].line - currentLine, col, havenWindow );
        output.appendChild( newContent );
        return;
    }

    if( newContent.textContent.indexOf( "\n" ) > -1 ) {
        newContent.textContent = newContent.textContent.replace( "\n", "" );
        cursorPosition[ havenWindow ].line++;
        cursorPosition[ havenWindow ].col = 1;
    }
    else {
        cursorPosition[ havenWindow ].col += newContent.textContent.length;
    }

    range.deleteContents();
    range.insertNode( newContent );

    if( !newContent.nextSibling ) {
        cursorPosition[ havenWindow ].line = null;
        cursorPosition[ havenWindow ].col = null;
    }
}


/**
 * Get all text nodes contained by a DOM node
 *
 * From http://stackoverflow.com/a/10730777
 *
 * @param node
 * @returns {Array}
 */
function textNodesUnder( node ) {
    let all = [];

    for( node = node.firstChild; node; node = node.nextSibling ) {
        if( node.nodeType === 3 ) {
            all.push( node );
        }
        else {
            all = all.concat( textNodesUnder( node ) );
        }
    }
    return all;
}


/**
 * Append content to a window.
 *
 * @param content
 * @param targetWindow
 */
function append( content, targetWindow ) {
    const textContainer = document.createElement( "span" );

    if( !cursorPosition[ targetWindow ] ) {
        cursorPosition[ targetWindow ] = {
            col: null,
            line: null
        };
    }

    (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( textContainer, targetWindow );
    textContainer.innerHTML = content;

    if( cursorPosition[ targetWindow ].col !== null && cursorPosition[ targetWindow ].line !== null ) {
        replacePart( cursorPosition[ targetWindow ].line, cursorPosition[ targetWindow ].col, textContainer, targetWindow );
    }
    else {
        currentContainers[ targetWindow ].appendChild( textContainer );
    }
}


/**
 * Clears an output window.
 *
 * @param targetWindow
 */
function clear( targetWindow ) {
    if( targetWindow === undefined ) {
        (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)( 0 );
        mainContainer.innerHTML = "";
        mainContainer.appendChild( outputWindows[ 0 ] );
        newTurnContainer( 0 );
        (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( outputWindows[ 0 ], 0 );
        (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( document.body, 0 );
        position.reset();
    }
    else {
        if( !outputWindows[ targetWindow ] ) {
            return;
        }

        (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)( targetWindow );
        outputWindows[ targetWindow ].innerHTML = "";

        // when clearing the main window, set the entire page's style and create a new turn container
        if( targetWindow === 0 ) {
            newTurnContainer( 0 );
            (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( document.body, 0 );
        }

        (0,_style__WEBPACK_IMPORTED_MODULE_3__.apply)( outputWindows[ targetWindow ], targetWindow );
        position.reset( targetWindow );
    }
}


/**
 * Create a new window (Hugo only).
 *
 * @param outputWindow
 * @param left
 * @param top
 * @param right
 * @param bottom
 */
function create( outputWindow, left, top, right, bottom ) {
    const dimensions = measureDimensions();
    const charHeight = dimensions.char.height;
    const mainContainer = get( 0 ).parentNode;

    let newWindow;

    windowDimensions[ outputWindow ] = {
        left: left,
        top: top,
        right: right,
        bottom: bottom
    };

    if( !(0,_options__WEBPACK_IMPORTED_MODULE_1__.get)( "windowing" ) ) {
        return false;
    }

    // the main window only changes size
    if( outputWindow === 0 ) {
        get( 0 ).style.paddingTop = ( ( top - 1 ) * dimensions.char.height ) + "px";
        return;
    }

    if( get( outputWindow ) ) {
        mainContainer.removeChild( get( outputWindow ) );
    }

    newWindow = document.createElement( "div" );
    newWindow.id = "window" + outputWindow;
    newWindow.className = "havenwindow font-fixed-width";
    newWindow.style.height = charHeight * ( bottom - top + 1 ) + "px";
    newWindow.style.top = ( ( top - 1 ) * charHeight ) + "px";
    newWindow.style.marginLeft = ( left - 1 ) + "px";
    newWindow.style.width = ( ( right - left + 2 ) * dimensions.char.width ) + "px";

    outputWindows[ outputWindow ] = newWindow;
    currentContainers[ outputWindow ] = newWindow;
    container.append( newWindow, mainContainer );
}


/**
 * Output containers inside the windows.
 */
const container = {
    append: function( container, target ) {
        if( typeof target === "number" ) {
            outputWindows[ target ].appendChild( container );
        }
        else {
            target.appendChild( container );
        }
    },

    get: function( targetWindow ) {
        return currentContainers[ targetWindow ];
    },

    set: function( newContainer, targetWindow ) {
        currentContainers[ targetWindow ] = newContainer;
    }
};


/**
 * Returns the output window element.
 *
 * @param targetWindow
 * @returns {*}
 */
function get( targetWindow ) {
    return outputWindows[ targetWindow ];
}


/**
 * Get all data required to later reconstruct the UI state.
 */
function getUIState() {
    const windowContents = [];
    const promptElem = (0,_prompt__WEBPACK_IMPORTED_MODULE_2__.get)();
    const promptParent = promptElem.parentNode;

    // put prompt away during the save
    if( promptParent ) {
        promptParent.removeChild( promptElem );
    }

    // remove the >
    let lastChild = outputWindows[ 0 ].lastChild;
    outputWindows[ 0 ].removeChild( lastChild );

    for( let i = 0; i < outputWindows.length; ++i ) {
        windowContents[ i ] = outputWindows[ i ].innerHTML;
    }

    // put back what was removed
    outputWindows[ 0 ].appendChild( lastChild );

    if( promptParent ) {
        promptParent.appendChild( promptElem );
    }

    // this should be done better, but remove the last line break
    // because restoring adds one back again
    const lastLbr = windowContents[ 0 ].lastIndexOf( "\n" );
    windowContents[ 0 ] = windowContents[ 0 ].substring( 0, lastLbr ) + windowContents[ 0 ].substring( lastLbr + 1 );

    return {
        cmdHistory: _prompt__WEBPACK_IMPORTED_MODULE_2__.history.get(),
        currentColors: _style__WEBPACK_IMPORTED_MODULE_3__.color.get(),
        font: _style__WEBPACK_IMPORTED_MODULE_3__.font.get(),
        position: cursorPosition,
        title: document.title,
        windowDimensions: windowDimensions,
        windowContents: windowContents
    };
}


/**
 * Save references to HTML elements.
 */
function init() {
    mainContainer = document.getElementById( "output" );
    outputWindows.push( document.getElementById( "window0" ) );
    currentContainers.push( outputWindows[ 0 ] );
    newTurnContainer( 0 );
}


/**
 * When the window size changes, measure the window width in characters (Hugo only)
 */
function measureDimensions() {
    const outputContainer = get( 0 ).parentNode;
    const dimensions = {
            window: {
                width: parseInt( window.getComputedStyle( outputContainer ).width, 10 ),
                height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
            },
            line: {},
            char: {}
        };
    const measureElem = document.createElement( "span" );
    const outputDimensions = dimensions.window;

    let measureElemHeight;

    measureElem.innerHTML = "00000<br>00000<br>00000";
    measureElem.className = "font-fixed-width";
    measureElem.style.display = "inline-block";

    outputContainer.appendChild( measureElem );

    dimensions.char.width = measureElem.offsetWidth / 5;
    dimensions.line.width = Math.floor( ( outputDimensions.width - 1 ) / dimensions.char.width );

    measureElem.style.display = "block";
    measureElemHeight = measureElem.clientHeight;
    measureElem.innerHTML += "<br>00000<br>00000";
    dimensions.char.height = ( measureElem.clientHeight - measureElemHeight ) / 2 + 3;
    dimensions.line.height = Math.floor( outputDimensions.height / dimensions.char.height );

    measureElem.parentNode.removeChild( measureElem );

    return dimensions;
}


/**
 * Creates a container for a single turn's content and appends it to the window
 * and sets the classes of previous containers to match the new situation.
 */
function newTurnContainer( targetWindow ) {
    const parentWindow = outputWindows[ targetWindow ];
    const newTurn = document.createElement( "div" );

    newTurn.className = "turn current";
    parentWindow.appendChild( newTurn );
    container.set( newTurn, targetWindow );

    return newTurn;
}


/**
 * Set the cursor position inside the target window. Hugo only.
 */
const position = {
    reset: function( targetWindow ) {
        // if no window specified, reset all positions
        if( targetWindow === undefined ) {
            cursorPosition = [ {
                col: null,
                line: null
            } ];
        }
        else {
            position.set( null, null, targetWindow );
        }
    },

    restore: function( oldState ) {
        cursorPosition = oldState;
    },

    set: function( col, line, havenWindow ) {
        if( !cursorPosition[ havenWindow ] ) {
            cursorPosition[ havenWindow ] = {};
        }

        cursorPosition[ havenWindow ].col = col;
        cursorPosition[ havenWindow ].line = line;
    }
};


/**
 * Set the window title
 *
 * @param title
 */
function setTitle( title ) {
    document.title = title;
}


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _quixe_quixe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quixe/quixe */ "./src/quixe/quixe.js");
/* harmony import */ var _quixe_quixe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_quixe_quixe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _quixe_gi_dispa__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quixe/gi_dispa */ "./src/quixe/gi_dispa.js");
/* harmony import */ var _quixe_gi_dispa__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_quixe_gi_dispa__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _quixe_gi_load__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./quixe/gi_load */ "./src/quixe/gi_load.js");
/* harmony import */ var _quixe_gi_load__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_quixe_gi_load__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var vex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vex-js */ "./node_modules/vex-js/dist/js/vex.js");
/* harmony import */ var vex_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vex_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../package.json */ "./package.json");
/**
 * @private
 * @module index
 */

 // include Quixe







window.vorple = {
    ...__webpack_require__( /*! ./vorple/vorple.js */ "./src/vorple/vorple.js" ),
    audio: __webpack_require__( /*! ./vorple/audio.js */ "./src/vorple/audio.js" ),
    debug: __webpack_require__( /*! ./vorple/debug.js */ "./src/vorple/debug.js" ),
    file: __webpack_require__( /*! ./vorple/file.js */ "./src/vorple/file.js" ),
    haven: __webpack_require__( /*! ./vorple/haven.js */ "./src/vorple/haven.js" ),
    layout: __webpack_require__( /*! ./vorple/layout.js */ "./src/vorple/layout.js" ),
    output: __webpack_require__( /*! ./vorple/output.js */ "./src/vorple/output.js" ),
    prompt: __webpack_require__( /*! ./vorple/prompt.js */ "./src/vorple/prompt.js" ),
    options: {},
    version: _package_json__WEBPACK_IMPORTED_MODULE_4__.version
};

// initialize Vex modal windows
vex_js__WEBPACK_IMPORTED_MODULE_3___default().registerPlugin( __webpack_require__( /*! vex-dialog */ "./node_modules/vex-dialog/dist/vex.dialog.js" ) );
(vex_js__WEBPACK_IMPORTED_MODULE_3___default().defaultOptions.className) = "vex-theme-plain";

// load the PowerTip tooltip library
__webpack_require__( /*! jquery-powertip */ "./node_modules/jquery-powertip/dist/jquery.powertip.js" );

// force libraries to expose themselves to the window object,
// package managers might otherwise hide them and Inform needs
// to access them in global scope
window.jQuery = window.$ = __webpack_require__( /*! jquery */ "jquery" );
window.toastr = __webpack_require__( /*! toastr */ "./node_modules/toastr/toastr.js" );
window.vex = (vex_js__WEBPACK_IMPORTED_MODULE_3___default());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (window.vorple);


/***/ }),

/***/ "./src/quixe/gi_dispa.js":
/*!*******************************!*\
  !*** ./src/quixe/gi_dispa.js ***!
  \*******************************/
/***/ (() => {

/* GiDispa -- a GlkAPI dispatch layer for Quixe
 * Designed by Andrew Plotkin <erkyrath@eblong.com>
 * <http://eblong.com/zarf/glulx/quixe/>
 * 
 * This Javascript library is copyright 2010-2016 by Andrew Plotkin.
 * It is distributed under the MIT license; see the "LICENSE" file.
 *
 * This is the code layer that sits in between Quixe and GlkAPI. It provides
 * Glk entry points for every Glk call; Quixe's @glk opcode invokes these. It
 * also translates between Glk opaque objects (windows, streams, filerefs, etc)
 * to Quixe 32-bit numeric IDs.
 *
 * (A few calls, or arguments of calls, are marked "for autosave/autorestore
 * only". These exist for the purpose of getting a game displayed in a known
 * state, which is rather more complicated than the usual situation of 
 * letting a game start up and run.)
 */

//### Should split WriteWord into a WriteRefWord and WriteArrayWord,
//### with different handling of -1. Etc.

/* Put everything inside the GiDispa namespace.

   Within this namespace, "self" is an internal secondary namespace. Many
   of our private variables and functions will be copied into "self".
   The "self" will be available inside compiled functions, and will give
   them access to its contents.
*/
/* We find that .bind()-build functions are slower than the original,
   particularly on Firefox. However, I don't know another way around the
   "dynamic variable binding in eval()" issue, which is *also* an 
   optimization problem. At least GiDispa functions aren't (usually) called 
   that often in (normal) gameplay.
*/

GiDispa = function() {

/* Create the "self" object. */
var self = {};

/* self.VM will store the VM interface object. GiDispa needs this to load and
   store reference arguments, from and to VM memory. When this layer is used
   with Quixe, VM is just an alias for the Quixe interface object.
*/
self.VM = null;

/* Set the VM interface object. This is called by the Glk library, before
   the VM starts running. 
*/
function set_vm(vm_api) {
    self.VM = vm_api;
}

/* A table of the Glk classes, and their index numbers. This is derived from
   gi_dispa.c, although it's too simple to bother auto-generating.
*/
var class_defs = {
    0: 'window',
    1: 'stream',
    2: 'fileref',
    3: 'schannel'
};

/* FuncSpec is a data representation of a Glk function's prototype.
   The table of FuncSpecs is generated, ultimately, from the Glk
   prototype description strings in gi_dispa.c.
*/
function FuncSpec(id, name, proto) {
    this.id = id;
    this.name = name;
    this.proto = proto;
}

/* A bunch of data classes, used by FuncSpec. */

function Prototype(args, retarg) {
    this.args = args;
    this.retarg = retarg;
}
function ArgString() { 
    this.macro = 'Byte';
    this.refsize = 1;
    this.serialize = function() {
        return { type:'ArgString' };
    };
}
function ArgUnicode() { 
    this.macro = 'Word';
    this.refsize = 4;
    this.serialize = function() {
        return { type:'ArgUnicode' };
    };
}
function ArgChar(signed) {
    this.signed = signed;
    this.macro = 'Byte';
    this.refsize = 1;
    /* Note that in build_function(), we use the literal field, so
       'arg_char_unsigned' appears for the "char native" case. This is
       okay, since we only use arg.signed as a condition at that point. */
    this.literal = (signed ? 'arg_char_signed' : 'arg_char_unsigned');
    this.serialize = function() {
        return { type:'ArgChar', signed:signed };
    };
}
function ArgInt(signed) {
    this.signed = signed;
    this.macro = 'Word';
    this.refsize = 4;
    this.literal = (signed ? 'arg_int_signed' : 'arg_int_unsigned');
    this.serialize = function() {
        return { type:'ArgInt', signed:signed };
    };
}
function ArgClass(name) {
    this.name = name;
    this.macro = 'Word';
    this.refsize = 4;
}
function ArgStruct(form) {
    this.form = form;
}
function ArgRef(arg, passin, passout, nonnull) {
    this.arg = arg;
    this.passin = passin;
    this.passout = passout;
    this.nonnull = nonnull;
}
function ArgArray(arg, retained, passin, passout, nonnull) {
    this.arg = arg;
    this.retained = retained;
    this.passin = passin;
    this.passout = passout;
    this.nonnull = nonnull;
}

/* Turn the (JSONable) object generated by ArgX.serialize() back into
   the ArgX. */
function arg_deserialize(obj) {
    switch (obj.type) {
    case 'ArgString':
        return new ArgString();
    case 'ArgUnicode':
        return new ArgUnicode();
    case 'ArgInt':
        if (obj.signed)
            return arg_int_signed;
        else
            return arg_int_unsigned;
    case 'ArgChar':
        if (obj.signed === null)
            return arg_char_native;
        else if (obj.signed)
            return arg_char_signed;
        else
            return arg_char_unsigned;
    /* The other Arg types should not show up here. I hope. */
    }
    throw new Error('arg_deserialize: unknown type: ' + obj.type);
}

// The following table is auto-generated by parse_dispatch.py.
// Generated for Glk API version 0.7.4
/* Some literal ArgInt and ArgChar objects, used to speed
   up the proto_map construction. These globals are also
   used in the build_function() call in gi_dispa.js. */
var arg_int_unsigned = new ArgInt(false);
var arg_int_signed = new ArgInt(true);
var arg_char_unsigned = new ArgChar(false);
var arg_char_native = new ArgChar(null);
var arg_char_signed = new ArgChar(true);
var arg_class_window = new ArgClass("window");
var arg_class_stream = new ArgClass("stream");
var arg_class_fileref = new ArgClass("fileref");
var arg_class_schannel = new ArgClass("schannel");
var proto_map = {
// 1 (0x001): exit - 0:
1 : new FuncSpec(1, "exit", new Prototype([], null)),
// 3 (0x003): tick - 0:
3 : new FuncSpec(3, "tick", new Prototype([], null)),
// 4 (0x004): gestalt - 3IuIu:Iu
4 : new FuncSpec(4, "gestalt", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 5 (0x005): gestalt_ext - 4IuIu&#Iu:Iu
5 : new FuncSpec(5, "gestalt_ext", new Prototype([arg_int_unsigned, arg_int_unsigned, new ArgArray(arg_int_unsigned, false, true, true, false)], new ArgRef(arg_int_unsigned, false, true, true))),
// 32 (0x020): window_iterate - 3Qa<Iu:Qa
32 : new FuncSpec(32, "window_iterate", new Prototype([arg_class_window, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_window, false, true, true))),
// 33 (0x021): window_get_rock - 2Qa:Iu
33 : new FuncSpec(33, "window_get_rock", new Prototype([arg_class_window], new ArgRef(arg_int_unsigned, false, true, true))),
// 34 (0x022): window_get_root - 1:Qa
34 : new FuncSpec(34, "window_get_root", new Prototype([], new ArgRef(arg_class_window, false, true, true))),
// 35 (0x023): window_open - 6QaIuIuIuIu:Qa
35 : new FuncSpec(35, "window_open", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_window, false, true, true))),
// 36 (0x024): window_close - 2Qa<[2IuIu]:
36 : new FuncSpec(36, "window_close", new Prototype([arg_class_window, new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_int_unsigned], null)), false, true, false)], null)),
// 37 (0x025): window_get_size - 3Qa<Iu<Iu:
37 : new FuncSpec(37, "window_get_size", new Prototype([arg_class_window, new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_int_unsigned, false, true, false)], null)),
// 38 (0x026): window_set_arrangement - 4QaIuIuQa:
38 : new FuncSpec(38, "window_set_arrangement", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned, arg_class_window], null)),
// 39 (0x027): window_get_arrangement - 4Qa<Iu<Iu<Qa:
39 : new FuncSpec(39, "window_get_arrangement", new Prototype([arg_class_window, new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_class_window, false, true, false)], null)),
// 40 (0x028): window_get_type - 2Qa:Iu
40 : new FuncSpec(40, "window_get_type", new Prototype([arg_class_window], new ArgRef(arg_int_unsigned, false, true, true))),
// 41 (0x029): window_get_parent - 2Qa:Qa
41 : new FuncSpec(41, "window_get_parent", new Prototype([arg_class_window], new ArgRef(arg_class_window, false, true, true))),
// 42 (0x02A): window_clear - 1Qa:
42 : new FuncSpec(42, "window_clear", new Prototype([arg_class_window], null)),
// 43 (0x02B): window_move_cursor - 3QaIuIu:
43 : new FuncSpec(43, "window_move_cursor", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned], null)),
// 44 (0x02C): window_get_stream - 2Qa:Qb
44 : new FuncSpec(44, "window_get_stream", new Prototype([arg_class_window], new ArgRef(arg_class_stream, false, true, true))),
// 45 (0x02D): window_set_echo_stream - 2QaQb:
45 : new FuncSpec(45, "window_set_echo_stream", new Prototype([arg_class_window, arg_class_stream], null)),
// 46 (0x02E): window_get_echo_stream - 2Qa:Qb
46 : new FuncSpec(46, "window_get_echo_stream", new Prototype([arg_class_window], new ArgRef(arg_class_stream, false, true, true))),
// 47 (0x02F): set_window - 1Qa:
47 : new FuncSpec(47, "set_window", new Prototype([arg_class_window], null)),
// 48 (0x030): window_get_sibling - 2Qa:Qa
48 : new FuncSpec(48, "window_get_sibling", new Prototype([arg_class_window], new ArgRef(arg_class_window, false, true, true))),
// 64 (0x040): stream_iterate - 3Qb<Iu:Qb
64 : new FuncSpec(64, "stream_iterate", new Prototype([arg_class_stream, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_stream, false, true, true))),
// 65 (0x041): stream_get_rock - 2Qb:Iu
65 : new FuncSpec(65, "stream_get_rock", new Prototype([arg_class_stream], new ArgRef(arg_int_unsigned, false, true, true))),
// 66 (0x042): stream_open_file - 4QcIuIu:Qb
66 : new FuncSpec(66, "stream_open_file", new Prototype([arg_class_fileref, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),
// 67 (0x043): stream_open_memory - 4&#!CnIuIu:Qb
67 : new FuncSpec(67, "stream_open_memory", new Prototype([new ArgArray(arg_char_native, true, true, true, false), arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),
// 68 (0x044): stream_close - 2Qb<[2IuIu]:
68 : new FuncSpec(68, "stream_close", new Prototype([arg_class_stream, new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_int_unsigned], null)), false, true, false)], null)),
// 69 (0x045): stream_set_position - 3QbIsIu:
69 : new FuncSpec(69, "stream_set_position", new Prototype([arg_class_stream, arg_int_signed, arg_int_unsigned], null)),
// 70 (0x046): stream_get_position - 2Qb:Iu
70 : new FuncSpec(70, "stream_get_position", new Prototype([arg_class_stream], new ArgRef(arg_int_unsigned, false, true, true))),
// 71 (0x047): stream_set_current - 1Qb:
71 : new FuncSpec(71, "stream_set_current", new Prototype([arg_class_stream], null)),
// 72 (0x048): stream_get_current - 1:Qb
72 : new FuncSpec(72, "stream_get_current", new Prototype([], new ArgRef(arg_class_stream, false, true, true))),
// 73 (0x049): stream_open_resource - 3IuIu:Qb
73 : new FuncSpec(73, "stream_open_resource", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),
// 96 (0x060): fileref_create_temp - 3IuIu:Qc
96 : new FuncSpec(96, "fileref_create_temp", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),
// 97 (0x061): fileref_create_by_name - 4IuSIu:Qc
97 : new FuncSpec(97, "fileref_create_by_name", new Prototype([arg_int_unsigned, new ArgString(), arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),
// 98 (0x062): fileref_create_by_prompt - 4IuIuIu:Qc
98 : new FuncSpec(98, "fileref_create_by_prompt", new Prototype([arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),
// 99 (0x063): fileref_destroy - 1Qc:
99 : new FuncSpec(99, "fileref_destroy", new Prototype([arg_class_fileref], null)),
// 100 (0x064): fileref_iterate - 3Qc<Iu:Qc
100 : new FuncSpec(100, "fileref_iterate", new Prototype([arg_class_fileref, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_fileref, false, true, true))),
// 101 (0x065): fileref_get_rock - 2Qc:Iu
101 : new FuncSpec(101, "fileref_get_rock", new Prototype([arg_class_fileref], new ArgRef(arg_int_unsigned, false, true, true))),
// 102 (0x066): fileref_delete_file - 1Qc:
102 : new FuncSpec(102, "fileref_delete_file", new Prototype([arg_class_fileref], null)),
// 103 (0x067): fileref_does_file_exist - 2Qc:Iu
103 : new FuncSpec(103, "fileref_does_file_exist", new Prototype([arg_class_fileref], new ArgRef(arg_int_unsigned, false, true, true))),
// 104 (0x068): fileref_create_from_fileref - 4IuQcIu:Qc
104 : new FuncSpec(104, "fileref_create_from_fileref", new Prototype([arg_int_unsigned, arg_class_fileref, arg_int_unsigned], new ArgRef(arg_class_fileref, false, true, true))),
// 128 (0x080): put_char - 1Cu:
128 : new FuncSpec(128, "put_char", new Prototype([arg_char_unsigned], null)),
// 129 (0x081): put_char_stream - 2QbCu:
129 : new FuncSpec(129, "put_char_stream", new Prototype([arg_class_stream, arg_char_unsigned], null)),
// 130 (0x082): put_string - 1S:
130 : new FuncSpec(130, "put_string", new Prototype([new ArgString()], null)),
// 131 (0x083): put_string_stream - 2QbS:
131 : new FuncSpec(131, "put_string_stream", new Prototype([arg_class_stream, new ArgString()], null)),
// 132 (0x084): put_buffer - 1>+#Cn:
132 : new FuncSpec(132, "put_buffer", new Prototype([new ArgArray(arg_char_native, false, true, false, true)], null)),
// 133 (0x085): put_buffer_stream - 2Qb>+#Cn:
133 : new FuncSpec(133, "put_buffer_stream", new Prototype([arg_class_stream, new ArgArray(arg_char_native, false, true, false, true)], null)),
// 134 (0x086): set_style - 1Iu:
134 : new FuncSpec(134, "set_style", new Prototype([arg_int_unsigned], null)),
// 135 (0x087): set_style_stream - 2QbIu:
135 : new FuncSpec(135, "set_style_stream", new Prototype([arg_class_stream, arg_int_unsigned], null)),
// 144 (0x090): get_char_stream - 2Qb:Is
144 : new FuncSpec(144, "get_char_stream", new Prototype([arg_class_stream], new ArgRef(arg_int_signed, false, true, true))),
// 145 (0x091): get_line_stream - 3Qb<+#Cn:Iu
145 : new FuncSpec(145, "get_line_stream", new Prototype([arg_class_stream, new ArgArray(arg_char_native, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),
// 146 (0x092): get_buffer_stream - 3Qb<+#Cn:Iu
146 : new FuncSpec(146, "get_buffer_stream", new Prototype([arg_class_stream, new ArgArray(arg_char_native, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),
// 160 (0x0A0): char_to_lower - 2Cu:Cu
160 : new FuncSpec(160, "char_to_lower", new Prototype([arg_char_unsigned], new ArgRef(arg_char_unsigned, false, true, true))),
// 161 (0x0A1): char_to_upper - 2Cu:Cu
161 : new FuncSpec(161, "char_to_upper", new Prototype([arg_char_unsigned], new ArgRef(arg_char_unsigned, false, true, true))),
// 176 (0x0B0): stylehint_set - 4IuIuIuIs:
176 : new FuncSpec(176, "stylehint_set", new Prototype([arg_int_unsigned, arg_int_unsigned, arg_int_unsigned, arg_int_signed], null)),
// 177 (0x0B1): stylehint_clear - 3IuIuIu:
177 : new FuncSpec(177, "stylehint_clear", new Prototype([arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], null)),
// 178 (0x0B2): style_distinguish - 4QaIuIu:Iu
178 : new FuncSpec(178, "style_distinguish", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 179 (0x0B3): style_measure - 5QaIuIu<Iu:Iu
179 : new FuncSpec(179, "style_measure", new Prototype([arg_class_window, arg_int_unsigned, arg_int_unsigned, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_int_unsigned, false, true, true))),
// 192 (0x0C0): select - 1<+[4IuQaIuIu]:
192 : new FuncSpec(192, "select", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_class_window, arg_int_unsigned, arg_int_unsigned], null)), false, true, true)], null)),
// 193 (0x0C1): select_poll - 1<+[4IuQaIuIu]:
193 : new FuncSpec(193, "select_poll", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_class_window, arg_int_unsigned, arg_int_unsigned], null)), false, true, true)], null)),
// 208 (0x0D0): request_line_event - 3Qa&+#!CnIu:
208 : new FuncSpec(208, "request_line_event", new Prototype([arg_class_window, new ArgArray(arg_char_native, true, true, true, true), arg_int_unsigned], null)),
// 209 (0x0D1): cancel_line_event - 2Qa<[4IuQaIuIu]:
209 : new FuncSpec(209, "cancel_line_event", new Prototype([arg_class_window, new ArgRef(new ArgStruct(new Prototype([arg_int_unsigned, arg_class_window, arg_int_unsigned, arg_int_unsigned], null)), false, true, false)], null)),
// 210 (0x0D2): request_char_event - 1Qa:
210 : new FuncSpec(210, "request_char_event", new Prototype([arg_class_window], null)),
// 211 (0x0D3): cancel_char_event - 1Qa:
211 : new FuncSpec(211, "cancel_char_event", new Prototype([arg_class_window], null)),
// 212 (0x0D4): request_mouse_event - 1Qa:
212 : new FuncSpec(212, "request_mouse_event", new Prototype([arg_class_window], null)),
// 213 (0x0D5): cancel_mouse_event - 1Qa:
213 : new FuncSpec(213, "cancel_mouse_event", new Prototype([arg_class_window], null)),
// 214 (0x0D6): request_timer_events - 1Iu:
214 : new FuncSpec(214, "request_timer_events", new Prototype([arg_int_unsigned], null)),
// 224 (0x0E0): image_get_info - 4Iu<Iu<Iu:Iu
224 : new FuncSpec(224, "image_get_info", new Prototype([arg_int_unsigned, new ArgRef(arg_int_unsigned, false, true, false), new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_int_unsigned, false, true, true))),
// 225 (0x0E1): image_draw - 5QaIuIsIs:Iu
225 : new FuncSpec(225, "image_draw", new Prototype([arg_class_window, arg_int_unsigned, arg_int_signed, arg_int_signed], new ArgRef(arg_int_unsigned, false, true, true))),
// 226 (0x0E2): image_draw_scaled - 7QaIuIsIsIuIu:Iu
226 : new FuncSpec(226, "image_draw_scaled", new Prototype([arg_class_window, arg_int_unsigned, arg_int_signed, arg_int_signed, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 232 (0x0E8): window_flow_break - 1Qa:
232 : new FuncSpec(232, "window_flow_break", new Prototype([arg_class_window], null)),
// 233 (0x0E9): window_erase_rect - 5QaIsIsIuIu:
233 : new FuncSpec(233, "window_erase_rect", new Prototype([arg_class_window, arg_int_signed, arg_int_signed, arg_int_unsigned, arg_int_unsigned], null)),
// 234 (0x0EA): window_fill_rect - 6QaIuIsIsIuIu:
234 : new FuncSpec(234, "window_fill_rect", new Prototype([arg_class_window, arg_int_unsigned, arg_int_signed, arg_int_signed, arg_int_unsigned, arg_int_unsigned], null)),
// 235 (0x0EB): window_set_background_color - 2QaIu:
235 : new FuncSpec(235, "window_set_background_color", new Prototype([arg_class_window, arg_int_unsigned], null)),
// 240 (0x0F0): schannel_iterate - 3Qd<Iu:Qd
240 : new FuncSpec(240, "schannel_iterate", new Prototype([arg_class_schannel, new ArgRef(arg_int_unsigned, false, true, false)], new ArgRef(arg_class_schannel, false, true, true))),
// 241 (0x0F1): schannel_get_rock - 2Qd:Iu
241 : new FuncSpec(241, "schannel_get_rock", new Prototype([arg_class_schannel], new ArgRef(arg_int_unsigned, false, true, true))),
// 242 (0x0F2): schannel_create - 2Iu:Qd
242 : new FuncSpec(242, "schannel_create", new Prototype([arg_int_unsigned], new ArgRef(arg_class_schannel, false, true, true))),
// 243 (0x0F3): schannel_destroy - 1Qd:
243 : new FuncSpec(243, "schannel_destroy", new Prototype([arg_class_schannel], null)),
// 244 (0x0F4): schannel_create_ext - 3IuIu:Qd
244 : new FuncSpec(244, "schannel_create_ext", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_schannel, false, true, true))),
// 247 (0x0F7): schannel_play_multi - 4>+#Qd>+#IuIu:Iu
247 : new FuncSpec(247, "schannel_play_multi", new Prototype([new ArgArray(arg_class_schannel, false, true, false, true), new ArgArray(arg_int_unsigned, false, true, false, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 248 (0x0F8): schannel_play - 3QdIu:Iu
248 : new FuncSpec(248, "schannel_play", new Prototype([arg_class_schannel, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 249 (0x0F9): schannel_play_ext - 5QdIuIuIu:Iu
249 : new FuncSpec(249, "schannel_play_ext", new Prototype([arg_class_schannel, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 250 (0x0FA): schannel_stop - 1Qd:
250 : new FuncSpec(250, "schannel_stop", new Prototype([arg_class_schannel], null)),
// 251 (0x0FB): schannel_set_volume - 2QdIu:
251 : new FuncSpec(251, "schannel_set_volume", new Prototype([arg_class_schannel, arg_int_unsigned], null)),
// 252 (0x0FC): sound_load_hint - 2IuIu:
252 : new FuncSpec(252, "sound_load_hint", new Prototype([arg_int_unsigned, arg_int_unsigned], null)),
// 253 (0x0FD): schannel_set_volume_ext - 4QdIuIuIu:
253 : new FuncSpec(253, "schannel_set_volume_ext", new Prototype([arg_class_schannel, arg_int_unsigned, arg_int_unsigned, arg_int_unsigned], null)),
// 254 (0x0FE): schannel_pause - 1Qd:
254 : new FuncSpec(254, "schannel_pause", new Prototype([arg_class_schannel], null)),
// 255 (0x0FF): schannel_unpause - 1Qd:
255 : new FuncSpec(255, "schannel_unpause", new Prototype([arg_class_schannel], null)),
// 256 (0x100): set_hyperlink - 1Iu:
256 : new FuncSpec(256, "set_hyperlink", new Prototype([arg_int_unsigned], null)),
// 257 (0x101): set_hyperlink_stream - 2QbIu:
257 : new FuncSpec(257, "set_hyperlink_stream", new Prototype([arg_class_stream, arg_int_unsigned], null)),
// 258 (0x102): request_hyperlink_event - 1Qa:
258 : new FuncSpec(258, "request_hyperlink_event", new Prototype([arg_class_window], null)),
// 259 (0x103): cancel_hyperlink_event - 1Qa:
259 : new FuncSpec(259, "cancel_hyperlink_event", new Prototype([arg_class_window], null)),
// 288 (0x120): buffer_to_lower_case_uni - 3&+#IuIu:Iu
288 : new FuncSpec(288, "buffer_to_lower_case_uni", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 289 (0x121): buffer_to_upper_case_uni - 3&+#IuIu:Iu
289 : new FuncSpec(289, "buffer_to_upper_case_uni", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 290 (0x122): buffer_to_title_case_uni - 4&+#IuIuIu:Iu
290 : new FuncSpec(290, "buffer_to_title_case_uni", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 291 (0x123): buffer_canon_decompose_uni - 3&+#IuIu:Iu
291 : new FuncSpec(291, "buffer_canon_decompose_uni", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 292 (0x124): buffer_canon_normalize_uni - 3&+#IuIu:Iu
292 : new FuncSpec(292, "buffer_canon_normalize_uni", new Prototype([new ArgArray(arg_int_unsigned, false, true, true, true), arg_int_unsigned], new ArgRef(arg_int_unsigned, false, true, true))),
// 296 (0x128): put_char_uni - 1Iu:
296 : new FuncSpec(296, "put_char_uni", new Prototype([arg_int_unsigned], null)),
// 297 (0x129): put_string_uni - 1U:
297 : new FuncSpec(297, "put_string_uni", new Prototype([new ArgUnicode()], null)),
// 298 (0x12A): put_buffer_uni - 1>+#Iu:
298 : new FuncSpec(298, "put_buffer_uni", new Prototype([new ArgArray(arg_int_unsigned, false, true, false, true)], null)),
// 299 (0x12B): put_char_stream_uni - 2QbIu:
299 : new FuncSpec(299, "put_char_stream_uni", new Prototype([arg_class_stream, arg_int_unsigned], null)),
// 300 (0x12C): put_string_stream_uni - 2QbU:
300 : new FuncSpec(300, "put_string_stream_uni", new Prototype([arg_class_stream, new ArgUnicode()], null)),
// 301 (0x12D): put_buffer_stream_uni - 2Qb>+#Iu:
301 : new FuncSpec(301, "put_buffer_stream_uni", new Prototype([arg_class_stream, new ArgArray(arg_int_unsigned, false, true, false, true)], null)),
// 304 (0x130): get_char_stream_uni - 2Qb:Is
304 : new FuncSpec(304, "get_char_stream_uni", new Prototype([arg_class_stream], new ArgRef(arg_int_signed, false, true, true))),
// 305 (0x131): get_buffer_stream_uni - 3Qb<+#Iu:Iu
305 : new FuncSpec(305, "get_buffer_stream_uni", new Prototype([arg_class_stream, new ArgArray(arg_int_unsigned, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),
// 306 (0x132): get_line_stream_uni - 3Qb<+#Iu:Iu
306 : new FuncSpec(306, "get_line_stream_uni", new Prototype([arg_class_stream, new ArgArray(arg_int_unsigned, false, false, true, true)], new ArgRef(arg_int_unsigned, false, true, true))),
// 312 (0x138): stream_open_file_uni - 4QcIuIu:Qb
312 : new FuncSpec(312, "stream_open_file_uni", new Prototype([arg_class_fileref, arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),
// 313 (0x139): stream_open_memory_uni - 4&#!IuIuIu:Qb
313 : new FuncSpec(313, "stream_open_memory_uni", new Prototype([new ArgArray(arg_int_unsigned, true, true, true, false), arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),
// 314 (0x13A): stream_open_resource_uni - 3IuIu:Qb
314 : new FuncSpec(314, "stream_open_resource_uni", new Prototype([arg_int_unsigned, arg_int_unsigned], new ArgRef(arg_class_stream, false, true, true))),
// 320 (0x140): request_char_event_uni - 1Qa:
320 : new FuncSpec(320, "request_char_event_uni", new Prototype([arg_class_window], null)),
// 321 (0x141): request_line_event_uni - 3Qa&+#!IuIu:
321 : new FuncSpec(321, "request_line_event_uni", new Prototype([arg_class_window, new ArgArray(arg_int_unsigned, true, true, true, true), arg_int_unsigned], null)),
// 336 (0x150): set_echo_line_event - 2QaIu:
336 : new FuncSpec(336, "set_echo_line_event", new Prototype([arg_class_window, arg_int_unsigned], null)),
// 337 (0x151): set_terminators_line_event - 2Qa>#Iu:
337 : new FuncSpec(337, "set_terminators_line_event", new Prototype([arg_class_window, new ArgArray(arg_int_unsigned, false, true, false, false)], null)),
// 352 (0x160): current_time - 1<+[3IsIuIs]:
352 : new FuncSpec(352, "current_time", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), false, true, true)], null)),
// 353 (0x161): current_simple_time - 2Iu:Is
353 : new FuncSpec(353, "current_simple_time", new Prototype([arg_int_unsigned], new ArgRef(arg_int_signed, false, true, true))),
// 360 (0x168): time_to_date_utc - 2>+[3IsIuIs]<+[8IsIsIsIsIsIsIsIs]:
360 : new FuncSpec(360, "time_to_date_utc", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),
// 361 (0x169): time_to_date_local - 2>+[3IsIuIs]<+[8IsIsIsIsIsIsIsIs]:
361 : new FuncSpec(361, "time_to_date_local", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),
// 362 (0x16A): simple_time_to_date_utc - 3IsIu<+[8IsIsIsIsIsIsIsIs]:
362 : new FuncSpec(362, "simple_time_to_date_utc", new Prototype([arg_int_signed, arg_int_unsigned, new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),
// 363 (0x16B): simple_time_to_date_local - 3IsIu<+[8IsIsIsIsIsIsIsIs]:
363 : new FuncSpec(363, "simple_time_to_date_local", new Prototype([arg_int_signed, arg_int_unsigned, new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), false, true, true)], null)),
// 364 (0x16C): date_to_time_utc - 2>+[8IsIsIsIsIsIsIsIs]<+[3IsIuIs]:
364 : new FuncSpec(364, "date_to_time_utc", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), false, true, true)], null)),
// 365 (0x16D): date_to_time_local - 2>+[8IsIsIsIsIsIsIsIs]<+[3IsIuIs]:
365 : new FuncSpec(365, "date_to_time_local", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_unsigned, arg_int_signed], null)), false, true, true)], null)),
// 366 (0x16E): date_to_simple_time_utc - 3>+[8IsIsIsIsIsIsIsIs]Iu:Is
366 : new FuncSpec(366, "date_to_simple_time_utc", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), arg_int_unsigned], new ArgRef(arg_int_signed, false, true, true))),
// 367 (0x16F): date_to_simple_time_local - 3>+[8IsIsIsIsIsIsIsIs]Iu:Is
367 : new FuncSpec(367, "date_to_simple_time_local", new Prototype([new ArgRef(new ArgStruct(new Prototype([arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed, arg_int_signed], null)), true, false, true), arg_int_unsigned], new ArgRef(arg_int_signed, false, true, true)))
};
// End of auto-generated table.


/* Make globals available to compiled functions. */
self.arg_int_unsigned  = arg_int_unsigned;
self.arg_int_signed    = arg_int_signed;
self.arg_char_unsigned = arg_char_unsigned;
self.arg_char_native   = arg_char_native;
self.arg_char_signed   = arg_char_signed;

/* Convert one simple value (int, char, string, class) from a Glulx
   value (32-bit unsigned integer) into a Glk library value.
*/
function convert_arg(arg, passin, val) {
    if (arg instanceof ArgInt) {
        if (passin) {
            if (!arg.signed)
                return val;
            else
                return val + ' & 0xFFFFFFFF';
        }
        else {
            return '0';
        }
    }
    if (arg instanceof ArgChar) {
        if (passin) {
            if (!arg.signed)
                return val + ' & 0xFF';
            else
                return 'self.cast_signed_char('+val+')'
        }
        else {
            return '0';
        }
    }
    if (arg instanceof ArgClass) {
        if (passin) {
            return 'self.class_obj_from_id("'+arg.name+'", '+val+')';
        }
        else {
            return 'null';
        }
    }
    return '???';
}

/* Convert one simple value (int, char, string, class) from a Glk library 
   value into a Glulx value (32-bit unsigned integer).
*/
function unconvert_arg(arg, val) {
    if (arg instanceof ArgInt) {
        return val + ' >>> 0';
    }
    if (arg instanceof ArgChar) {
        if (!arg.signed)
            return val + ' & 0xFF';
        else
            return 'self.uncast_signed_char('+val+')'
    }
    if (arg instanceof ArgClass) {
        return 'self.class_obj_to_id("'+arg.name+'", '+val+')';
    }
    return '???';
}

/* Convert a Glulx value into a signed char value. Not a Javascript
   string, but the bastardized C notion used by the Glk library:
   a number from -128 to 127.
*/
function cast_signed_char(val) {
    val = val & 0xFF;
    if (val & 0x80)
        val -= 0x100;
    return val;
}
self.cast_signed_char = cast_signed_char;

/* The converse. */
function uncast_signed_char(val) {
    val = val & 0xFF;
    if (val & 0x80)
        val += 0xFFFFFF00;
    return val;
}
self.uncast_signed_char = uncast_signed_char;

/* Convert an opaque object (a window, stream, or whatever) to a Glulx value
   (an unsigned 32-bit number).
*/
function class_obj_to_id(clas, val) {
    if (!val)
        return 0;
    return val.disprock;
}
self.class_obj_to_id = class_obj_to_id;

/* The converse. */
function class_obj_from_id(clas, val) {
    if (val == 0 || !val)
        return null;
    return class_map[clas][val];
}
self.class_obj_from_id = class_obj_from_id;

/* Convert a FuncSpec object into a Javascript function. The function,
   when called, should be passed exactly one argument: an array of
   Glulx values, taken straight from the VM. It will return a Glulx
   value (zero, if the Glk call does not return a value).

   (This function is for internal use. The VM should call get_function(),
   which caches built functions.)
*/
function build_function(func) {
    var ix, jx;
    var form, retarg, argpos, argjoin, subargs;
    var arg, refarg, tmpvar, val, retval, ls;
    var mayblock;

    /* We will accumulate a list of Javascript lines in the out array. */
    var out = [];
    var locals = {};
    var arraycount = 0;

    out.push('// no local vars');
    out.push('// ' + func.id + ': ' + func.name);
    form = func.proto;
    retarg = null;
    if (form.retarg)
        retarg = form.retarg.arg;

    /* The "self" object will be bound in via "this". */
    out.push('var self = this;');

    /* If this is true, the call might return DidNotReturn. */
    mayblock = Glk.call_may_not_return(func.id);

    /* Load the argument values into local variables, for use in the
       call. For array, struct, and reference arguments, we also need
       to load up the referred-to values. */

    argpos = 0;
    argjoin = [];
    for (ix=0; ix<form.args.length; ix++) {
        arg = form.args[ix];
        tmpvar = 'glka'+ix;
        argjoin.push(tmpvar);
        locals[tmpvar] = true;
        if ((arg instanceof ArgInt)
            || (arg instanceof ArgChar)
            || (arg instanceof ArgClass)) {
            val = convert_arg(arg, true, 'callargs['+argpos+']');
            out.push(tmpvar + ' = ' + val + ';');
            argpos += 1;
        }
        else if (arg instanceof ArgRef) {
            refarg = arg.arg;
            out.push('if (callargs['+argpos+'] == 0) {');
            if (arg.nonnull) 
                out.push('  throw new Error("glk '+func.name+': null argument");');
            else
                out.push('  '+tmpvar+' = null;');
            out.push('} else {');
            if ((refarg instanceof ArgInt)
                || (refarg instanceof ArgChar)
                || (refarg instanceof ArgClass)) {
                out.push('  '+tmpvar+' = new Glk.RefBox();');
                val = convert_arg(refarg, arg.passin, 'self.VM.ReadWord(callargs['+argpos+'])');
                out.push('  '+tmpvar+'.set_value('+val+');');
            }
            else if (refarg instanceof ArgStruct) {
                subargs = refarg.form.args;
                out.push('  '+tmpvar+' = new Glk.RefStruct('+subargs.length+');');
                for (jx=0; jx<subargs.length; jx++) {
                    val = convert_arg(subargs[jx], arg.passin, 'self.VM.ReadStructField(callargs['+argpos+'], '+jx+')');
                    out.push('  '+tmpvar+'.push_field('+val+');');
                }
            }
            else {
                throw new Error('buildfunc: unsupported refarg type: ' + func.name);
            }
            out.push('}');
            argpos += 1;
        }
        else if (arg instanceof ArgArray) {
            locals['glklen'] = true;
            refarg = arg.arg;
            out.push('if (callargs['+argpos+'] == 0) {');
            if (arg.nonnull)
                out.push('  throw new Error("glk '+func.name+': null argument");');
            else
                out.push('  '+tmpvar+' = null;');
            out.push('} else {');
            out.push('  glklen = callargs['+(argpos+1)+'];');
            out.push('  '+tmpvar+' = Array(glklen);');
            if (arg.passin) {
                locals['ix'] = true;
                locals['jx'] = true;
                out.push('  for (ix=0, jx=callargs['+argpos+']; ix<glklen; ix++, jx+='+refarg.refsize+') {');
                val = convert_arg(refarg, true, 'self.VM.Read'+refarg.macro+'(jx)');
                out.push('    '+tmpvar+'[ix] = '+val+';');
                out.push('  }');
            }
            if (arg.retained) {
                if (arraycount == 0)
                    out.push('  self.temp_arg_arrays.length = 0;');
                arraycount += 1;
                out.push('  self.make_arg_array('+tmpvar+', callargs['+argpos+'], glklen, self.'+refarg.literal+');');
            }
            out.push('}');
            argpos += 2;
        }
        else if ((arg instanceof ArgString) || (arg instanceof ArgUnicode)) {
            locals['ix'] = true;
            locals['jx'] = true;
            var confunc, checkbyte;
            if (arg instanceof ArgString) {
                checkbyte = '0xE0';
                confunc = 'byte_array_to_string';
            }
            else {
                checkbyte = '0xE2';
                confunc = 'uni_array_to_string';
            }
            out.push(tmpvar+' = Array();');
            out.push('jx = callargs['+argpos+'];');
            out.push('if (self.VM.ReadByte(jx) != '+checkbyte+') throw new Error("glk '+func.name+': string argument must be unencoded");');
            out.push('for (jx+='+arg.refsize+'; true; jx+='+arg.refsize+') {');
            out.push('  ix = self.VM.Read'+arg.macro+'(jx);');
            out.push('  if (ix == 0) break;');
            out.push('  '+tmpvar+'.push(ix);');
            out.push('}');
            out.push(tmpvar+' = Glk.'+confunc+'('+tmpvar+');');
            argpos += 1;
        }
        else {
            throw new Error('buildfunc: unsupported arg type: ' + func.name);
        }
    }

    out.push('if (callargs.length != '+argpos+') throw "glk '+func.name+': wrong number of arguments";');

    /* Perform the call itself. */

    if (retarg || mayblock) {
        locals['glkret'] = true;
        retval = 'glkret = ';
    }
    else {
        retval = '';
    }
    out.push(retval + 'Glk.glk_' + func.name + '(' + argjoin.join(', ') + ');');

    if (mayblock) {
        /* If the call blocks, we need to stash away the arguments and
           then return early. */
        out.push('if (glkret === Glk.DidNotReturn) {');
        out.push('  self.set_blocked_selector(' + func.id + ', callargs);');
        out.push('  return glkret;');
        out.push('}');
    }

    /* For reference/array/struct arguments, unload the referred-to values
       back out to the VM. */

    argpos = 0;
    for (ix=0; ix<form.args.length; ix++) {
        arg = form.args[ix];
        tmpvar = 'glka'+ix;
        if ((arg instanceof ArgInt)
            || (arg instanceof ArgChar)
            || (arg instanceof ArgClass)) {
            argpos += 1;
        }
        else if (arg instanceof ArgRef) {
            refarg = arg.arg;
            if (arg.passout) {
                out.push('if ('+tmpvar+') {');
                if ((refarg instanceof ArgInt)
                    || (refarg instanceof ArgChar)
                    || (refarg instanceof ArgClass)) {
                    val = unconvert_arg(refarg, tmpvar+'.get_value()');
                    out.push('  self.VM.WriteWord(callargs['+argpos+'], '+val+');');
                }
                else if (refarg instanceof ArgStruct) {
                    subargs = refarg.form.args;
                    for (jx=0; jx<subargs.length; jx++) {
                        val = unconvert_arg(subargs[jx], tmpvar+'.get_field('+jx+')');
                        out.push('  self.VM.WriteStructField(callargs['+argpos+'], '+jx+', '+val+');');
                    }
                }
                else {
                    throw new Error('buildfunc: unsupported refarg type: ' + func.name);
                }
                out.push('}');
            }
            argpos += 1;
        }
        else if (arg instanceof ArgArray) {
            refarg = arg.arg;
            if (arg.passout && !arg.retained) {
                out.push('if ('+tmpvar+') {');
                locals['ix'] = true;
                locals['jx'] = true;
                out.push('  for (ix=0, jx=callargs['+argpos+']; ix<glklen; ix++, jx+='+refarg.refsize+') {');
                val = unconvert_arg(refarg, tmpvar+'[ix]');
                out.push('    self.VM.Write'+refarg.macro+'(jx, '+val+')');
                out.push('  }');
                out.push('}');
            }
            argpos += 2;
        }
        else if ((arg instanceof ArgString) || (arg instanceof ArgUnicode)) {
            argpos += 1;
        }
        else {
            throw new Error('buildfunc: unsupported arg type: ' + func.name);
        }
    }
    
    /* Discard any argument arrays. (Retained ones have already been
       added to retained_arrays.) */
    if (arraycount != 0)
        out.push('self.temp_arg_arrays.length = 0;');

    /* Return the return value. */

    if (retarg) {
        val = unconvert_arg(retarg, 'glkret');
        out.push('return '+val+';');
    }
    else {
        out.push('return 0;');
    }

    /* Add a line to the beginning which lists all the locals we used. */

    ls = [];
    for (val in locals)
        ls.push(val);
    if (ls.length)
        out[0] = 'var ' + ls.join(', ') + ';';
    val = out.join('\n');

    /* Compile the function and return it. We bind the internal object as
       its "this". */
    var resfunc = new Function('callargs', val);
    return resfunc.bind(self);
}

/* Cache of all the dispatch functions we've compiled. */
var function_map = {};

/* Given a Glk selector number, return the dispatch function for it.

   The function, when called, should be passed exactly one argument: 
   an array of Glulx values, taken straight from the VM. It will return
   a Glulx value (zero, if the Glk call does not return a value).

   If the selector number is not recognized, this throws an exception.
*/
function get_function(id) {
    var proto;
    var func = function_map[id];
    if (func === undefined) {
        proto = proto_map[id];
        if (proto === undefined)
            throw new Error('dispatch: unknown Glk function: ' + id);
        func = build_function(proto);
        function_map[id] = func;
    }
    return func;
}

/* The stashed arguments of the call that blocked. If we are not blocked
   on a Glk call, these variables will be null. */
var blocked_selector = null;
var blocked_callargs = null;

var last_event_type = -1; /* Last event type. */

/* Stash the above arguments. We make a copy of the args list, because
   we don't trust the argument to be immutable.
*/
function set_blocked_selector(sel, args) {
    blocked_selector = sel;
    blocked_callargs = args.slice(0);
}
self.set_blocked_selector = set_blocked_selector;

/* Check whether this is a good time for autosave. This is an awkward
   API call, but GiDispa is the easiest place to find this information.

   It's a good time for autosave if (a) we're blocked on glk_select
   (rather than glk_fileref_create_by_prompt or whatever); (b) we did
   not just launch; (c) we just responded to a keyboard or mouse event
   (as opposed to timer, resize, etc).

   If it's not a good time, return null. If it is, we return the VM address
   of the event structure, which the caller needs. (See, I told you it
   was awkward.)
*/
function check_autosave() {
    if (blocked_selector == 0x0C0 && blocked_callargs && blocked_callargs.length > 0) {
        if (last_event_type == 2 || last_event_type == 3 
            || last_event_type == 4 || last_event_type == 8) {
            return blocked_callargs[0];
        }
    }
    return null;
}

/* Prepare the VM to resume after a blocked function. The argument is
   the argument to the original blocked call. Our job is to unload
   that into the VM's memory map.

   We cheat, here, and rely on knowing that only a couple of Glk calls can
   block. (glk_exit can block too, but of course it doesn't resume.)
*/
function prepare_resume(glka0) {
    if (blocked_selector == 0x0C0) {
        // glk_select
        if (blocked_callargs[0] != 0) {
            last_event_type = (glka0.get_field(0) >>> 0);
            self.VM.WriteStructField(blocked_callargs[0], 0, glka0.get_field(0) >>> 0);
            self.VM.WriteStructField(blocked_callargs[0], 1, class_obj_to_id("window", glka0.get_field(1)));
            self.VM.WriteStructField(blocked_callargs[0], 2, glka0.get_field(2) >>> 0);
            self.VM.WriteStructField(blocked_callargs[0], 3, glka0.get_field(3) >>> 0);
        }
    }
    else if (blocked_selector == 0x062) {
        // glk_fileref_create_by_prompt
        self.VM.SetResumeStore(class_obj_to_id("fileref", glka0));
    }
    blocked_selector = null;
    blocked_callargs = null;
}

/* This lists all the array arguments during a Glk call (but not between
   calls). */
var temp_arg_arrays = [];
self.temp_arg_arrays = temp_arg_arrays;

/* List of retained arrays -- those that are being held by long-term
   Glk activities, like line input. Each entry in this list is an
   object { arr:array, addr:VMaddress, len:length, arg:ArgInt/ArgChar }.

   This storage model assumes that no array will be retained twice
   at the same time. I think this is safe.
*/
var retained_arrays = [];
self.retained_arrays = retained_arrays;

/* Create an argument array descriptor. The address and length are where it
   will go in VM memory. The arg is an ArgInt or ArgChar object, describing the
   array entries.

   These descriptors are temporary -- they only exist for the duration
   of a Glk call -- unless the call *retains* the array. Then it's
   kept around until another call unretains it.
*/
function make_arg_array(arr, addr, len, arg) {
    var obj;
    if (!arr)
        return;
    obj = { arr:arr, addr:addr, len:len, arg:arg };
    temp_arg_arrays.push(obj);
}
self.make_arg_array = make_arg_array;

/* Retain one array. This must have been passed to make_arg_array(),
   earlier in this Glk call.

   If invoked by the autorestore system, there is no previous 
   make_arg_array() call. Instead, the necessary information is provided
   in useobj. (The array must match.) The useobj argument should *only*
   be used by autorestore.
*/
function retain_array(arr, useobj) {
    var ix, obj;
    if (!arr)
        return;

    if (useobj !== undefined) {
        if (arr !== useobj.arr)
            throw new Error('retain_array: array does not match useobj');
        obj = { 
            addr:useobj.addr, len:useobj.len,
            arr:arr,
            arg:arg_deserialize(useobj.arg)
        }
        if (obj.len != arr.length)
            throw new Error('retain_array: array length from useobj does not match');
    }
    else {
        obj = undefined;
        for (ix=0; ix<temp_arg_arrays.length; ix++) {
            if (temp_arg_arrays[ix].arr === arr) {
                obj = temp_arg_arrays[ix];
                break;
            }
        }
    }

    if (obj === undefined)
        throw new Error('retain_array: array is not an argument');

    for (ix=0; !(retained_arrays[ix] === undefined); ix++) { };
    retained_arrays[ix] = obj;
}

/* Return information about one retained array. This is used *only*
   by the autosave/autorestore system.
*/
function get_retained_array(arr) {
    var ix;

    for (ix=0; ix<retained_arrays.length; ix++) {
        if (retained_arrays[ix] === undefined)
            continue;
        if (retained_arrays[ix].arr === arr) {
            return retained_arrays[ix];
        }
    }

    return null;
}

/* Unretain one array; write its contents back into memory. (We take for
   granted that a retained array is always pass-out.)
*/
function unretain_array(arr) {
    var ix, jx, obj;
    if (!arr)
        return;

    obj = undefined;
    for (ix=0; ix<retained_arrays.length; ix++) {
        if (retained_arrays[ix] === undefined)
            continue;
        if (retained_arrays[ix].arr === arr) {
            obj = retained_arrays[ix];
            delete retained_arrays[ix];
            break;
        }
    }

    if (obj === undefined)
        throw new Error('unretain_array: array was never retained');

    if (obj.arg instanceof ArgInt) {
        for (ix=0, jx=obj.addr; ix<obj.len; ix++, jx+=4) {
            self.VM.WriteWord(jx, obj.arr[ix] >>> 0);
        }
    }
    else if (obj.arg instanceof ArgChar) {
        if (!obj.arg.signed) {
            for (ix=0, jx=obj.addr; ix<obj.len; ix++, jx++) {
                self.VM.WriteByte(jx, obj.arr[ix] & 0xFF);
            }
        }
        else {
            for (ix=0, jx=obj.addr; ix<obj.len; ix++, jx++) {
                self.VM.WriteByte(jx, uncast_signed_char(obj.arr[ix]));
            }
        }
    }
    else {
        throw new Error('unretain_array: unsupported refarg type');
    }
}

/* Table of tables of registered Glk objects. class_map['window'] is the
   table of windows, and so on.
*/
var class_map = {};
/* Source of numeric ids that are used to identify Glk objects. */
var last_used_id;

/* Note a newly-created Glk object. The clas argument must be one of
   the type name strings: "window", "stream", etc. 

   This is called by the Glk library. The object's disprock field is
   set to a 32-bit number.

   If usedisprock is set, we use that value instead of picking a new one.
   (And bump last_used_id so that it won't collide with it in the future.)
   This is *only* used by the autorestore feature. In this case, the
   obj's disprock must already be set to the provided value.
*/
function class_register(clas, obj, usedisprock) {
    if (usedisprock === undefined) {
        /* Normal case */
        if (obj.disprock)
            throw new Error('class_register: object is already registered');
        obj.disprock = last_used_id;
        last_used_id++;
    }
    else {
        /* Autorestore case */
        if (obj.disprock != usedisprock)
            throw new Error('class_register: object is not already registered');
        if (last_used_id <= usedisprock)
            last_used_id = usedisprock + 1;
    }

    class_map[clas][obj.disprock] = obj;
}

/* Note a just-destroyed Glk object.
*/
function class_unregister(clas, obj) {
    if (!obj.disprock || class_map[clas][obj.disprock] === undefined)
        throw new Error('class_unregister: object is not registered');
    
    delete class_map[clas][obj.disprock];
    obj.disprock = undefined;
}

/* This is called as soon as the GiDispa module is loaded. It sets up some
   internal tables. This does not rely on any other module.
*/
function init_module() {
    var ix, key;

    last_used_id = 1 + Math.round(Math.random() * 1000);

    for (ix in class_defs) {
        key = class_defs[ix];
        class_map[key] = {};
    }
};

init_module();

/* End of GiDispa namespace function. Return the object which will
   become the GiDispa global. */
return {
    set_vm: set_vm,
    get_function: get_function,
    prepare_resume: prepare_resume,
    check_autosave: check_autosave,
    class_register: class_register,
    class_unregister: class_unregister,
    class_obj_to_id: class_obj_to_id,
    class_obj_from_id: class_obj_from_id,
    retain_array: retain_array,
    unretain_array: unretain_array,
    get_retained_array: get_retained_array
};

}();

/* End of GiDispa library. */


/***/ }),

/***/ "./src/quixe/gi_load.js":
/*!******************************!*\
  !*** ./src/quixe/gi_load.js ***!
  \******************************/
/***/ (() => {

/* GiLoad -- a game-file loader for Quixe
 * Designed by Andrew Plotkin <erkyrath@eblong.com>
 * <http://eblong.com/zarf/glulx/quixe/>
 *
 * 
 * This Javascript library is copyright 2010-2016 by Andrew Plotkin.
 * It is distributed under the MIT license; see the "LICENSE" file.
 *
 * This library loads a game image (by one of several possible methods)
 * and then starts up the display layer and game engine. It also extracts
 * data from a Blorb image, if that's what's provided. It is distributed
 * as part of the Quixe engine, but can also be used by IFVMS. Thus it is
 * equipped to handle both Glulx and Z-code games (naked or Blorbed).
 *
 * (This code makes use of the jQuery library, which therefore must be
 * available.)
 *
 * When you are putting together a Quixe installation page, you call
 * GiLoad.load_run() to get the game started. You should do this in the
 * document's "onload" handler, or later. (If you call it before "onload" 
 * time, it may not work.)
 *
 * You can do this in a couple of different ways:
 *
 * GiLoad.load_run(OPTIONS) -- load and run the game using the options
 *   passed as the argument. If OPTIONS is null or not provided, the
 *   global "game_options" object is considered. (The various options are
 *   described below.) This invocation assumes Glulx format.
 *
 * GiLoad.load_run(OPTIONS, IMAGE, IMAGEOPTIONS) -- run the game with the
 *   given options. The IMAGE argument, if not null, should be the game
 *   file itself (a glulx, zcode, or blorb file). The IMAGEOPTIONS describe
 *   how the game file is encoded. It should contain:
 *
 *   IMAGEOPTIONS.format: Describes how the game file is encoded:
 *     "base64": a base64-encoded binary file
 *     "raw": a binary file stored in a string
 *     "array": an array of (numeric) byte values
 *
 *   If the third argument is a string rather than an object, it is taken
 *   to be IMAGEOPTIONS.format.
 *
 *   If OPTIONS is null, the global "game_options" object is considered.
 *
 * These are the game options. Most have default values, so you only have
 * to declare the ones you want to change.
 *
 *   use_query_story: If this is true, you (or the player) can use a
 *     "?story=..." URL parameter to load any game file. If it is false,
 *     this parameter is ignored. (default: true)
 *   set_page_title: If true, the loader will change the document title
 *     to describe the game being loaded. If false, the document title
 *     will be left alone. (default: true)
 *   default_page_title: A default label for the game, if none could be
 *     extracted from the metadata or URL. (default: "Game")
 *   engine_name: Label used in the page title along with default_page_title.
 *     (default: "Quixe" or "IFVMS")
 *   default_story: The URL of the game file to load, if not otherwise
 *     provided.
 *   proxy_url: The URL of the web-app service which is used to convert
 *     binary data to Javascript, if the browser needs that. (default:
 *     https://zcode.appspot.com/proxy/)
 *   image_info_map: An object which describes all the available
 *     images, if they are provided as static URL data. (If this is not
 *     provided, we rely on Blorb resources.) This can be an object
 *     or a string; in the latter case, we look up a global object with
 *     that name.
 *   exit_warning: A message to display (in a blue warning pane) when
 *     the game exits. If empty or null, no message is displayed.
 *     (default: "The game session has ended.")
 *   do_vm_autosave: If set, the VM will check for a snapshot when
 *     launching, and load it if present. The VM will also save a snapshot
 *     after every move. (default: false)
 *   clear_vm_autosave: If set, the VM will clear any snapshot at launch
 *     (so will not load one even if do_vm_autosave is set). (default:
 *     false)
 *   game_format_name: Label used in loading error messages. (default:
 *     "Glulx" for Quixe, "" otherwise)
 *   blorb_gamechunk_type: Chunk type to extract from a Blorb file.
 *     (default: "GLUL" for Quixe, null otherwise)
 *   vm: The game engine interface object. (default: Quixe)
 *   io: The display layer interface object. (default: Glk)
 *   
 *   You can also include any of the display options used by the GlkOte
 *   library, such as gameport, windowport, spacing, ...
 *   And also the interpreter options used by the Quixe library, such as
 *   rethrow_exceptions, ...
 *
 *   For backwards compatibility, if options.vm is omitted or is the
 *   windows.Quixe object, then several other options (engine_name,
 *   blorb_gamechunk_type, game_format_name) are set up with values
 *   appropriate for Glulx game files.
 *
 * GiLoad.find_data_chunk(NUM) -- this finds the Data chunk of the
 *   given number from the Blorb file. The returned object looks like
 *   { data:[...], type:"..." } (where the type is TEXT or BINA).
 *   If there was no such chunk, or if the game was loaded from a non-
 *   Blorb file, this returns undefined.
 *
 * GiLoad.get_metadata(FIELD) -- this returns a metadata field (a
 *   string) from the iFiction <bibliographic> section. If there is
 *   no such field, or if the game was loaded from a non-Blorb
 *   file, this returns undefined.
 *
 * GiLoad.get_image_info(NUM) -- returns an object describing an image,
 *   or undefined.
 *
 * GiLoad.get_debug_info() -- returns an array containing debug info,
 *   or null.
 *
 * GiLoad.get_image_url(NUM) -- returns a URL describing an image, or
 *   undefined.
 */

/* Put everything inside the GiLoad namespace. */
GiLoad = function() {

/* Start with the defaults. These can be modified later by the game_options
   defined in the HTML file.

   Note that the "vm" and "io" entries are not filled in here, because
   we don't know whether the Quixe or Glk libraries were loaded before
   this one. We'll fill them in at load_run() time.
*/
var all_options = {
    vm: null,              // default game engine (Quixe)
    io: null,              // default display layer (Glk)
    spacing: 4,            // default spacing between windows
    use_query_story: true, // use the ?story= URL parameter (if provided)
    default_story: null,   // story URL to use if not otherwise set
    set_page_title: true,  // set the window title to the game name
    default_page_title: 'Game', // fallback game name to use for title
    game_format_name: '',  // used in error messages
    exit_warning: 'The game session has ended.',
    image_info_map: null,  // look for images in Blorb data
    proxy_url: 'https://zcode.appspot.com/proxy/'
};

var gameurl = null;  /* The URL we are loading. */
var metadata = {}; /* Title, author, etc -- loaded from Blorb */
var debug_info = null; /* gameinfo.dbg file -- loaded from Blorb */
var blorbchunks = {}; /* Indexed by "USE:NUMBER" -- loaded from Blorb */
var alttexts = {}; /* Indexed by "USE:NUMBER" -- loaded from Blorb */

/* Begin the loading process. This is what you call to start a game;
   it takes care of starting the Glk and Quixe modules, when the game
   file is available.
*/
function load_run(optobj, image, imageoptions) {

    /* There are a couple of different calling conventions that we have
       to distinguish here. */

    if (!imageoptions) {
        // None provided. (There should be no image argument either.)
        imageoptions = {};
    }
    else if (typeof(imageoptions) == 'string') {
        // An image_format string. (Old calling format.)
        imageoptions = { format:imageoptions };
    }
    else {
        // A map of image options, including image_format.
    }

    /* Now look at the provided arguments. */

    var image_format = imageoptions.format;
    if (!image_format)
        image_format = 'array';

    /* Set the default entries for the interface objects that come from
       other libraries. (If no such libraries have been loaded, then
       these do nothing, but game_options can still supply these entries.)
    */
    all_options.io = window.Glk;
    all_options.vm = window.Quixe;

    /* The game_options object could be provided via an argument. If not,
       we use the global game_options. */
    if (!optobj)
        optobj = window.game_options;

    if (optobj && window.Quixe
        && ((!optobj.vm) || optobj.vm === window.Quixe)) {
        /* If we are going to wind up with the Quixe engine -- either from
           game_options or as a default -- we throw in some more defaults. */
        all_options.engine_name = 'Quixe';
        all_options.blorb_gamechunk_type = 'GLUL';
        all_options.game_format_name = 'Glulx';
    }

    /* Pull in the values from the game_options, which override the defaults
       set above. */
    if (optobj)
        jQuery.extend(all_options, optobj);

    /* If the image_info_map is a string, look for a global object of
       that name. If there isn't one, delete that option. (The 
       image_info_map could also be an object already, in which case
       we leave it as is.) */
    if (all_options.image_info_map != undefined) {
        if (jQuery.type(all_options.image_info_map) === 'string') {
            if (window[all_options.image_info_map])
                all_options.image_info_map = window[all_options.image_info_map];
            else
                delete all_options.image_info_map;
        }
    }

    /* The first question is, what's the game file URL? */

    gameurl = null;

    if (all_options.use_query_story) {
        /* Use ?story= URL parameter, if present and accepted. */
        var qparams = get_query_params();
        gameurl = qparams['story'];
    }

    if (!gameurl && image) {
        /* The story data is already loaded -- it's not an a URL at all. 
           Decode it, and then fire it off. */
        GlkOte.log('GiLoad: trying pre-loaded load (' + image_format + ')...');
        switch (image_format) {
        case 'base64':
            image = decode_base64(image);
            break;
        case 'raw':
            image = decode_text(image);
            break;
        case 'array':
            /* Leave image alone */
            break;
        default:
            all_options.io.fatal_error("Could not decode story file data: " + image_format);
            return;
        }

        start_game(image);
        return;
    }

    if (!gameurl) {
        /* Go with the "default_story" option parameter, if present. */
        gameurl = all_options.default_story;
    }

    if (!gameurl) {
        all_options.io.fatal_error("No story file specified!");
        return;
    }

    //GlkOte.log('GiLoad: gameurl: ' + gameurl);
    /* The gameurl is now known. (It should not change after this point.)
       The next question is, how do we load it in? */

    /* If an image file was passed in, we didn't use it. So we might as
       well free its memory at this point. */
    image = null;

    /* The logic of the following code is adapted from Parchment's
       file.js. It's probably obsolete at this point -- I suspect
       that binary_supported and crossorigin_supported will wind up
       true in all modern browsers. Why throw away code, though... */

    var xhr = new XMLHttpRequest(); /* ### not right on IE? */
    var binary_supported = (xhr.overrideMimeType !== undefined);
    /* I'm told that Opera's overrideMimeType() doesn't work, but
       I'm not inclined to worry about it these days. */
    var crossorigin_supported = (xhr.withCredentials !== undefined);
    xhr = null;

    var regex_urldomain = /^(file:|(\w+:)?\/\/[^\/?#]+)/;
    var page_domain = regex_urldomain.exec(location)[0];
    var data_exec = regex_urldomain.exec(gameurl);
    var is_relative = data_exec ? false : true;
    var data_domain = data_exec ? data_exec[0] : page_domain;

    var same_origin = (page_domain == data_domain);
    if (navigator.userAgent.match(/chrome/i) && data_domain == 'file:') {
        /* Chrome enforces a stricter same-origin policy for file: URLs --
           it doesn't want to trawl your hard drive for random files.
           Other browsers may pick this up someday, but for now, it's
           only Chrome. */
        same_origin = false;
    }

    /* Crude test for whether the URL is a Javascript file -- just
       check for a ".js" suffix. */
    var old_js_url = gameurl.match(/[.]js$/i);

    GlkOte.log('GiLoad: is_relative=' + is_relative + ', same_origin=' + same_origin + ', binary_supported=' + binary_supported + ', crossorigin_supported=' + crossorigin_supported);

    if (old_js_url && same_origin) {
        /* Old-fashioned Javascript file -- the output of Parchment's
           zcode2js tool. When loaded and eval'ed, this will call
           a global function processBase64Zcode() with base64 data
           as the argument. */
        GlkOte.log('GiLoad: trying old-fashioned load...');
        window.processBase64Zcode = function(val) { 
            start_game(decode_base64(val));
        };
        jQuery.ajax(gameurl, {
                'type': 'GET',
                dataType: 'script',
                cache: true,
                error: function(jqxhr, textstatus, errorthrown) {
                    all_options.io.fatal_error("The story could not be loaded. (" + gameurl + "): Error " + textstatus + ": " + errorthrown);
                }
        });
        return;
    }

    if (old_js_url) {
        /* Javascript file in a different domain. We'll insert it as a <script>
           tag; that will force it to load, and invoke a processBase64Zcode()
           function as above. */
        GlkOte.log('GiLoad: trying script load...');
        window.processBase64Zcode = function(val) { 
            start_game(decode_base64(val));
        };
        var headls = $('head');
        if (!headls.length) {
            all_options.io.fatal_error("This page has no <head> element!");
            return;
        }
        var script = $('<script>', 
            { src:gameurl, 'type':"text/javascript" });
        /* jQuery is now sensitive about this, and will not allow it as
          a Chrome work-around. We use a raw DOM method instead. */
        // headls.append(script);
        headls.get(0).appendChild(script.get(0));
        return;
    }

    if (binary_supported && same_origin) {
        /* We can do an Ajax GET of the binary data. */
        GlkOte.log('GiLoad: trying binary load...');
        jQuery.ajax(gameurl, {
                'type': 'GET',
                    beforeSend: function(jqxhr, settings) {
                    /* This ensures that the data doesn't get decoded or
                       munged in any way. */
                    jqxhr.overrideMimeType('text/plain; charset=x-user-defined');
                },
                success: function(response, textstatus, errorthrown) {
                    start_game(decode_raw_text(response));
                },
                error: function(jqxhr, textstatus, errorthrown) {
                    all_options.io.fatal_error("The story could not be loaded. (" + gameurl + "): Error " + textstatus + ": " + errorthrown);
                }
        });
        return;
    }

    if (data_domain == 'file:') {
        /* All the remaining options go through the proxy. But the proxy
           can't get at the local hard drive, so it's hopeless.
           (This case occurs only on Chrome, with its restrictive
           same-origin-file: policy.) */
        all_options.io.fatal_error("The story could not be loaded. (" + gameurl + "): A local file cannot be sent to the proxy.");
        return;
    }

    /* All the remaining options go through the proxy. But the proxy doesn't
       understand relative URLs, so we absolutize it if necessary. */
    var absgameurl = gameurl;
    if (is_relative) {
        absgameurl = absolutize(gameurl);
        GlkOte.log('GiLoad: absolutize ' + gameurl + ' to ' + absgameurl);
    }

    if (crossorigin_supported) {
        /* Either we can't load binary data, or the data is on a different
           domain. Either way, we'll go through the proxy, which will
           convert it to base64 for us. The proxy gives the right headers
           to make cross-origin Ajax work. */
        GlkOte.log('GiLoad: trying proxy load... (' + all_options.proxy_url + ')');
        jQuery.ajax(all_options.proxy_url, {
                'type': 'GET',
                data: { encode: 'base64', url: absgameurl },
                error: function(jqxhr, textstatus, errorthrown) {
                    /* I would like to display the responseText here, but
                       most servers return a whole HTML page, and that doesn't
                       fit into fatal_error. */
                    all_options.io.fatal_error("The story could not be loaded. (" + gameurl + "): Error " + textstatus + ": " + errorthrown);
                },
                success: function(response, textstatus, errorthrown) {
                    start_game(decode_base64(response));
                }
        });
        return;
    }

    if (true) {
        /* Cross-origin Ajax isn't available. We can still use the proxy,
           but we'll have to insert a <script> tag to do it. */
        var fullurl = all_options.proxy_url + '?encode=base64&callback=processBase64Zcode&url=' + absgameurl;
        GlkOte.log('GiLoad: trying proxy-script load... (' + fullurl + ')');
        window.processBase64Zcode = function(val) { 
            start_game(decode_base64(val));
        };
        var headls = $('head');
        if (!headls.length) {
            all_options.io.fatal_error("This page has no <head> element!");
            return;
        }
        var script = $('<script>', 
            { src:fullurl, 'type':"text/javascript" });
        headls.append(script);
        return;
    }

    all_options.io.fatal_error("The story could not be loaded. (" + gameurl + "): I don't know how to load this data.");
}

/* Take apart the query string of the current URL, and turn it into
   an object map.
   (Adapted from querystring.js by Adam Vandenberg.)
*/
function get_query_params() {
    var map = {};

    var qs = location.search.substring(1, location.search.length);
    if (qs.length) {
        var args = qs.split('&');

        qs = qs.replace(/\+/g, ' ');
        for (var ix = 0; ix < args.length; ix++) {
            var pair = args[ix].split('=');
            var name = decodeURIComponent(pair[0]);
            
            var value = (pair.length==2)
                ? decodeURIComponent(pair[1])
                : name;
            
            map[name] = value;
        }
    }

    return map;
}

/* I learned this terrible trick for turning a relative URL absolute. 
   It's supposed to work on all browsers, if you don't go mad.
   (This uses DOM methods rather than jQuery.)
*/
function absolutize(url) {
    /* I don't know if this is slow (or safe) for data URLs. Might as
       well skip out of the easy cases first, anyhow. */
    if (url.match(/^(file|data|http|https):/i)) {
        return url;
    }

    var div = document.createElement('div');
    div.innerHTML = '<a></a>';
    div.firstChild.href = url;
    div.innerHTML = div.innerHTML;
    return div.firstChild.href;
}

/* Return a metadata field, or undefined if there is no such field
   (or if no metadata was loaded).
*/
function get_metadata(val) {
    return metadata[val];
}

/* Return the gameinfo.dbg file (as an array of bytes), if it was
   loaded.
*/
function get_debug_info() {
    return debug_info;
}

/* Return information describing an image. This might be loaded from static
   data or from a Blorb file.
   
   The return value will be null or an object:
   { image:VAL, type:STRING, alttext:STRING, width:NUMBER, height:NUMBER }

   (The alttext and type may be absent if not supplied.)
*/
function get_image_info(val) {
    if (all_options.image_info_map != undefined) {
        var img = all_options.image_info_map[val];
        if (img)
            return img;
    }

    var chunk = blorbchunks['Pict:'+val];
    if (chunk) {
        var img = { image:val };
        if (chunk.type == 'JPEG')
            img.type = 'jpeg';
        else if (chunk.type == 'PNG ')
            img.type = 'png';
        else
            img.type = '????';

        /* Extract the image size, if we don't have it cached already.
           We could do this by creating an Image DOM element and measuring
           it, but that could be slow. Instead, we'll parse the PNG or
           JPEG data directly. It's easier than it sounds! */
        if (chunk.imagesize === undefined) {
            var imgsize = undefined;
            if (chunk.type == 'JPEG') {
                imgsize = find_dimensions_jpeg(chunk.content);
            }
            else if (chunk.type == 'PNG ') {
                imgsize = find_dimensions_png(chunk.content);
            }
            if (imgsize)
                chunk.imagesize = imgsize;
        }
        if (chunk.imagesize) {
            img.width = chunk.imagesize.width;
            img.height = chunk.imagesize.height;
        }

        /* Extract the alt-text, if available. */
        var rdtext = alttexts['Pict:'+val];
        if (rdtext)
            img.alttext = rdtext;
        return img;
    }

    return undefined;
}

/* Return a URL representing an image. This might be loaded from static
   data or from a Blorb file.

   The return value will be null or a URL. It might be a "data:..." URL.
*/
function get_image_url(val) {
    if (all_options.image_info_map) {
        var img = all_options.image_info_map[val];
        if (img && img.url)
            return absolutize(img.url);
    }

    var chunk = blorbchunks['Pict:'+val];
    if (chunk) {
        if (chunk.dataurl)
            return chunk.dataurl;

        var info = get_image_info(val);
        if (info && chunk.content) {
            var mimetype = 'application/octet-stream';
            if (chunk.type == 'JPEG')
                mimetype = 'image/jpeg';
            else if (chunk.type == 'PNG ')
                mimetype = 'image/png';
            var b64dat = encode_base64(chunk.content);
            chunk.dataurl = 'data:'+mimetype+';base64,'+b64dat;
            return chunk.dataurl;
        }
    }

    return undefined;
}

/* Return the Data chunk with the given number, or undefined if there
   is no such chunk. (This is used by the glk_stream_open_resource()
   functions.)
*/
function find_data_chunk(val) {
    var chunk = blorbchunks['Data:'+val];
    if (!chunk)
        return null;

    var returntype = chunk.type;
    if (returntype == 'FORM')
        returntype = 'BINA';

    return { data:chunk.content, type:returntype };
}

/* Look through a Blorb file (provided as a byte array) and return the
   game file chunk (ditto). If no such chunk is found, returns null.
   The gamechunktype argument should be 'ZCOD' or 'GLUL'.

   This also loads the IFID metadata into the metadata object, and
   caches DATA chunks where we can reach them later.
*/
function unpack_blorb(image, gamechunktype) {
    var len = image.length;
    var ix;
    var rindex = [];
    var result = null;
    var pos = 12;

    while (pos < len) {
        var chunktype = String.fromCharCode(image[pos+0], image[pos+1], image[pos+2], image[pos+3]);
        pos += 4;
        var chunklen = (image[pos+0] << 24) | (image[pos+1] << 16) | (image[pos+2] << 8) | (image[pos+3]);
        pos += 4;

        if (chunktype == "RIdx") {
            var npos = pos;
            var numchunks = (image[npos+0] << 24) | (image[npos+1] << 16) | (image[npos+2] << 8) | (image[npos+3]);
            npos += 4;
            for (ix=0; ix<numchunks; ix++) {
                var chunkusage = String.fromCharCode(image[npos+0], image[npos+1], image[npos+2], image[npos+3]);
                npos += 4;
                var chunknum = (image[npos+0] << 24) | (image[npos+1] << 16) | (image[npos+2] << 8) | (image[npos+3]);
                npos += 4;
                var chunkpos = (image[npos+0] << 24) | (image[npos+1] << 16) | (image[npos+2] << 8) | (image[npos+3]);
                npos += 4;
                rindex.push( { usage:chunkusage, num:chunknum, pos:chunkpos } );
            }
        }
        if (chunktype == "IFmd") {
            var arr = image.slice(pos, pos+chunklen);
            var dat = encode_utf8_text(arr);
            var met = $('<metadata>').html(dat);
            var bibels = met.find('bibliographic').children();
            if (bibels.length) {
                var el;
                for (ix=0; ix<bibels.length; ix++) {
                    el = bibels[ix];
                    metadata[el.tagName.toLowerCase()] = el.textContent;
                }
            }
        }
        if (chunktype == "Dbug") {
            /* Because this is enormous, we only save it if the option
               is set to use it. */
            if (all_options.debug_info_chunk) {
                var arr = image.slice(pos, pos+chunklen);
                debug_info = arr;
            }
        }
        if (chunktype == "RDes") {
            var npos = pos;
            var numentries = (image[npos+0] << 24) | (image[npos+1] << 16) | (image[npos+2] << 8) | (image[npos+3]);
            npos += 4;
            for (ix=0; ix<numentries; ix++) {
                var rdusage = String.fromCharCode.apply(this, image.slice(npos, npos+4));
                npos += 4;
                var rdnumber = (image[npos+0] << 24) | (image[npos+1] << 16) | (image[npos+2] << 8) | (image[npos+3]);
                npos += 4;
                var rdlen = (image[npos+0] << 24) | (image[npos+1] << 16) | (image[npos+2] << 8) | (image[npos+3]);
                npos += 4;
                var rdtext = encode_utf8_text(image.slice(npos, npos+rdlen));
                npos += rdlen;
                alttexts[rdusage+':'+rdnumber] = rdtext;
            }
        }

        pos += chunklen;
        if (pos & 1)
            pos++;
    }

    /* We don't want to retain the original Blorb image in memory; it's
       enormous. We'll split out the addressable chunks (those with
       usages) and retain those individually. Still enormous, but less
       so.

       (It's probably a waste to save the cover image -- that probably
       won't ever be used by the game. But it might be.) 
    */

    for (ix=0; ix<rindex.length; ix++) {
        var el = rindex[ix];
        pos = el.pos;
        var chunktype = String.fromCharCode(image[pos+0], image[pos+1], image[pos+2], image[pos+3]);
        pos += 4;
        var chunklen = (image[pos+0] << 24) | (image[pos+1] << 16) | (image[pos+2] << 8) | (image[pos+3]);
        pos += 4;

        el.type = chunktype;
        el.len = chunklen;
        el.content = null;

        if (el.usage == "Exec" && el.num == 0 && chunktype == gamechunktype) {
            result = image.slice(pos, pos+chunklen);
        }
        else {
            if (chunktype == "FORM") {
                el.content = image.slice(pos-8, pos+chunklen);
            }
            else {
                el.content = image.slice(pos, pos+chunklen);
            }
            blorbchunks[el.usage+':'+el.num] = el;
        }
    }

    return result;
}

/* In the following functions, "decode" means turning native string data
   into an array of numbers; "encode" is the other direction. That's weird,
   I know. It's because an array of byte values is the natural data format
   of Glulx code.
*/

/* Convert a byte string into an array of numeric byte values. */
function decode_raw_text(str) {
    var arr = Array(str.length);
    var ix;
    for (ix=0; ix<str.length; ix++) {
        arr[ix] = str.charCodeAt(ix) & 0xFF;
    }
    return arr;
}

/* Convert an array of numeric byte values (containing UTF-8 encoded text)
   into a string.
*/
function encode_utf8_text(arr) {
    var res = [];
    var ch;
    var pos = 0;

    while (pos < arr.length) {
        var val0, val1, val2, val3;
        if (pos >= arr.length)
            break;
        val0 = arr[pos];
        pos++;
        if (val0 < 0x80) {
            ch = val0;
        }
        else {
            if (pos >= arr.length)
                break;
            val1 = arr[pos];
            pos++;
            if ((val1 & 0xC0) != 0x80)
                break;
            if ((val0 & 0xE0) == 0xC0) {
                ch = (val0 & 0x1F) << 6;
                ch |= (val1 & 0x3F);
            }
            else {
                if (pos >= arr.length)
                    break;
                val2 = arr[pos];
                pos++;
                if ((val2 & 0xC0) != 0x80)
                    break;
                if ((val0 & 0xF0) == 0xE0) {
                    ch = (((val0 & 0xF)<<12)  & 0x0000F000);
                    ch |= (((val1 & 0x3F)<<6) & 0x00000FC0);
                    ch |= (((val2 & 0x3F))    & 0x0000003F);
                }
                else if ((val0 & 0xF0) == 0xF0) {
                    if (pos >= arr.length)
                        break;
                    val3 = arr[pos];
                    pos++;
                    if ((val3 & 0xC0) != 0x80)
                        break;
                    ch = (((val0 & 0x7)<<18)   & 0x1C0000);
                    ch |= (((val1 & 0x3F)<<12) & 0x03F000);
                    ch |= (((val2 & 0x3F)<<6)  & 0x000FC0);
                    ch |= (((val3 & 0x3F))     & 0x00003F);
                }
                else {
                    break;
                }
            }
        }
        res.push(ch);
    }

    return String.fromCharCode.apply(this, res);
}

/* Convert a base64 string into an array of numeric byte values. Some
   browsers supply an atob() function that does this; on others, we
   have to implement decode_base64() ourselves. 
*/
if (window.atob) {
    decode_base64 = function(base64data) {
        var data = atob(base64data);
        var image = Array(data.length);
        var ix;
        
        for (ix=0; ix<data.length; ix++)
            image[ix] = data.charCodeAt(ix);
        
        return image;
    }
}
else {
    /* No atob() in Internet Explorer, so we have to invent our own.
       This implementation is adapted from Parchment. */
    var b64decoder = (function() {
            var b64encoder = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var out = [];
            var ix;
            for (ix=0; ix<b64encoder.length; ix++)
                out[b64encoder.charAt(ix)] = ix;
            return out;
        })();
        
    decode_base64 = function(base64data) {
        var out = [];
        var c1, c2, c3, e1, e2, e3, e4;
        var i = 0, len = base64data.length;
        while (i < len) {
            e1 = b64decoder[base64data.charAt(i++)];
            e2 = b64decoder[base64data.charAt(i++)];
            e3 = b64decoder[base64data.charAt(i++)];
            e4 = b64decoder[base64data.charAt(i++)];
            c1 = (e1 << 2) + (e2 >> 4);
            c2 = ((e2 & 15) << 4) + (e3 >> 2);
            c3 = ((e3 & 3) << 6) + e4;
            out.push(c1, c2, c3);
        }
        if (e4 == 64)
            out.pop();
        if (e3 == 64)
            out.pop();
        return out;
    }
}

var encode_base64;
var decode_base64;

/* Convert an array of numeric byte values into a base64 string. (Converse
   of the above.)
*/
if (window.btoa) {
    encode_base64 = function(image) {
        /* There's a limit on how much can be piped into .apply() at a 
           time -- that is, JS interpreters choke on too many arguments
           in a function call. 16k is a conservative limit. */
        var blocks = [];
        var imglen = image.length;
        for (var ix = 0; ix < imglen; ix += 16384) {
            blocks.push(String.fromCharCode.apply(String, image.slice(ix, ix + 16384)));
        }

        return btoa(blocks.join(''));
    };
}
else {
    encode_base64 = function(arr) {
        var coder = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var res = [];
        var byte0, byte1, byte2;
        for (var ix=0; ix<arr.length; ix += 3) {
            byte0 = arr[ix];
            byte1 = arr[ix+1];
            byte2 = arr[ix+2];
            res.push(coder.charAt((byte0 >> 2) & 0x3F));
            res.push(coder.charAt(((byte0 << 4) & 0x30) | ((byte1 >> 4) & 0x0F)));
            res.push(coder.charAt(((byte1 << 2) & 0x3C) | ((byte2 >> 6) & 0x03)));
            res.push(coder.charAt((byte2) & 0x3F));
        }
        if (byte1 === undefined && res.length >= 2) {
            res[res.length-2] = '=';
        }
        if (byte2 === undefined && res.length >= 1) {
            res[res.length-1] = '=';
        }
        return res.join('');
    }
}

/* Given a PNG file, extract its dimensions. Return a {width,height}
   object, or undefined on error. 
*/
function find_dimensions_png(arr) {
    var pos = 0;
    if (arr[0] != 0x89 || String.fromCharCode.apply(this, arr.slice(1,4)) != 'PNG') {
        GlkOte.log('find_dimensions_png: PNG signature does not match');
        return undefined;
    }
    pos += 8;
    while (pos < arr.length) {
        var chunklen = (arr[pos+0] << 24) | (arr[pos+1] << 16) | (arr[pos+2] << 8) | (arr[pos+3]);
        pos += 4;
        var chunktype = String.fromCharCode.apply(this, arr.slice(pos,pos+4));
        pos += 4;
        if (chunktype == 'IHDR') {
            var res = {};
            res.width  = (arr[pos+0] << 24) | (arr[pos+1] << 16) | (arr[pos+2] << 8) | (arr[pos+3]);
            pos += 4;
            res.height = (arr[pos+0] << 24) | (arr[pos+1] << 16) | (arr[pos+2] << 8) | (arr[pos+3]);
            pos += 4;
            return res;
        }
        pos += chunklen;
        pos += 4; /* skip CRC */
    }

    GlkOte.log('find_dimensions_png: no PNG header block found');
    return undefined;
}

/* Given a JPEG file, extract its dimensions. Return a {width,height}
   object, or undefined on error. 
*/
function find_dimensions_jpeg(arr) {
    var pos = 0;
    while (pos < arr.length) {
        if (arr[pos] != 0xFF) {
            GlkOte.log('find_dimensions_jpeg: marker is not 0xFF');
            return undefined;
        }
        while (arr[pos] == 0xFF) 
            pos += 1;
        var marker = arr[pos];
        pos += 1;
        if (marker == 0x01 || (marker >= 0xD0 && marker <= 0xD9)) {
            /* marker type has no data */
            continue;
        }
        var chunklen = (arr[pos+0] << 8) | (arr[pos+1]);
        if (marker >= 0xC0 && marker <= 0xCF && marker != 0xC8) {
            if (chunklen < 7) {
                GlkOte.log('find_dimensions_jpeg: SOF block is too small');
                return undefined;
            }
            var res = {};
            res.height = (arr[pos+3] << 8) | (arr[pos+4]);
            res.width  = (arr[pos+5] << 8) | (arr[pos+6]);
            return res;
        }
        pos += chunklen;
    }

    GlkOte.log('find_dimensions_jpeg: no SOF marker found');
    return undefined;
}

/* Start the game (after de-blorbing, if necessary).
   This is invoked by whatever callback received the loaded game file.
*/
function start_game(image) {
    if (image.length == 0) {
        all_options.io.fatal_error("No game file was loaded. (Zero-length response.)");
        return;
    }

    if (image[0] == 0x46 && image[1] == 0x4F && image[2] == 0x52 && image[3] == 0x4D) {
        var formtype = String.fromCharCode(image[8], image[9], image[10], image[11]);

        if (formtype == 'IFZS') {
            all_options.io.fatal_error("This is a saved-game file, not a "+all_options.game_format_name+" game file. You must launch the game first, then restore your save.");
            return;
        }

        if (formtype != 'IFRS') {
            all_options.io.fatal_error("This IFF file is not a Blorb file!");
            return;
        }

        if (all_options.blorb_gamechunk_type) {
            try {
                image = unpack_blorb(image, all_options.blorb_gamechunk_type);
            }
            catch (ex) {
                all_options.io.fatal_error("Blorb file could not be parsed: " + ex);
                return;
            }
        }
        if (!image) {
            all_options.io.fatal_error("Blorb file contains no "+all_options.game_format_name+" game!");
            return;
        }
    }

    {
        var title = null;
        if (metadata)
            title = metadata.title;
        if (!title && gameurl) 
            title = gameurl.slice(gameurl.lastIndexOf("/") + 1);
        if (!title)
            title = all_options.default_page_title;
        if (!title)
            title = 'Game';

        if (!all_options.recording_label)
            all_options.recording_label = title;

        if (all_options.set_page_title)
            document.title = title + " - " + all_options.engine_name;
    }

    /* Pass the game image file along to the VM engine. */
    all_options.vm.prepare(image, all_options);

    /* Now fire up the display library. This will take care of starting
       the VM engine, once the window is properly set up. */
    all_options.io.init(all_options);
}

/* End of GiLoad namespace function. Return the object which will
   become the GiLoad global. */
return {
    load_run: load_run,
    find_data_chunk: find_data_chunk,
    get_metadata: get_metadata,
    get_debug_info: get_debug_info,
    get_image_info: get_image_info,
    get_image_url: get_image_url
};

}();

/* End of GiLoad library. */


/***/ }),

/***/ "./src/quixe/quixe.js":
/*!****************************!*\
  !*** ./src/quixe/quixe.js ***!
  \****************************/
/***/ (() => {

/* Quixe -- a Glulx VM interpreter written in Javascript
 * Designed by Andrew Plotkin <erkyrath@eblong.com>
 * <http://eblong.com/zarf/glulx/quixe/>
 * 
 * This Javascript library is copyright 2010-2016 by Andrew Plotkin.
 * It is distributed under the MIT license; see the "LICENSE" file.
 *
 * For documentation, see the README.txt or the web page noted above.
 * For information on getting Quixe installed on a web page, see the
 * comments in the gi_load.js file.
 *
 * This library makes use of jQuery utility functions (but it does not
 * manipulate DOM). It has been tested with jQuery 1.11.2 (included),
 * but should work equally well with jQuery 2.
 *
 *
 * Some interpreter behaviors can be customized by adding attributes to
 * the game_options object. (See gi_load.js for more about this object.)
 * Quixe currently understands two debugging options:
 *
 *   rethrow_exceptions: If true, any fatal VM errors encountered during
 *     play will be allowed to bubble up to the browser. If you're using
 *     a browser debugging facility, this may give you more information
 *     than the usual red "fatal-error" banner.
 *
 *   debug_info_chunk: If true, Quixe loads a "Dbug" chunk from the
 *     blorb file. The chunk should contain the gameinfo.dbg data
 *     generated by the Inform compiler when the game was compiled.
 *
 * The point of the debug_info_chunk option is that if a fatal error
 * occurs, the browser's debug console will show the I6 stack dump at
 * the point of the error; and this dump will contain both the name and
 * address of every I6 function on the stack.
 *
 * To set this up, you need to use the blorbtool.py script to add the
 * gameinfo.dbg file to the compiled blorb:
 *
 *   blorbtool.py test.gblorb import Dbug gameinfo.dbg
 *
 * Then add "debug_info_chunk: true" to the game_options object.
 */

// ### Optimizations I have not yet tried:
// Using JS array types. This didn't prove to be a speedup a few years
//   ago, but maybe engines have improved. The raw Blorb loading delay
//   might also benefit from this.
// Change memory to an array of 4-byte values. Inline Mem4 and Mem4W when
//   address is known to be aligned.
// Inline Mem1 wherever possible.
// Compile "@mul 2 x" amd "@mul x 2" as a bit-shift (similarly other
//   power-of-2 constants).
// Is "x instanceof Function" efficient? Should compile_string return a 
//   tiny tagged object instead?
// Probably don't want to cache string-functions in filter mode.
// If a compiled path has no iosys dependencies, we could cache it in
//   all three iosys caches for the function.
// Also: put in debug asserts for valid stack values (at push/pop)
//   (check isFinite and non-negative)
// Should we be caching arrays instead of strings?

/* Put everything inside the Quixe namespace. */

Quixe = function() {

/* Create the "self" object. (No relation to the Inform "self" global.) */
var self = {};

/* This is called by the page (or the page's loader library) when it
   starts up. It must be called before quixe_init().

   The first argument is the game file image, encoded as an array of byte
   values (integers between 0 and 255). It is stashed away for when
   the game is started up.

   The (optional) second object supplies execution options.

   This also computes the game signature, which is a 64-character string
   unique to the game. (In fact it is just the first 64 bytes of the
   game file, encoded as hexadecimal digits.)
*/
function quixe_prepare(image, all_options) {
    game_image = image;

    var ls = game_image.slice(0, 64);
    var ix, val;
    for (ix=0; ix<ls.length; ix++) {
        val = ls[ix].toString(16);
        if (val.length < 2)
            val = "0" + val;
        ls[ix] = val;
    }
    game_signature = ls.join('');

    if (all_options) {
        opt_rethrow_exceptions = all_options.rethrow_exceptions;
        opt_do_vm_autosave = all_options.do_vm_autosave;
        opt_clear_vm_autosave = all_options.clear_vm_autosave;
    }

    if (all_options && all_options.debug_info_chunk) {
        parse_inform_debug_data();
    }
}

/* This is called by the page (or the page's display library) when it
   starts up. It executes until the first glk_select() or glk_exit().

   (It's inelegant to call this "init" when the "prepare" function must
   be called first. Sorry about that.)
*/
function quixe_init() {
    if (self.vm_started) {
        Glk.fatal_error("Quixe was inited twice!");
        return;
    }

    try {
        setup_bytestring_table();
        setup_operandlist_table();

        setup_vm();
        execute_loop();
    }
    catch (ex) {
        if (ex.stack)
            qlog('JS stack dump:\n' + ex.stack);
        qstackdump();
        Glk.fatal_error("Quixe init: " + show_exception(ex));
        if (opt_rethrow_exceptions)
            throw ex;
    }
}

/* This is called by the page after a "blocking" operation completes.
   (That is, a user event has triggered the completion of glk_select()
   or glk_fileref_create_by_prompt().)
   It executes until the next glk_select() or glk_exit().

   The argument is only defined when resuming from an operation that
   returns a value -- i.e. glk_fileref_create_by_prompt(). But we ignore
   it anyhow, because that return value was handled by GiDispa. (See
   SetResumeStore() below.)
*/
function quixe_resume(argument) {
    try {
        self.done_executing = self.vm_stopped;
        execute_loop();
    }
    catch (ex) {
        if (ex.stack)
            qlog('JS stack dump:\n' + ex.stack);
        qstackdump();
        Glk.fatal_error("Quixe run: " + show_exception(ex));
        if (opt_rethrow_exceptions)
            throw ex;
    }
}

/* Exception objects are hard to display in Javascript. This is a rough
   attempt.
*/
function show_exception(ex) {
    if (typeof(ex) == 'string')
        return ex;
    var res = ex.toString();
    if (ex.message)
        res = res + ' ' + ex.message;
    if (ex.fileName)
        res = res + ' ' + ex.fileName;
    if (ex.lineNumber)
        res = res + ' line:' + ex.lineNumber;
    if (ex.name)
        res = res + ' ' + ex.name;
    if (ex.number)
        res = res + ' ' + ex.number;
    return res;
}

/* Log the message in the browser's error log, if it has one. (This shows
   up in Safari, in Opera, and in Firefox if you have Firebug installed.)
*/
function qlog(msg) {
    if (window.console && console.log)
        console.log(msg);
    else if (window.opera && opera.postError)
        opera.postError(msg);
}

/* This returns a string displaying an object and all its properties.
   It's not used in the normal course of execution, but some (commented-out)
   debug log message use it.
*/
function qobjdump(obj, depth) {
    var key, proplist;

    if (jQuery.type(obj) === 'array') {
        if (depth)
            depth--;
        var ls = jQuery.map(obj, function(v, ix) {return qobjdump(v, depth);});
        return ("[" + ls.join(",") + "]");
    }
    if (!(jQuery.type(obj) === 'object'))
        return (""+obj);

    proplist = [ ];
    for (key in obj) {
        var val = obj[key];
        if (depth && jQuery.type(val) === 'object')
            val = qobjdump(val, depth-1);
        proplist.push(key + ":" + val);
    }
    return "{ " + proplist.join(", ") + " }";
}

/* Print the VM stack as a log message.
 */
function qstackdump() {
    if (!stack || !stack.length)
        return;
    var ix, val, debugfunc;
    var frm;
    var ls = [];
    for (ix=0; ix<stack.length; ix++) {
        frm = stack[ix];
        if (!frm.vmfunc.funcaddr) {
            // Can't get information from a ghost vmfunc.
            ls.push("(anonymous)");
            continue;
        }
        val = "0x"+frm.vmfunc.funcaddr.toString(16);
        debugfunc = debuginfo.functionmap[frm.vmfunc.funcaddr];
        if (debugfunc)
            val = val + (" \"" + debugfunc.name + "\"");
        ls.push(val);
    }
    qlog("VM stack dump: " + ls.join(", "));
}

/* Polyfill for Math.imul, if necessary. (This affects the global Math
   namespace at load time, which is ugly, but only on ancient browsers.)
*/
if (Math.imul === undefined) {
    qlog("Polyfilling Math.imul().");
    /* Code from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul */
    Math.imul = function(a, b) {
        var ah = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    };
}

/* Fast char-to-hex and char-to-quoted-char conversion tables. 
   setup_bytestring_table() is called once, at startup time.
*/
var bytestring_table = Array(256);
var quotechar_table = Array(256);
function setup_bytestring_table() {
    var ix, val;
    for (ix=0; ix<0x100; ix++) {
        val = ix.toString(16);
        if (ix<0x10)
            val = "0" + val;
        bytestring_table[ix] = val;
    }

    for (ix=0; ix<0x100; ix++) {
        if (ix >= 0x20 && ix < 0x7f) {
            /* Escape quote, double-quote, backslash. */
            if (ix == 0x22 || ix == 0x27 || ix == 0x5c)
                val = "\\"+String.fromCharCode(ix);
            else
                val = String.fromCharCode(ix);
        }
        else if (ix == 0x0a) {
            val = "\\n";
        }
        else {
            val = "\\x" + bytestring_table[ix];
        }
        quotechar_table[ix] = val;
    }
}

/* Functions to read values from memory (or other byte-arrays). These must
   always produce unsigned integers.

   We use arithmetic rather than bitwise operations. *,+ are slightly slower
   than <<,| but *,+ produce positive results, whereas <<,| produces a signed
   result for values over 0x80000000. So we save the cost of the >>>0, which
   is worthwhile.
*/

function ByteRead4(arr, addr) {
    return (arr[addr] * 0x1000000) + (arr[addr+1] * 0x10000) 
        + (arr[addr+2] * 0x100) + (arr[addr+3]);
}
function ByteRead2(arr, addr) {
    return (arr[addr] * 0x100) + (arr[addr+1]);
}
function ByteRead1(arr, addr) {
    return arr[addr];
}

function Mem1(addr) {
    return memmap[addr];
}
function Mem2(addr) {
    return (memmap[addr] * 0x100) + (memmap[addr+1]);
}
function Mem4(addr) {
    return (memmap[addr] * 0x1000000) + (memmap[addr+1] * 0x10000) 
        + (memmap[addr+2] * 0x100) + (memmap[addr+3]);
}
function MemSlice(addr, length) {
    return memmap.slice(addr, addr + length);
}
function MemW1(addr, val) {
    // ignore high bytes if necessary
    memmap[addr] = val & 0xFF;
}
function MemW2(addr, val) {
    // ignore high bytes if necessary
    memmap[addr] = (val >> 8) & 0xFF;
    memmap[addr+1] = val & 0xFF;
}
function MemW4(addr, val) {
    memmap[addr]   = (val >> 24) & 0xFF;
    memmap[addr+1] = (val >> 16) & 0xFF;
    memmap[addr+2] = (val >> 8) & 0xFF;
    memmap[addr+3] = val & 0xFF;
}

self.Mem1 = Mem1;
self.Mem2 = Mem2;
self.Mem4 = Mem4;
self.MemSlice = MemSlice;
self.MemW1 = MemW1;
self.MemW2 = MemW2;
self.MemW4 = MemW4;

function BytePushString(arr, str) {
    for (var ix = 0; ix < str.length; ix++) {
        arr.push(str.charCodeAt(ix));
    }
}
function BytePush4(arr, val) {
    arr.push((val >> 24) & 0xFF);
    arr.push((val >> 16) & 0xFF);
    arr.push((val >> 8) & 0xFF);
    arr.push(val & 0xFF);
}
function BytePush2(arr, val) {
    arr.push((val >> 8) & 0xFF);
    arr.push(val & 0xFF);
}
function BytePush1(arr, val) {
    arr.push(val & 0xFF);
}
function ByteWrite4(arr, addr, val) {
    arr[addr]   = (val >> 24) & 0xFF;
    arr[addr+1] = (val >> 16) & 0xFF;
    arr[addr+2] = (val >> 8) & 0xFF;
    arr[addr+3] = val & 0xFF;
}
function ByteReadString(arr, addr, len) {
    return String.fromCharCode.apply(this, arr.slice(addr, addr+len));
}

function QuoteMem1(addr) {
    if (memmap[addr] >= 0x80)
        return "0xffffff" + bytestring_table[memmap[addr]];
    return "0x" + bytestring_table[memmap[addr]];
}
function QuoteMem2(addr) {
    if (memmap[addr] >= 0x80) 
        return "0xffff" + bytestring_table[memmap[addr]] + bytestring_table[memmap[addr+1]];
    if (memmap[addr]) 
        return "0x" + bytestring_table[memmap[addr]] + bytestring_table[memmap[addr+1]];
    return "0x" + bytestring_table[memmap[addr+1]];
}
function QuoteMem4(addr) {
    if (memmap[addr]) 
        return "0x" + bytestring_table[memmap[addr]] + bytestring_table[memmap[addr+1]] + bytestring_table[memmap[addr+2]] + bytestring_table[memmap[addr+3]];
    if (memmap[addr+1]) 
        return "0x" + bytestring_table[memmap[addr+1]] + bytestring_table[memmap[addr+2]] + bytestring_table[memmap[addr+3]];
    if (memmap[addr+2]) 
        return "0x" + bytestring_table[memmap[addr+2]] + bytestring_table[memmap[addr+3]];
    return "0x" + bytestring_table[memmap[addr+3]];
}

function ReadArgByte(addr) {
    if (addr == 0xffffffff)
        return self.frame.valstack.pop() & 0xFF;
    else
        return Mem1(addr);
}

function WriteArgByte(addr, val) {
    if (addr == 0xffffffff)
        self.frame.valstack.push(val & 0xFF);
    else
        MemW1(addr, val);
}

function ReadArgWord(addr) {
    if (addr == 0xffffffff)
        return self.frame.valstack.pop();
    else
        return Mem4(addr);
}

function WriteArgWord(addr, val) {
    if (addr == 0xffffffff)
        self.frame.valstack.push(val);
    else
        MemW4(addr, val);
}

function ReadStructField(addr, fieldnum) {
    if (addr == 0xffffffff)
        return self.frame.valstack.pop();
    else
        return Mem4(addr + 4*fieldnum);
}

function WriteStructField(addr, fieldnum, val) {
    if (addr == 0xffffffff)
        self.frame.valstack.push(val);
    else
        MemW4(addr + 4*fieldnum, val);
}

/* GiDispa calls this, right before resuming execution at the end of a
   blocking Glk call. The value passed in is the result of the Glk
   call, which may have to be stored in a local variable or wherever.
   (This is only really relevant for glk_fileref_create_by_prompt(),
   since it's the only non-void blocking Glk call.)
*/
function SetResumeStore(val) {
    self.resumevalue = val;
}

/* Convert a 32-bit Unicode value to a JS string. */
function CharToString(val) {
    if (val < 0x10000) {
        return String.fromCharCode(val);
    }
    else {
        val -= 0x10000;
        return String.fromCharCode(0xD800 + (val >> 10), 0xDC00 + (val & 0x3FF));
    }
}

/* Convert a 32-bit Unicode value to a fragment of a JS string literal.
   That is, eval('"'+QuoteCharToString(val)+'"') == CharToString(val).
*/
function QuoteCharToString(val) {
    if (val < 0x100) {
        return quotechar_table[val];
    }
    else if (val < 0x10000) {
        val = val.toString(16);
        while (val.length < 4)
            val = "0"+val;
        return ("\\u" + val);
    }
    else {
        var val2;
        val -= 0x10000;
        val2 = 0xD800 + (val >> 10);
        val = 0xDC00 + (val & 0x3FF);
        return ("\\u" + val2.toString(16) + "\\u" + val.toString(16));
    }
}

/* Turn a length-1 string to a fragment of a JS string literal.
*/
function QuoteStr1ToString(val) {
    return QuoteCharToString(val.charCodeAt(0));
}

var regexp_string_unsafe = /[^a-zA-Z0-9 .,;:?!=_+()-]/g;

function QuoteEscapeString(val) {
    val = val.replace(regexp_string_unsafe, QuoteStr1ToString);
    return '"' + val + '"';
}

/* All fatal errors in the interpreter call this. It just converts the
   arguments to a nicely-formatted string, and then throws the string
   as an exception. The top-level quixe_init() or quixe_resume() will
   catch the exception and display it.
*/
function fatal_error(msg) {
    var ix, val;
    if (arguments.length > 1) {
        msg += " (";
        for (ix = 1; ix < arguments.length; ix++) {
            val = arguments[ix];
            if (typeof(val) == 'number') {
                val = val.toString(16);
            }
            else {
                val = ""+val;
            }
            if (ix != 1)
                msg += " ";
            msg += val;
        }
        msg += ")";
    }
    qlog(msg);//###debug
    throw(new Error(msg));
}
self.fatal_error = fatal_error;

/* Turn a string containing JS statements into a function object that
   executes those statements. The funcname is unfortunately not used.
   (This function used to use eval(), which let you sneak the funcname
   in for debugging purposes.)

   The function runs in global scope, rather than our Quixe environment.
   Private Quixe variables are not available. To work around this, the
   function's first argument must be "self"; the caller must pass in the
   global self object.

   If arg1, arg2 are provided, they become additional function arguments.
   (Currently limited to two.)
*/
function make_code(val, funcname, arg1, arg2) {
    var func;
    if (funcname === undefined)
        funcname = '_func';
    if (arg1 === undefined)
        func = new Function('self', val);
    else if (arg2 === undefined)
        func = new Function('self', arg1, val);
    else
        func = new Function('self', arg1, arg2, val);
    return func;
}

/* Constructor: VMFunc

   Everything we know about a function. This includes the layout of the local
   variables, the compiled paths for various start points within the function,
   and the addresses known to be start points.

   If the function is not in ROM, we still create this, but we will not
   add it to the permanent vmfunc_table.
*/
function VMFunc(funcaddr, startpc, localsformat, rawformat) {
    if (!funcaddr) {
        this.funcaddr = null;
        this.startpc = null;
        this.functype = null;
    }
    else {
        this.funcaddr = funcaddr;
        this.startpc = startpc;
        this.functype = Mem1(funcaddr); /* 0xC0 or 0xC1 */
    }

    /* Addresses of all known (or predicted) paths for this function. */
    this.pathaddrs = {};
    /* The path tables for the various iosys modes. And yes, they are keyed
       on integers. */
    this[0] = {};
    this[1] = {};
    this[2] = {};

    this.locallen = null;
    this.localsformat = localsformat; /* array of {size, count} */
    this.rawformat = rawformat; /* array of bytes (multiple of 4) */
    this.localsindex = []; /* array of {size, pos} */

    /* Create a locals index, according to the format. This will 
       contain one {size, pos} per local.

       This is wacky, because it's not a simple list of values. A local is
       accessed by its byte position, assuming the "natural" four-byte word
       size. So the first (4-byte) local will be locals[0], the second will 
       be locals[4], and so on. In-between values will be undefined. */
    var ix, jx;
    var locallen = 0;
    for (ix=0; ix<this.localsformat.length; ix++) {
        var form = this.localsformat[ix];

        /* Pad to 4-byte or 2-byte alignment if these locals are 4 or 2
           bytes long. */
        if (form.size == 4) {
            while (locallen & 3)
                locallen++;
        }
        else if (form.size == 2) {
            while (locallen & 1)
                locallen++;
        }
        /* else no padding */

        for (jx=0; jx<form.count; jx++) {
            this.localsindex.push({ size:form.size, pos:locallen });
            locallen += form.size;
        }
    }

    /* Pad the locals to 4-byte alignment. */
    while (locallen & 3)
        locallen++;
    this.locallen = locallen;
}

/* Constructor: StackFrame

   One stack frame on the execution stack. This includes local variables
   and the value stack. It does not contain the spec-defined byte sequence
   for the stack frame; we generate that at save time.

   If we're deserializing a saved game, the vmfunc isn't a "real" vmfunc,
   but a ghost built from the saved stack frame. In particular, 
   vmfunc.funcaddr and vmfunc.startpc are null.
*/
function StackFrame(vmfunc) {
    var ix;

    this.vmfunc = vmfunc; /* the VMFunc that is running in this frame */
    this.depth = null;
    this.framestart = null; /* stack position where this frame starts */
    this.framelen = null; /* as in C */
    this.valstack = [];
    this.localspos = null; /* as in C */

    this.localsindex = vmfunc.localsindex;
    this.locals = [];

    /* Create a locals array, according to the index. All locals begin 
       with a value of zero. */
    for (ix=0; ix<this.localsindex.length; ix++) {
        var form = this.localsindex[ix];
        this.locals[form.pos] = 0;
    }

    /* Note: I tried building that array in the VMFunc constructor,
       so that I could do a fast clone here. Turns out it was
       actually slower that way. Pity. */

    this.framelen = 8 + vmfunc.rawformat.length + vmfunc.locallen;

    //qlog("### frame for " + vmfunc.funcaddr.toString(16) + ": framelen " + this.framelen + ", locindex " + qobjdump(this.localsindex) + ", locals " + qobjdump(this.locals));
}

/* Make a deep copy of a stack frame. This is used in vm_saveundo().
*/
function clone_stackframe(frame) {
    var other = new StackFrame(frame.vmfunc);
    other.depth = frame.depth;
    other.framestart = frame.framestart;
    other.framelen = frame.framelen;
    other.valstack = frame.valstack.slice(0);
    other.localspos = frame.localspos;
    other.locals = frame.locals.slice(0);
    other.framelen = frame.framelen;
    return other;
}

/* Serialize a stack frame and push it onto the end of a byte array.
   The frame must end in a call stub (or we won't be able to read it back in).
   See the spec at http://www.eblong.com/zarf/glulx/glulx-spec_1.html#s.3.1
*/
function push_serialized_stackframe(frame, arr) {
    // Frame length and format of locals.
    BytePush4(arr, frame.framelen);
    var rawformat = frame.vmfunc.rawformat;
    BytePush4(arr, 8 + rawformat.length);
    for (var i = 0; i < rawformat.length; i++) {
        arr.push(rawformat[i]);
    }
    
    // Local variables, plus any necessary padding.
    for (var i = 0; i < frame.vmfunc.localsindex.length; i++) {
        var form = frame.vmfunc.localsindex[i];
        if (form.size == 4) {
            while (arr.length & 3)
                arr.push(0);
            BytePush4(arr, frame.locals[form.pos]);
        }
        else if (form.size == 2) {
            while (arr.length & 1)
                arr.push(0);
            BytePush2(arr, frame.locals[form.pos]);
        }
        else {
            BytePush1(arr, frame.locals[form.pos]);
        }
    }
    while (arr.length & 3)
        arr.push(0);
    
    // Value stack.
    for (var i = 0; i < frame.valstack.length; i++) {
        BytePush4(arr, frame.valstack[i]);
    }
}
    
/* Pop a stack frame from the end of the given byte array.
   Returns a deserialized StackFrame object, or undefined on failure.
 */
function pop_deserialized_stackframe(arr) {
    // The last 4 bytes should be the frame pointer.
    var frameptr = ByteRead4(arr, arr.length - 4);
    if (frameptr < 0 || frameptr >= arr.length) {
        qlog("Bad frameptr in serialized stack frame");
        return undefined;
    }
    arr = arr.splice(frameptr, arr.length);
    
    // Frame length and locals format. We'll need this to build a fake
    // stack frame.
    var framelen = ByteRead4(arr, 0);
    var localspos = ByteRead4(arr, 4);

    var rawformat = arr.slice(8, localspos);

    /* Go through the function's locals-format list, and construct a
       slightly nicer description of the locals. (An array of [size, num].) */
    var localsformat = [];
    var addr = 8;
    while (1) {
        /* Grab two bytes from the locals-format list. These are 
           unsigned (0..255 range). */
        var loctype = ByteRead1(arr, addr);
        addr++;
        var locnum = ByteRead1(arr, addr);
        addr++;

        if (loctype == 0) {
            break;
        }
        if (loctype != 1 && loctype != 2 && loctype != 4) {
            fatal_error("Invalid local variable size in function header.", loctype);
        }
        
        localsformat.push({ size:loctype, count:locnum });
    }

    // Build the fake VMFunc that will serve this stack frame.
    var vmfunc = new VMFunc(null, null, localsformat, rawformat);
    
    // Build an empty frame.
    var frame = new StackFrame(vmfunc);
    frame.framestart = frameptr;
    
    // Load the local variables.
    for (var i = 0; i < frame.vmfunc.localsindex.length; i++) {
        var form = frame.vmfunc.localsindex[i];
        if (form.size == 4) {
            frame.locals[form.pos] = ByteRead4(arr, localspos + form.pos);
        }
        else if (form.size == 2) {
            frame.locals[form.pos] = ByteRead2(arr, localspos + form.pos);
        }
        else {
            frame.locals[form.pos] = ByteRead1(arr, localspos + form.pos);
        }
    }
    
    // Load the stack variables.
    for (var pos = framelen; pos < arr.length; pos += 4) {
        frame.valstack.push(ByteRead4(arr, pos));
    }
    
    return frame;
}

/* Constructor: VMTextEnv

   Represents all the cached string-table information for when stringtable
   is addr. This includes the decoding table, and the compiled strings
   for each address that's been printed.

   If the table is not in ROM, there is no cached information. We still
   make a VMTextEnv, but it's empty.
*/
function VMTextEnv(addr, dectab) {
    if (addr == 0)
        fatal_error("Tried to create a VMTextEnv for address zero.");

    this.addr = addr;
    this.cacheable = (dectab !== undefined);
    this.decoding_tree = dectab;

    /* The string tables for the various iosys modes. */
    this.vmstring_tables = [];
    if (this.cacheable) {
        this.vmstring_tables[0] = {};
        this.vmstring_tables[1] = {};
        this.vmstring_tables[2] = {};
    }
}

var operandlist_table = null;

/* This is called once, at startup time. */
function setup_operandlist_table() {
    /* Constructor: OperandList */
    function OperandList(formlist, argsize) {
        this.argsize = (argsize ? argsize : 4);
        this.numops = formlist.length;
        var ls = [];
        for (var ix=0; ix<formlist.length; ix++)
            ls.push(formlist.charAt(ix));
        this.formlist = ls;
    }
    var list_none = new OperandList("");
    var list_L = new OperandList("L");
    var list_LL = new OperandList("LL");
    var list_LLL = new OperandList("LLL");
    var list_LLLL = new OperandList("LLLL");
    var list_LS = new OperandList("LS");
    var list_LLS = new OperandList("LLS");
    var list_LLLLLLS = new OperandList("LLLLLLS");
    var list_LLLLLLLS = new OperandList("LLLLLLLS");
    var list_LLSS = new OperandList("LLSS");
    var list_LC = new OperandList("LC");
    var list_LLC = new OperandList("LLC");
    var list_LLLC = new OperandList("LLLC");
    var list_LLLLC = new OperandList("LLLLC");
    var list_ES = new OperandList("ES");
    var list_LES = new OperandList("LES");
    var list_EES = new OperandList("EES");
    var list_F = new OperandList("F");
    var list_LF = new OperandList("LF");
    var list_LLF = new OperandList("LLF");
    var list_EF = new OperandList("EF");
    var list_1EF = new OperandList("EF", 1);
    var list_2EF = new OperandList("EF", 2);
    var list_S = new OperandList("S");
    var list_SS = new OperandList("SS");
    var list_CL = new OperandList("CL");
    var list_C = new OperandList("C");
    operandlist_table = { 
        0x00: list_none, /* nop */
        0x10: list_EES, /* add */
        0x11: list_LES, /* sub */
        0x12: list_LLS, /* mul */
        0x13: list_LLS, /* div */
        0x14: list_LLS, /* mod */
        0x15: list_ES, /* neg */
        0x18: list_EES, /* bitand */
        0x19: list_EES, /* bitor */
        0x1A: list_EES, /* bitxor */
        0x1B: list_ES, /* bitnot */
        0x1C: list_LLS, /* shiftl */
        0x1D: list_LLS, /* sshiftr */
        0x1E: list_LLS, /* ushiftr */
        0x20: list_L, /* jump */
        0x22: list_LL, /* jz */
        0x23: list_LL, /* jnz */
        0x24: list_LLL, /* jeq */
        0x25: list_LLL, /* jne */
        0x26: list_LLL, /* jlt */
        0x27: list_LLL, /* jge */
        0x28: list_LLL, /* jgt */
        0x29: list_LLL, /* jle */
        0x2A: list_LLL, /* jltu */
        0x2B: list_LLL, /* jgeu */
        0x2C: list_LLL, /* jgtu */
        0x2D: list_LLL, /* jleu */
        0x30: list_LLC, /* call */
        0x31: list_L, /* return */
        0x32: list_CL, /* catch */
        0x33: list_LL, /* throw */
        0x34: list_LL, /* tailcall */
        0x40: list_EF, /* copy */
        0x41: list_2EF, /* copys */
        0x42: list_1EF, /* copyb */
        0x44: list_LS, /* sexs */
        0x45: list_LS, /* sexb */
        0x48: list_LLS, /* aload */
        0x49: list_LLS, /* aloads */
        0x4A: list_LLS, /* aloadb */
        0x4B: list_LLS, /* aloadbit */
        0x4C: list_LLL, /* astore */
        0x4D: list_LLL, /* astores */
        0x4E: list_LLL, /* astoreb */
        0x4F: list_LLL, /* astorebit */
        0x50: list_F, /* stkcount */
        0x51: list_LF, /* stkpeek */
        0x52: list_none, /* stkswap */
        0x53: list_LL, /* stkroll */
        0x54: list_L, /* stkcopy */
        0x70: list_L, /* streamchar */
        0x71: list_L, /* streamnum */
        0x72: list_L, /* streamstr */
        0x73: list_L, /* streamunichar */
        0x100: list_LLS, /* gestalt */
        0x101: list_L, /* debugtrap */
        0x102: list_S, /* getmemsize */
        0x103: list_LS, /* setmemsize */
        0x104: list_L, /* jumpabs */
        0x110: list_LS, /* random */
        0x111: list_L, /* setrandom */
        0x120: list_none, /* quit */
        0x121: list_S, /* verify */
        0x122: list_none, /* restart */
        0x123: list_LC, /* save */
        0x124: list_LF, /* restore */
        0x125: list_C, /* saveundo */
        0x126: list_F, /* restoreundo */
        0x127: list_LL, /* protect */
        0x130: list_LLF, /* glk */
        0x140: list_S, /* getstringtbl */
        0x141: list_L, /* setstringtbl */
        0x148: list_SS, /* getiosys */
        0x149: list_LL, /* setiosys */
        0x150: list_LLLLLLLS, /* linearsearch */
        0x151: list_LLLLLLLS, /* binarysearch */
        0x152: list_LLLLLLS, /* linkedsearch */
        0x160: list_LC, /* callf */
        0x161: list_LLC, /* callfi */
        0x162: list_LLLC, /* callfii */
        0x163: list_LLLLC, /* callfiii */
        0x170: list_LL, /* mzero */
        0x171: list_LLL, /* mcopy */
        0x178: list_LS, /* malloc */
        0x179: list_L, /* mfree */
        0x180: list_LL, /* accelfunc */
        0x181: list_LL, /* accelparam */
        0x190: list_LS, /* numtof */
        0x191: list_LS, /* ftonumz */
        0x192: list_LS, /* ftonumn */
        0x198: list_LS, /* ceil */
        0x199: list_LS, /* floor */
        0x1A0: list_LLS, /* fadd */
        0x1A1: list_LLS, /* fsub */
        0x1A2: list_LLS, /* fmul */
        0x1A3: list_LLS, /* fdiv */
        0x1A4: list_LLSS, /* fmod */
        0x1A8: list_LS, /* sqrt */
        0x1A9: list_LS, /* exp */
        0x1AA: list_LS, /* log */
        0x1AB: list_LLS, /* pow */
        0x1B0: list_LS, /* sin */
        0x1B1: list_LS, /* cos */
        0x1B2: list_LS, /* tan */
        0x1B3: list_LS, /* asin */
        0x1B4: list_LS, /* acos */
        0x1B5: list_LS, /* atan */
        0x1B6: list_LLS, /* atan2 */
        0x1C0: list_LLLL, /* jfeq */
        0x1C1: list_LLLL, /* jfne */
        0x1C2: list_LLL, /* jflt */
        0x1C3: list_LLL, /* jfle */
        0x1C4: list_LLL, /* jfgt */
        0x1C5: list_LLL, /* jfge */
        0x1C8: list_LL, /* jisnan */
        0x1C9: list_LL  /* jisinf */
    }
}

/* A brief lecture on the offstate:

   One way we optimize JIT-compiled code is to do a running static analysis,
   and try to determine what values are on top of the VM stack at any given
   time. (That is, during any given instruction.) We also try to keep track
   of what values are in all the local variables. These lists are the
   "offstate" ("offstack" and "offloc" lists). They can contain both numeric
   literals and (Javascript) temporary variables. When we add a value to the
   offstack, we delay generating the code that pushes it into the real (VM)
   stack. If we're lucky, we never have to do that push at all. Similarly,
   when we add a value to the offloc, we delay writing it to the real
   local-variable array.

   Temporary variables are considered immutable as long as they remain in
   the offstate. So a variable can actually appear in the offstate more
   than once.

   Whenever anything happens that can't be statically analyzed --
   notably, any jump, call, or return -- we "unload the offstate", by
   generating the appropriate VM stack pushes and local writes. This must
   certainly be done at the end of a code path, and we have asserts to
   ensure this.
*/

/* Some utility functions for opcode handlers. */

self.funcop_cache = {};

/* Return a Javascript literal representing a funcop. The funcop can be used
   later with store_operand_by_funcop(). For efficiency, this represents a
   "discard" funcop as "null".

   For more efficiency (to avoid creating objects in commonly-called
   functions), the literal we return looks like "funcop_cache.mXsYaZ".
   We fill in the cache as necessary.

   (We can't just store the passed-in funcop, because it's a scratch object
   that will be overwritten.)
*/
function oputil_record_funcop(funcop) {
    if (funcop.mode == 0) {
        /* discard value */
        return "null";
    }

    var key = "m" + funcop.mode;
    if (funcop.argsize != null)
        key = key + "s" + funcop.argsize;
    if (funcop.addr != null)
        key = key + "a" + funcop.addr;

    if (self.funcop_cache.key)
        return "self.funcop_cache."+key;

    var obj = { key: key, 
        mode: funcop.mode, argsize: funcop.argsize, addr: funcop.addr };
    self.funcop_cache[key] = obj;
    return "self.funcop_cache."+key;
}

/* Store the result of an opcode, using the information specified in
   funcop. The operand may be a quoted constant, a holdvar, or an
   expression. (As usual, constants are identified by starting with a
   "0", and holdvars with a "_".)
*/
function oputil_store(context, funcop, operand) {
    switch (funcop.mode) {

    case 8: /* push on stack */
        if (funcop.argsize == 4) {
            /* These two cases are tested in a nasty fast way. Pretend
               I'm calling quot_isconstant() and quot_isholdvar(). */
            var opchar = operand[0];
            if (opchar === "0") { /* quot_isconstant(operand) */
                /* If this is an untruncated constant, we can move it 
                   directly to the offstack. */
                context.offstack.push(operand);
                ;;;context.code.push("// push to offstack: "+operand); //debug
                return;
            }
            if (opchar === "_") { /* quot_isholdvar(operand) */
                /* If it's an untruncated variable, we can still move it
                   to the offstack, but we have to increase its usage. */
                push_offstack_holdvar(context, operand);
                ;;;context.code.push("// re-push to offstack: "+operand); //debug
                return;
            }
        }

        holdvar = alloc_holdvar(context, true);
        context.offstack.push(holdvar);
        if (funcop.argsize == 4) {
            context.code.push(holdvar+"=("+operand+");");
        }
        else if (funcop.argsize == 2) {
            context.code.push(holdvar+"=0xffff&("+operand+");");
        }
        else {
            context.code.push(holdvar+"=0xff&("+operand+");");
        }
        return;

    case 0: /* discard value */
        context.code.push("("+operand+");");
        return;

    case 11: /* The local-variable cases. */
        if (funcop.argsize == 4) {
            /* These two cases are tested in a nasty fast way. Pretend
               I'm calling quot_isconstant() and quot_isholdvar(). */
            var opchar = operand[0];
            if (opchar === "0") { /* quot_isconstant(operand) */
                /* If this is an untruncated constant, we can move it 
                   directly to the offloc. */
                store_offloc_value(context, funcop.addr, operand, false);
                ;;;context.code.push("// store to offloc["+funcop.addr+"]: "+operand); //debug
                return;
            }
            if (opchar === "_") { /* quot_isholdvar(operand) */
                /* If it's an untruncated variable, we can still move it
                   to the offloc, but we have to increase its usage. */
                store_offloc_value(context, funcop.addr, operand, true);
                ;;;context.code.push("// re-store to offloc["+funcop.addr+"]: "+operand); //debug
                return;
            }
        }

        /* Wipe the offloc entry, if any. */
        store_offloc_value(context, funcop.addr, undefined);
        /* Store directly to the locals array. */
        if (funcop.argsize == 4) {
            context.code.push("self.frame.locals["+funcop.addr+"]=("+operand+");");
        }
        else if (funcop.argsize == 2) {
            context.code.push("self.frame.locals["+funcop.addr+"]=(0xffff &"+operand+");");
        }
        else {
            context.code.push("self.frame.locals["+funcop.addr+"]=(0xff &"+operand+");");
        }
        return;

    case 15: /* The main-memory cases. */
        if (funcop.argsize == 4) {
            context.code.push("self.MemW4("+funcop.addr+","+operand+");");
        }
        else if (funcop.argsize == 2) {
            context.code.push("self.MemW2("+funcop.addr+","+operand+");");
        }
        else {
            context.code.push("self.MemW1("+funcop.addr+","+operand+");");
        }
        return;

    default:
        fatal_error("Unknown addressing mode in store func operand.");

    }
}

/* Push the four-value call stub onto the stack. The operand should be the
   output of a "C" operand -- a string of the form "DESTTYPE,DESTADDR". 

   The last argument, addr, is optional. If not provided, it defaults to
   context.cp -- the address of the next opcode (to be compiled).
*/
function oputil_push_callstub(context, operand, addr) {
    if (addr === undefined)
        addr = context.cp;
    context.code.push("self.frame.valstack.push("+operand+","+addr+",self.frame.framestart);");
}

/* Conditionally push a type-0x11 call stub. This logically happens at
   the beginning of any compiled string function. In practice, we delay
   it until the first time it's needed; that's what the substring flag
   tracks.

   This relies on nextcp being the next opcode address (as passed
   to the compiled string function as an argument).
*/
function oputil_push_substring_callstub(context) {
    context.code.push("if (!substring) { substring=true;");
    context.code.push("self.frame.valstack.push(0x11,0,nextcp,self.frame.framestart);");
    context.code.push("}");
}

/* Move all values on the offstack to the real stack, and all values
   on the offloc to the real local variables. A handler should call
   this before any operation which requires a legal game state, and
   also before ending compilation. 

   If keepstack is true, this generates code to move the values, but
   leaves them on the offstack as well. Call this form before a conditional
   "return" which does not end compilation.
*/
function oputil_unload_offstate(context, keepstack) {
    var ix;
    ;;;context.code.push("// unload offstate: " + context.offstack.length + " stack" + (context.offloc.length ? ", plus locs" : "") + (keepstack ? " (conditional)" : "")); //debug
    if (context.offstack.length) {
        context.code.push("self.frame.valstack.push("+context.offstack.join(",")+");");
    }
    if (context.offloc.length) {
        for (ix=0; ix<context.offloc.length; ix++) {
            if (context.offloc[ix] !== undefined && context.offlocdirty[ix]) {
                context.code.push("self.frame.locals["+ix+"]="+context.offloc[ix]+";");
            }
        }
    }
    if (!keepstack) {
        var holdvar;
        for (ix=0; ix<context.offloc.length; ix++) {
            holdvar = context.offloc[ix];
            if (holdvar !== undefined) {
                if (context.holduse[holdvar] !== undefined)
                    context.holduse[holdvar] = false;
            }
        }
        context.offloc.length = 0;
        context.offlocdirty.length = 0;
        while (context.offstack.length) {
            holdvar = context.offstack.pop();
            if (context.holduse[holdvar] !== undefined)
                context.holduse[holdvar] = false;
        }
        /* Now offstack/offloc are empty, and all their variables are marked 
           not on it. (There might have been constant values too, but that
           didn't affect holduse.) */
    }
}

function oputil_flush_string(context) {
    if (context.buffer.length == 0)
        return;

    var str = context.buffer.join("");
    context.buffer.length = 0;

    context.code.push("Glk.glk_put_jstring("+QuoteEscapeString(str)+");");
}

/* Return the signed equivalent of a value. If it is a high-bit constant, 
   this returns its negative equivalent as a constant. If it is a _hold
   variable or expression, a new expression is returned with the signed
   value.

   If the hold parameter is true, the expression will be assigned to a
   new _hold var. Use this if you intend to use the returned value more
   than once.
*/
function oputil_signify_operand(context, operand, hold) {
    var val;
    if (quot_isconstant(operand)) {
        val = Number(operand);
        if (val & 0x80000000)
            return ""+(val - 0x100000000);
        else
            return operand;
    }

    /* By a quirk of Javascript, you can turn an unsigned 32-bit number
       into a signed one by bit-anding it with 0xffffffff. */

    val = "("+operand+"&0xffffffff)";
    if (hold) {
        var holdvar = alloc_holdvar(context);
        context.code.push(holdvar+"="+val+";");
        return holdvar;
    }
    else {
        return val;
    }
}

/* Return the float equivalent of a value. If it is a constant, this
   returns a float constant. If it is a _hold_ variable or expression,
   a new expression is returned with the signed value.

   If the hold parameter is true, the expression will be assigned to a
   new _hold var. Use this if you intend to use the returned value more
   than once.
*/
function oputil_decode_float(context, operand, hold) {
    var val;
    if (quot_isconstant(operand)) {
        val = Number(operand);
        /* The standard toString rendering of -0 is "0", so we have to
           handle that case specially. */
        if (val == 0x80000000)
            return "-0";
        return ""+decode_float(val);
    }

    val = "self.decode_float("+operand+")";
    if (hold) {
        var holdvar = alloc_holdvar(context);
        context.code.push(holdvar+"="+val+";");
        return holdvar;
    }
    else {
        return val;
    }
}

/* Generate code for a branch to operand. This includes the usual branch
   hack; 0 or 1 return from the current function. 
   If unconditional is false, the offstack values are left in place,
   so that compilation can continue.
*/
function oputil_perform_jump(context, operand, unconditional) {
    if (quot_isconstant(operand)) {
        var val = Number(operand);
        if (val == 0 || val == 1) {
            if (unconditional) {
                ;;;context.code.push("// quashing offstack for unconditional return: " + context.offstack.length); //debug
                context.offstack.length = 0;
                context.offloc.length = 0;
                context.offlocdirty.length = 0;
            }
            else {
                ;;;context.code.push("// ignoring offstack for conditional return: " + context.offstack.length); //debug
            }
            context.code.push("if (self.leave_function()) return self.VMStopped;");
            context.code.push("self.pop_callstub("+val+");");
        }
        else {
            oputil_unload_offstate(context, !unconditional);
            var newpc = (context.cp+val-2) >>>0;
            context.code.push("self.pc = "+newpc+";");
            context.vmfunc.pathaddrs[newpc] = true;
        }
    }
    else {
        oputil_unload_offstate(context, !unconditional);
        context.code.push("if (("+operand+")==0 || ("+operand+")==1) {");
        context.code.push("if (self.leave_function()) return self.VMStopped;");
        context.code.push("self.pop_callstub("+operand+");");
        context.code.push("}");
        context.code.push("else {");
        context.code.push("self.pc = ("+context.cp+"+("+operand+")-2) >>>0;");
        context.code.push("}");
    }
    context.code.push("return;");
}

/* opcode_table: All the Glulx VM opcodes. 

   Each entry in this table is a function that *generates* executable
   Javascript code for that opcode. When we're compiling a code path,
   we call the sequence of opcode functions, and the result is a
   working Javascript function for that code path.
*/

var opcode_table = {
    0x0: function(context, operands) { /* nop */
    },

    0x10: function(context, operands) { /* add */
        /* Commutative, so we don't care about the order of evaluation of
           the two expressions. */
        /* We truncate the sum with >>>0, which always gives an unsigned
           32-bit integer. */
        context.code.push(operands[2]+"(("+operands[0]+")+("+operands[1]+")) >>>0);");
    },

    0x11: function(context, operands) { /* sub */
        /* We hold operand 0, to ensure that it's evaluated first. Op 1
           is an expression. */
        context.code.push(operands[2]+"(("+operands[0]+")-("+operands[1]+")) >>>0);");
    },

    0x12: function(context, operands) { /* mul */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        context.code.push(operands[2]+"(Math.imul(("+sign0+"),("+sign1+"))) >>>0);");
    },

    0x13: function(context, operands) { /* div */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        var holdvar = alloc_holdvar(context);
        context.code.push(holdvar+"=(("+sign0+")/("+sign1+"));");
        context.code.push("if (!isFinite("+holdvar+")) self.fatal_error('Division by zero.');");
        context.code.push(operands[2]+"("+holdvar+">=0)?Math.floor("+holdvar+"):(-Math.floor(-"+holdvar+") >>>0));");
    },

    0x14: function(context, operands) { /* mod */
        /* Javascript modulo follows the same sign laws as Glulx, which
           is convenient. */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        var holdvar = alloc_holdvar(context);
        context.code.push(holdvar+"=(("+sign0+")%("+sign1+"));");
        context.code.push("if (!isFinite("+holdvar+")) self.fatal_error('Modulo division by zero.');");
        context.code.push(operands[2]+holdvar+" >>>0);");
    },

    0x15: function(context, operands) { /* neg */
        context.code.push(operands[1]+"(-("+operands[0]+")) >>>0);");
    },

    0x18: function(context, operands) { /* bitand */
        /* Commutative. */
        context.code.push(operands[2]+"(("+operands[0]+")&("+operands[1]+")) >>>0);");
    },

    0x19: function(context, operands) { /* bitor */
        /* Commutative. */
        context.code.push(operands[2]+"(("+operands[0]+")|("+operands[1]+")) >>>0);");
    },

    0x1a: function(context, operands) { /* bitxor */
        /* Commutative. */
        context.code.push(operands[2]+"(("+operands[0]+")^("+operands[1]+")) >>>0);");
    },

    0x1b: function(context, operands) { /* bitnot */
        context.code.push(operands[1]+"(~("+operands[0]+")) >>>0);");
    },

    0x1c: function(context, operands) { /* shiftl */
        if (quot_isconstant(operands[1])) {
            var val = Number(operands[1]);
            if (val < 32)
                context.code.push(operands[2]+"(("+operands[0]+")<<"+val+") >>>0);");
            else
                context.code.push(operands[2]+"0);");
        }
        else {
            context.code.push(operands[2]+"("+operands[1]+"<32) ? (("+operands[0]+"<<"+operands[1]+") >>>0) : 0);");
        }
    },

    0x1d: function(context, operands) { /* sshiftr */
        if (quot_isconstant(operands[1])) {
            var val = Number(operands[1]);
            if (val < 32)
                context.code.push(operands[2]+"(("+operands[0]+")>>"+val+") >>>0);");
            else
                context.code.push(operands[2]+"(("+operands[0]+")&0x80000000) ? 0xffffffff : 0);");
        }
        else {
            context.code.push("if ("+operands[0]+" & 0x80000000) {");
            context.code.push(operands[2]+"("+operands[1]+"<32) ? (("+operands[0]+">>"+operands[1]+") >>>0) : 0xffffffff);");
            context.code.push("} else {");
            context.code.push(operands[2]+"("+operands[1]+"<32) ? (("+operands[0]+">>"+operands[1]+") >>>0) : 0);");
            context.code.push("}");
        }
    },

    0x1e: function(context, operands) { /* ushiftr */
        if (quot_isconstant(operands[1])) {
            var val = Number(operands[1]);
            if (val < 32)
                context.code.push(operands[2]+"("+operands[0]+")>>>"+val+");");
            else
                context.code.push(operands[2]+"0);");
        }
        else {
            context.code.push(operands[2]+"("+operands[1]+"<32) ? ("+operands[0]+">>>"+operands[1]+") : 0);");
        }
    },

    0x20: function(context, operands) { /* jump */
        oputil_perform_jump(context, operands[0], true);
        context.path_ends = true;
    },

    0x104: function(context, operands) { /* jumpabs */
        if (quot_isconstant(operands[0])) {
            var newpc = Number(operands[0]);
            context.code.push("self.pc = "+newpc+";");
            context.vmfunc.pathaddrs[newpc] = true;
        }
        else {
            context.code.push("self.pc = "+operands[0]+";");
        }
        oputil_unload_offstate(context);
        context.code.push("return;");
        context.path_ends = true;
    },

    0x22: function(context, operands) { /* jz */
        context.code.push("if (("+operands[0]+")==0) {");
        oputil_perform_jump(context, operands[1]);
        context.code.push("}");
    },

    0x23: function(context, operands) { /* jnz */
        context.code.push("if (("+operands[0]+")!=0) {");
        oputil_perform_jump(context, operands[1]);
        context.code.push("}");
    },

    0x24: function(context, operands) { /* jeq */
        context.code.push("if (("+operands[0]+")==("+operands[1]+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x25: function(context, operands) { /* jne */
        context.code.push("if (("+operands[0]+")!=("+operands[1]+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x26: function(context, operands) { /* jlt */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        context.code.push("if (("+sign0+")<("+sign1+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x27: function(context, operands) { /* jge */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        context.code.push("if (("+sign0+")>=("+sign1+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x28: function(context, operands) { /* jgt */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        context.code.push("if (("+sign0+")>("+sign1+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x29: function(context, operands) { /* jle */
        var sign0 = oputil_signify_operand(context, operands[0]);
        var sign1 = oputil_signify_operand(context, operands[1]);
        context.code.push("if (("+sign0+")<=("+sign1+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x2a: function(context, operands) { /* jltu */
        context.code.push("if (("+operands[0]+")<("+operands[1]+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x2b: function(context, operands) { /* jgeu */
        context.code.push("if (("+operands[0]+")>=("+operands[1]+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x2c: function(context, operands) { /* jgtu */
        context.code.push("if (("+operands[0]+")>("+operands[1]+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x2d: function(context, operands) { /* jleu */
        context.code.push("if (("+operands[0]+")<=("+operands[1]+")) {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x30: function(context, operands) { /* call */
        if (quot_isconstant(operands[1])) {
            var ix;
            var argc = Number(operands[1]);
            for (ix=0; ix<argc; ix++) {
                if (context.offstack.length) {
                    var holdvar = pop_offstack_holdvar(context);
                    context.code.push("self.tempcallargs["+ix+"]="+holdvar+";");
                }
                else {
                    context.code.push("self.tempcallargs["+ix+"]=self.frame.valstack.pop();");
                }
            }
            oputil_unload_offstate(context);
        }
        else {
            context.varsused["ix"] = true;
            oputil_unload_offstate(context);
            context.code.push("for (ix=0; ix<"+operands[1]+"; ix++) { self.tempcallargs[ix]=self.frame.valstack.pop(); }");
        }
        oputil_push_callstub(context, operands[2]);
        context.code.push("self.enter_function("+operands[0]+", "+operands[1]+");");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x34: function(context, operands) { /* tailcall */
        if (quot_isconstant(operands[1])) {
            var ix;
            var argc = Number(operands[1]);
            for (ix=0; ix<argc; ix++) {
                if (context.offstack.length) {
                    var holdvar = pop_offstack_holdvar(context);
                    context.code.push("self.tempcallargs["+ix+"]="+holdvar+";");
                }
                else {
                    context.code.push("self.tempcallargs["+ix+"]=self.frame.valstack.pop();");
                }
            }
            oputil_unload_offstate(context);
        }
        else {
            context.varsused["ix"] = true;
            oputil_unload_offstate(context);
            context.code.push("for (ix=0; ix<"+operands[1]+"; ix++) { self.tempcallargs[ix]=self.frame.valstack.pop(); }");
        }
        /* Note that tailcall in the top-level function will not work.
           But why would you do that? */
        context.code.push("if (self.leave_function()) return self.VMStopped;");
        context.code.push("self.enter_function("+operands[0]+", "+operands[1]+");");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x160: function(context, operands) { /* callf */
        oputil_unload_offstate(context);
        oputil_push_callstub(context, operands[1]);
        context.code.push("self.enter_function("+operands[0]+", 0);");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x161: function(context, operands) { /* callfi */
        oputil_unload_offstate(context);
        context.code.push("self.tempcallargs[0]=("+operands[1]+");");
        oputil_push_callstub(context, operands[2]);
        context.code.push("self.enter_function("+operands[0]+", 1);");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x162: function(context, operands) { /* callfii */
        oputil_unload_offstate(context);
        context.code.push("self.tempcallargs[0]=("+operands[1]+");");
        context.code.push("self.tempcallargs[1]=("+operands[2]+");");
        oputil_push_callstub(context, operands[3]);
        context.code.push("self.enter_function("+operands[0]+", 2);");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x163: function(context, operands) { /* callfiii */
        oputil_unload_offstate(context);
        context.code.push("self.tempcallargs[0]=("+operands[1]+");");
        context.code.push("self.tempcallargs[1]=("+operands[2]+");");
        context.code.push("self.tempcallargs[2]=("+operands[3]+");");
        oputil_push_callstub(context, operands[4]);
        context.code.push("self.enter_function("+operands[0]+", 3);");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x31: function(context, operands) { /* return */
        /* Quash the offstack; we're about to blow away the whole stack
           frame, so nothing of the stack will survive. */
        ;;;context.code.push("// quashing offstack for return: " + context.offstack.length); //debug
        context.offstack.length = 0;
        context.offloc.length = 0;
        context.offlocdirty.length = 0;
        context.code.push("if (self.leave_function()) return self.VMStopped;");
        context.code.push("self.pop_callstub("+operands[0]+");");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x32: function(context, operands) { /* catch */
        oputil_unload_offstate(context);
        oputil_push_callstub(context, operands[0]);
        context.code.push("self.store_operand("+operands[0]+",self.frame.framestart+self.frame.framelen+4*self.frame.valstack.length);");
        oputil_perform_jump(context, operands[1], true);
        context.path_ends = true;
    },

    0x33: function(context, operands) { /* throw */
        /* Quash the offstack; we're about to blow away the stack frame, or
           at minimum reset it. A valid call stub cannot be on the offstack. */
        ;;;context.code.push("// quashing offstack for throw: " + context.offstack.length); //debug
        context.offstack.length = 0;
        context.offloc.length = 0;
        context.offlocdirty.length = 0;
        context.code.push("self.pop_stack_to("+operands[1]+");");
        context.code.push("self.pop_callstub("+operands[0]+");");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x40: function(context, operands) { /* copy */
        oputil_store(context, operands[1], operands[0]);
    },

    0x41: function(context, operands) { /* copys */
        oputil_store(context, operands[1], operands[0]);
    },

    0x42: function(context, operands) { /* copyb */
        oputil_store(context, operands[1], operands[0]);
    },

    0x44: function(context, operands) { /* sexs */
        var val;
        if (quot_isconstant(operands[0])) {
            val = Number(operands[0]);
            val = (val & 0x8000) ? ((val | 0xffff0000) >>> 0) : (val & 0xffff);
            context.code.push(operands[1]+val+");");
        }
        else {
            context.code.push(operands[1]+"("+operands[0]+" & 0x8000) ? (("+operands[0]+" | 0xffff0000) >>> 0) : ("+operands[0]+" & 0xffff));");
        }
    },

    0x45: function(context, operands) { /* sexb */
        var val;
        if (quot_isconstant(operands[0])) {
            val = Number(operands[0]);
            val = (val & 0x80) ? ((val | 0xffffff00) >>> 0) : (val & 0xff);
            context.code.push(operands[1]+val+");");
        }
        else {
            context.code.push(operands[1]+"("+operands[0]+" & 0x80) ? (("+operands[0]+" | 0xffffff00) >>> 0) : ("+operands[0]+" & 0xff));");
        }
    },

    0x48: function(context, operands) { /* aload */
        var val, addr;
        if (quot_isconstant(operands[1])) {
            if (quot_isconstant(operands[0])) {
                /* Both operands constant */
                addr = Number(operands[0]) + Number(operands[1]) * 4;
                val = "self.Mem4("+(addr >>>0)+")";
            }
            else {
                var addr = Number(operands[1]) * 4;
                if (addr)
                    val = "self.Mem4(("+operands[0]+"+"+addr+") >>>0)";
                else
                    val = "self.Mem4("+operands[0]+")";
            }
        }
        else {
            val = "self.Mem4(("+operands[0]+"+4*"+operands[1]+") >>>0)";
        }
        context.code.push(operands[2]+val+");");
    },

    0x49: function(context, operands) { /* aloads */
        var val, addr;
        if (quot_isconstant(operands[1])) {
            if (quot_isconstant(operands[0])) {
                /* Both operands constant */
                addr = Number(operands[0]) + Number(operands[1]) * 2;
                val = "self.Mem2("+(addr >>>0)+")";
            }
            else {
                var addr = Number(operands[1]) * 2;
                if (addr)
                    val = "self.Mem2(("+operands[0]+"+"+addr+") >>>0)";
                else
                    val = "self.Mem2("+operands[0]+")";
            }
        }
        else {
            val = "self.Mem2(("+operands[0]+"+2*"+operands[1]+") >>>0)";
        }
        context.code.push(operands[2]+val+");");
    },

    0x4a: function(context, operands) { /* aloadb */
        var val, addr;
        if (quot_isconstant(operands[1])) {
            if (quot_isconstant(operands[0])) {
                /* Both operands constant */
                addr = Number(operands[0]) + Number(operands[1]);
                val = "self.Mem1("+(addr >>>0)+")";
            }
            else {
                var addr = Number(operands[1]);
                if (addr)
                    val = "self.Mem1(("+operands[0]+"+"+addr+") >>>0)";
                else
                    val = "self.Mem1("+operands[0]+")";
            }
        }
        else {
            val = "self.Mem1(("+operands[0]+"+"+operands[1]+") >>>0)";
        }
        context.code.push(operands[2]+val+");");
    },

    0x4c: function(context, operands) { /* astore */
        var val, addr;
        if (quot_isconstant(operands[1])) {
            if (quot_isconstant(operands[0])) {
                /* Both operands constant */
                addr = Number(operands[0]) + Number(operands[1]) * 4;
                val = (addr >>>0)+",";
            }
            else {
                var addr = Number(operands[1]) * 4;
                if (addr)
                    val = "("+operands[0]+"+"+addr+") >>>0"+",";
                else
                    val = operands[0]+",";
            }
        }
        else {
            val = "("+operands[0]+"+4*"+operands[1]+") >>>0"+",";
        }
        context.code.push("self.MemW4("+val+operands[2]+")"+";");
    },

    0x4d: function(context, operands) { /* astores */
        var val, addr;
        if (quot_isconstant(operands[1])) {
            if (quot_isconstant(operands[0])) {
                /* Both operands constant */
                addr = Number(operands[0]) + Number(operands[1]) * 2;
                val = (addr >>>0)+",";
            }
            else {
                var addr = Number(operands[1]) * 2;
                if (addr)
                    val = "("+operands[0]+"+"+addr+") >>>0"+",";
                else
                    val = operands[0]+",";
            }
        }
        else {
            val = "("+operands[0]+"+2*"+operands[1]+") >>>0"+",";
        }
        context.code.push("self.MemW2("+val+operands[2]+")"+";");
    },

    0x4e: function(context, operands) { /* astoreb */
        var val, addr;
        if (quot_isconstant(operands[1])) {
            if (quot_isconstant(operands[0])) {
                /* Both operands constant */
                addr = Number(operands[0]) + Number(operands[1]);
                val = (addr >>>0)+",";
            }
            else {
                var addr = Number(operands[1]);
                if (addr)
                    val = "("+operands[0]+"+"+addr+") >>>0"+",";
                else
                    val = operands[0]+",";
            }
        }
        else {
            val = "("+operands[0]+"+"+operands[1]+") >>>0"+",";
        }
        context.code.push("self.MemW1("+val+operands[2]+")"+";");
    },

    0x4b: function(context, operands) { /* aloadbit */
        if (quot_isconstant(operands[1])) {
            var bitx, addrx, bitnum;
            bitnum = Number(operands[1]) & 0xffffffff; /* signed */
            bitx = bitnum & 7;
            if (quot_isconstant(operands[0])) {
                /* Generate addrx as a number. */
                addrx = Number(operands[0]);
                if (bitnum >= 0) 
                    addrx += (bitnum>>3);
                else
                    addrx -= (1+((-1-bitnum)>>3));
            }
            else {
                /* Generate addrx as an expression string. */
                if (bitnum >= 0) {
                    if (bitnum <= 7)
                        addrx = operands[0];
                    else
                        addrx = (operands[0]+"+"+(bitnum>>3));
                }
                else {
                    addrx = (operands[0]+"-"+(1+((-1-bitnum)>>3)));
                }
            }
            context.code.push(operands[2]+"(self.Mem1("+addrx+") & "+(1<<bitx)+")?1:0);");
        }
        else {
            context.varsused["bitx"] = true;
            context.varsused["addrx"] = true;
            var sign1 = oputil_signify_operand(context, operands[1], true);
            context.code.push("bitx = "+sign1+"&7;");
            context.code.push("if ("+sign1+">=0) addrx = "+operands[0]+" + ("+sign1+">>3);");
            context.code.push("else addrx = "+operands[0]+" - (1+((-1-("+sign1+"))>>3));");
            context.code.push(operands[2]+"(self.Mem1(addrx) & (1<<bitx))?1:0);");
        }
    },

    0x4f: function(context, operands) { /* astorebit */
        var bitx, addrx, mask, bitnum;
        if (quot_isconstant(operands[1])) {
            bitnum = Number(operands[1]) & 0xffffffff; /* signed */
            bitx = bitnum & 7;
            if (quot_isconstant(operands[0])) {
                /* Generate addrx as a number. */
                addrx = Number(operands[0]);
                if (bitnum >= 0) 
                    addrx += (bitnum>>3);
                else
                    addrx -= (1+((-1-bitnum)>>3));
            }
            else {
                /* Generate addrx as an expression string. */
                if (bitnum >= 0) {
                    if (bitnum <= 7)
                        addrx = operands[0];
                    else
                        addrx = (operands[0]+"+"+(bitnum>>3));
                }
                else {
                    addrx = (operands[0]+"-"+(1+((-1-bitnum)>>3)));
                }
            }
            mask = (1<<bitx);
        }
        else {
            context.varsused["bitx"] = true;
            context.varsused["addrx"] = true;
            var sign1 = oputil_signify_operand(context, operands[1], true);
            context.code.push("bitx = "+sign1+"&7;");
            context.code.push("if ("+sign1+">=0) addrx = "+operands[0]+" + ("+sign1+">>3);");
            context.code.push("else addrx = "+operands[0]+" - (1+((-1-("+sign1+"))>>3));");
            addrx = "addrx";
            mask = "(1<<bitx)";
        }
        if (quot_isconstant(operands[2])) {
            if (Number(operands[2]))
                context.code.push("self.MemW1("+addrx+", self.Mem1("+addrx+") | "+mask+");");
            else
                context.code.push("self.MemW1("+addrx+", self.Mem1("+addrx+") & ~("+mask+"));");
        }
        else {
            context.code.push("if ("+operands[2]+") self.MemW1("+addrx+", self.Mem1("+addrx+") | "+mask+");");
            context.code.push("else self.MemW1("+addrx+", self.Mem1("+addrx+") & ~("+mask+"));");
        }
    },

    0x50: function(context, operands) { /* stkcount */
        var val;
        var count = context.offstack.length;
        if (count)
            val = "self.frame.valstack.length+" + count;
        else
            val = "self.frame.valstack.length";
        oputil_store(context, operands[0], val);
    },

    0x51: function(context, operands) { /* stkpeek */
        var val;
        if (quot_isconstant(operands[0])) {
            var pos = Number(operands[0]);
            if (pos < context.offstack.length) {
                val = context.offstack[context.offstack.length-(pos+1)];
            }
            else {
                val = "self.frame.valstack[self.frame.valstack.length-"+((pos+1)-context.offstack.length)+"]";
            }
        }
        else {
            oputil_unload_offstate(context);
            val = "self.frame.valstack[self.frame.valstack.length-("+operands[0]+"+1)]";
        }
        oputil_store(context, operands[1], val);
    },

    0x52: function(context, operands) { /* stkswap */
        var temp, len;
        if (context.offstack.length < 2) {
            transfer_to_offstack(context, 2);
        }
        /* We can do this with no code. */
        len = context.offstack.length;
        temp = context.offstack[len-1];
        context.offstack[len-1] = context.offstack[len-2];
        context.offstack[len-2] = temp;
    },

    0x53: function(context, operands) { /* stkroll */
        oputil_unload_offstate(context);
        context.varsused["ix"] = true;
        context.varsused["pos"] = true;
        context.varsused["roll"] = true;
        context.varsused["vals1"] = true;
        var sign0 = oputil_signify_operand(context, operands[0], true);
        var sign1 = oputil_signify_operand(context, operands[1], true);
        context.code.push("if ("+sign0+" > 0) {");
        context.code.push("if ("+sign1+" > 0) {");
        context.code.push("vals1 = "+sign1+" % "+sign0+";");
        context.code.push("} else {");
        context.code.push("vals1 = "+sign0+" - (-("+sign1+")) % "+sign0+";");
        context.code.push("}");
        context.code.push("if (vals1) {");
        context.code.push("pos = self.frame.valstack.length - "+sign0+";");
        context.code.push("roll = self.frame.valstack.slice(self.frame.valstack.length-vals1, self.frame.valstack.length).concat(self.frame.valstack.slice(pos, self.frame.valstack.length-vals1));");
        context.code.push("for (ix=0; ix<"+sign0+"; ix++) { self.frame.valstack[pos+ix] = roll[ix]; }");
        context.code.push("roll = undefined;");
        context.code.push("}");
        context.code.push("}");
    },

    0x54: function(context, operands) { /* stkcopy */
        oputil_unload_offstate(context);
        if (quot_isconstant(operands[0])) {
            var ix, holdvar;
            var pos = Number(operands[0]);
            for (ix=0; ix<pos; ix++) {
                holdvar = alloc_holdvar(context, true);
                context.offstack.push(holdvar);
                context.code.push(holdvar+"=self.frame.valstack[self.frame.valstack.length-"+(pos-ix)+"];");
            }
        }
        else {
            context.varsused["ix"] = true;
            context.varsused["jx"] = true;
            context.code.push("jx = self.frame.valstack.length-("+operands[0]+");");
            context.code.push("for (ix=0; ix<"+operands[0]+"; ix++) { self.frame.valstack.push(self.frame.valstack[jx+ix]); }");
        }
    },

    0x100: function(context, operands) { /* gestalt */
        var expr = "self.do_gestalt(("+operands[0]+"),("+operands[1]+"))";
        context.code.push(operands[2]+expr+");");
    },

    0x101: function(context, operands) { /* debugtrap */
        context.code.push("self.fatal_error('User debugtrap encountered.', "+operands[0]+");");
    },

    0x102: function(context, operands) { /* getmemsize */
        context.code.push(operands[0]+"self.endmem);");
    },

    0x103: function(context, operands) { /* setmemsize */
        context.code.push("self.change_memsize("+operands[0]+",false);");
        /* An allocation failure is a fatal error, so we always return 
           success. */
        context.code.push(operands[1]+"0);");
    },

    0x110: function(context, operands) { /* random */
        var expr;
        /* Note that we don't trust Math.random() to be absolutely random.
           On Chrome, the last few bits aren't. That's why random(0) is
           done in two chunks. */
        if (quot_isconstant(operands[0])) {
            var val = Number(operands[0]) & 0xffffffff; /* signed */
            if (val == 0)
                expr = "(Math.floor(self.random_func() * 0x10000) | (Math.floor(self.random_func() * 0x10000) << 16)) >>>0";
            else if (val > 0)
                expr = "Math.floor(self.random_func() * "+val+")";
            else
                expr = "-Math.floor(self.random_func() * "+(-val)+")";
        }
        else {
            var sign0 = oputil_signify_operand(context, operands[0], true);
            var holdvar = alloc_holdvar(context);
            expr = holdvar;
            context.code.push("if ("+sign0+" > 0)");
            context.code.push(holdvar+" = Math.floor(self.random_func() * "+sign0+");");
            context.code.push("else if ("+sign0+" < 0)");
            context.code.push(holdvar+" = -Math.floor(self.random_func() * -"+sign0+");");
            context.code.push("else");
            context.code.push(holdvar+" = (Math.floor(self.random_func() * 0x10000) | (Math.floor(self.random_func() * 0x10000) << 16)) >>>0;");
        }
        context.code.push(operands[1]+expr+");");
    },

    0x111: function(context, operands) { /* setrandom */
        context.code.push("self.set_random(" + operands[0] + ");");
    },

    0x120: function(context, operands) { /* quit */
        /* Quash the offstack. No more execution. */
        ;;;context.code.push("// quashing offstack for quit: " + context.offstack.length); //debug
        context.offstack.length = 0;
        context.offloc.length = 0;
        context.offlocdirty.length = 0;
        context.code.push("return self.VMStopped;");
        context.path_ends = true;
    },

    0x121: function(context, operands) { /* verify */
        context.code.push(operands[0]+"self.perform_verify());");
    },

    0x122: function(context, operands) { /* restart */
        /* Quash the offstack. No more execution. */
        ;;;context.code.push("// quashing offstack for quit: " + context.offstack.length); //debug
        context.offstack.length = 0;
        context.offloc.length = 0;
        context.offlocdirty.length = 0;
        context.code.push("self.vm_restart();");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x123: function(context, operands) { /* save */
        oputil_unload_offstate(context);
        context.varsused["ix"] = true;
        oputil_push_callstub(context, operands[1]);
        context.code.push("ix = self.vm_save("+operands[0]+");");
        context.code.push("self.pop_callstub(ix ? 0 : 1);");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x124: function(context, operands) { /* restore */
        oputil_unload_offstate(context);
        context.code.push("if (self.vm_restore("+operands[0]+")) {");
        /* Succeeded. Pop the call stub that save pushed, using -1
           to indicate success. */
        context.code.push("self.pop_callstub((-1)>>>0);");
        context.code.push("} else {");
        /* Failed to restore. Put back the PC, in case it got overwritten. */
        oputil_store(context, operands[1], "1");
        oputil_unload_offstate(context); // again
        context.code.push("self.pc = "+context.cp+";");
        context.code.push("}");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x125: function(context, operands) { /* saveundo */
        oputil_unload_offstate(context);
        oputil_push_callstub(context, operands[0]);
        context.code.push("self.vm_saveundo();");
        /* Any failure was a fatal error, so we return success. */
        context.code.push("self.pop_callstub(0);");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x126: function(context, operands) { /* restoreundo */
        oputil_unload_offstate(context);
        context.code.push("if (self.vm_restoreundo()) {");
        /* Succeeded. Pop the call stub that saveundo pushed, using -1
           to indicate success. */
        context.code.push("self.pop_callstub((-1)>>>0);");
        context.code.push("} else {");
        /* Failed to restore. Put back the PC, in case it got overwritten. */
        oputil_store(context, operands[0], "1");
        oputil_unload_offstate(context); // again
        context.code.push("self.pc = "+context.cp+";");
        context.code.push("}");
        context.code.push("return;");
        context.path_ends = true;
    },

    0x127: function(context, operands) { /* protect */
        context.code.push("self.protectstart="+operands[0]+";");
        context.code.push("self.protectend=self.protectstart+("+operands[1]+");");
        context.code.push("if (self.protectstart==self.protectend) {")
        context.code.push("  self.protectstart=0; self.protectend=0;");
        context.code.push("}");
    },

    0x170: function(context, operands) { /* mzero */
        context.varsused["maddr"] = true;
        context.varsused["mlen"] = true;
        context.varsused["ix"] = true;
        context.code.push("mlen="+operands[0]+";");
        context.code.push("maddr="+operands[1]+";");
        context.code.push("for (ix=0; ix<mlen; ix++, maddr++) self.MemW1(maddr, 0);");
    },

    0x171: function(context, operands) { /* mcopy */
        context.varsused["msrc"] = true;
        context.varsused["mdest"] = true;
        context.varsused["mlen"] = true;
        context.varsused["ix"] = true;
        context.code.push("mlen="+operands[0]+";");
        context.code.push("msrc="+operands[1]+";");
        context.code.push("mdest="+operands[2]+";");

        /* This could be optimized for the case where mlen is constant.
           But for a rarely-used opcode, it's not really worth it. 
        */
        context.code.push("if (mdest < msrc) {");
        context.code.push("for (ix=0; ix<mlen; ix++, msrc++, mdest++) self.MemW1(mdest, self.Mem1(msrc));");
        context.code.push("} else {");
        context.code.push("msrc += (mlen-1); mdest += (mlen-1);");
        context.code.push("for (ix=0; ix<mlen; ix++, msrc--, mdest--) self.MemW1(mdest, self.Mem1(msrc));");
        context.code.push("}");
    },

    0x178: function(context, operands) { /* malloc */
        var expr = "self.heap_malloc("+operands[0]+")";
        context.code.push(operands[1]+expr+");");
        ;;;context.code.push("self.assert_heap_valid();"); //assert
    },
    
    0x179: function(context, operands) { /* mfree */
        context.code.push("self.heap_free("+operands[0]+");");
        ;;;context.code.push("self.assert_heap_valid();"); //assert
    },

    0x180: function(context, operands) { /* accelfunc */
        context.code.push("self.accel_funcnum_map["+operands[1]+"] = "+operands[0]+";");
        context.code.push("self.accel_address_map["+operands[1]+"] = self.accel_func_map["+operands[0]+"];");
    },
    
    0x181: function(context, operands) { /* accelparam */
        context.code.push("if ("+operands[0]+" < 9) {");
        context.code.push("  self.accel_params["+operands[0]+"] = "+operands[1]+";");
        context.code.push("}");
    },
    

    0x150: function(context, operands) { /* linearsearch */
        var expr = "self.linear_search(("+operands[0]+"),("+operands[1]+"),("+operands[2]+"),("+operands[3]+"),("+operands[4]+"),("+operands[5]+"),("+operands[6]+"))";
        context.code.push(operands[7]+expr+");");
    },

    0x151: function(context, operands) { /* binarysearch */
        var expr = "self.binary_search(("+operands[0]+"),("+operands[1]+"),("+operands[2]+"),("+operands[3]+"),("+operands[4]+"),("+operands[5]+"),("+operands[6]+"))";
        context.code.push(operands[7]+expr+");");
    },

    0x152: function(context, operands) { /* linkedsearch */
        var expr = "self.linked_search(("+operands[0]+"),("+operands[1]+"),("+operands[2]+"),("+operands[3]+"),("+operands[4]+"),("+operands[5]+"))";
        context.code.push(operands[6]+expr+");");
    },

    0x70: function(context, operands) { /* streamchar */
        switch (context.curiosys) {
        case 2: /* glk */
            if (quot_isconstant(operands[0])) {
                var val = Number(operands[0]) & 0xff;
                context.code.push("Glk.glk_put_char("+val+");");
            }
            else {
                context.code.push("Glk.glk_put_char(("+operands[0]+")&0xff);");
            }
            break;
        case 1: /* filter */
            oputil_unload_offstate(context);
            context.code.push("self.tempcallargs[0]=(("+operands[0]+")&0xff);");
            oputil_push_callstub(context, "0,0");
            context.code.push("self.enter_function(self.iosysrock, 1);");
            context.code.push("return;");
            context.path_ends = true;
            break;
        case 0: /* null */
            ;;;context.code.push("// null streamchar " + operands[0]); //debug
            break;
        }
    },

    0x71: function(context, operands) { /* streamnum */
        switch (context.curiosys) {
        case 2: /* glk */
            var sign0 = oputil_signify_operand(context, operands[0]);
            if (quot_isconstant(operands[0])) {
                var val = Number(sign0).toString(10);
                context.code.push("Glk.glk_put_jstring("+QuoteEscapeString(val)+", true);");
            }
            else {
                context.code.push("Glk.glk_put_jstring(("+sign0+").toString(10), true);");
            }
            break;
        case 1: /* filter */
            oputil_unload_offstate(context);
            context.code.push("self.stream_num("+context.cp+","+operands[0]+", false, 0);");
            /* stream_num always creates a new frame in filter mode. */
            context.code.push("return;");
            context.path_ends = true;
            break;
        case 0: /* null */
            ;;;context.code.push("// null streamnum " + operands[0]); //debug
            break;
        }
    },

    0x72: function(context, operands) { /* streamstr */
        /* It would be nice to determine at compile-time whether the
           value is a (cacheable) simple string value. In that case, we
           could throw it into glk_put_jstring and continue -- no need
           to unload the offstack or return. (Or, of the value is 
           determined to be a function, we can unload and return.)
        */
        oputil_unload_offstate(context);
        context.code.push("if (self.stream_string("+context.cp+","+operands[0]+", 0, 0)) return;");
    },

    0x73: function(context, operands) { /* streamunichar */
        switch (context.curiosys) {
        case 2: /* glk */
            if (quot_isconstant(operands[0])) {
                var val = Number(operands[0]);
                context.code.push("Glk.glk_put_char_uni("+val+");");
            }
            else {
                context.code.push("Glk.glk_put_char_uni("+operands[0]+");");
            }
            break;
        case 1: /* filter */
            oputil_unload_offstate(context);
            context.code.push("self.tempcallargs[0]=("+operands[0]+");");
            oputil_push_callstub(context, "0,0");
            context.code.push("self.enter_function(self.iosysrock, 1);");
            context.code.push("return;");
            context.path_ends = true;
            break;
        case 0: /* null */
            ;;;context.code.push("// null streamchar " + operands[0]); //debug
            break;
        }
    },

    0x140: function(context, operands) { /* getstringtbl */
        context.code.push(operands[0]+"self.stringtable)");
    },

    0x141: function(context, operands) { /* setstringtbl */
        context.code.push("self.set_string_table("+operands[0]+");");
    },

    0x148: function(context, operands) { /* getiosys */
        context.code.push(operands[0]+"self.iosysmode)");
        context.code.push(operands[1]+"self.iosysrock)");
    },

    0x149: function(context, operands) { /* setiosys */
        context.code.push("self.set_iosys("+operands[0]+","+operands[1]+");");
        if (quot_isconstant(operands[0])) {
            var val = Number(operands[0]);
            context.curiosys = val;
        }
        else {
            /* We can't compile with an unknown iosysmode. So, stop 
               compiling. */
            oputil_unload_offstate(context);
            context.code.push("self.pc = "+context.cp+";");
            context.code.push("return;");
            context.path_ends = true;
        }
    },

    0x190: function(context, operands) { /* numtof */
        var sign0 = oputil_signify_operand(context, operands[0]);
        if (quot_isconstant(operands[0])) {
            var val = Number(sign0);
            context.code.push(operands[1]+encode_float(val)+");");
        }
        else {
            context.code.push(operands[1]+"self.encode_float("+sign0+"));");
        }
    },

    0x191: function(context, operands) { /* ftonumz */
        context.varsused["valf"] = true;
        context.varsused["res"] = true;
        context.code.push("valf = "+oputil_decode_float(context, operands[0])+";");
        context.code.push("if (!("+operands[0]+" & 0x80000000)) {");
        context.code.push("  if (isNaN(valf) || !isFinite(valf) || (valf > 0x7fffffff))");
        context.code.push("    res = 0x7fffffff;");
        context.code.push("  else");
        context.code.push("    res = Math.floor(valf);");
        context.code.push("} else {");
        context.code.push("  if (isNaN(valf) || !isFinite(valf) || (valf < -0x80000000))");
        context.code.push("    res = -0x80000000;");
        context.code.push("  else");
        context.code.push("    res = Math.ceil(valf);");
        context.code.push("}");
        context.code.push(operands[1]+"res>>>0);");
    },

    0x192: function(context, operands) { /* ftonumn */
        context.varsused["valf"] = true;
        context.varsused["res"] = true;
        context.code.push("valf = "+oputil_decode_float(context, operands[0])+";");
        context.code.push("if (!("+operands[0]+" & 0x80000000)) {");
        context.code.push("  if (isNaN(valf) || !isFinite(valf))");
        context.code.push("    res = 0x7fffffff;");
        context.code.push("  else");
        context.code.push("    res = Math.round(valf);");
        context.code.push("  if (res > 0x7fffffff) res = 0x7fffffff;");
        context.code.push("} else {");
        context.code.push("  if (isNaN(valf) || !isFinite(valf))");
        context.code.push("    res = -0x80000000;");
        context.code.push("  else");
        context.code.push("    res = Math.round(valf);");
        context.code.push("  if (res < -0x80000000) res = -0x80000000;");
        context.code.push("}");
        context.code.push(operands[1]+"res>>>0);");
    },

    0x198: function(context, operands) { /* ceil */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.ceil("+valf+")));");
    },

    0x199: function(context, operands) { /* floor */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.floor("+valf+")));");
    },

    0x1A0: function(context, operands) { /* fadd */
        var valf0 = oputil_decode_float(context, operands[0]);
        var valf1 = oputil_decode_float(context, operands[1]);
        context.code.push(operands[2]+"self.encode_float("+valf0+" + "+valf1+"));");
    },

    0x1A1: function(context, operands) { /* fsub */
        var valf0 = oputil_decode_float(context, operands[0]);
        var valf1 = oputil_decode_float(context, operands[1]);
        context.code.push(operands[2]+"self.encode_float("+valf0+" - "+valf1+"));");
    },

    0x1A2: function(context, operands) { /* fmul */
        var valf0 = oputil_decode_float(context, operands[0]);
        var valf1 = oputil_decode_float(context, operands[1]);
        context.code.push(operands[2]+"self.encode_float("+valf0+" * "+valf1+"));");
    },

    0x1A3: function(context, operands) { /* fdiv */
        var valf0 = oputil_decode_float(context, operands[0]);
        var valf1 = oputil_decode_float(context, operands[1]);
        context.code.push(operands[2]+"self.encode_float("+valf0+" / "+valf1+"));");
    },

    0x1A4: function(context, operands) { /* fmod */
        var valf0 = oputil_decode_float(context, operands[0], true);
        var valf1 = oputil_decode_float(context, operands[1], true);
        context.varsused["modv"] = true;
        context.varsused["quov"] = true;
        context.code.push("modv=("+valf0+" % "+valf1+");");
        context.code.push("quov=self.encode_float(("+valf0+" - modv) / "+valf1+");");
        context.code.push("if (quov == 0x0 || quov == 0x80000000) {");
        /* When the quotient is zero, the sign has been lost in the
           shuffle. We'll set that by hand, based on the original
           arguments. */
        context.code.push("  quov = (("+operands[0]+" ^ "+operands[1]+") & 0x80000000) >>>0;");
        context.code.push("}");
        context.code.push(operands[2]+"self.encode_float(modv));");
        context.code.push(operands[3]+"quov);");
    },

    0x1A8: function(context, operands) { /* sqrt */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.sqrt("+valf+")));");
    },

    0x1A9: function(context, operands) { /* exp */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.exp("+valf+")));");
    },

    0x1AA: function(context, operands) { /* log */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.log("+valf+")));");
    },

    0x1AB: function(context, operands) { /* pow */
        context.varsused["valf"] = true;
        var valf0 = oputil_decode_float(context, operands[0], true);
        var valf1 = oputil_decode_float(context, operands[1], true);
        context.code.push("if ("+operands[0]+" == 0x3f800000) {");
        /* pow(1, anything) is 1 */
        context.code.push("  valf = 0x3f800000;");
        context.code.push("} else if ("+operands[0]+" == 0xbf800000 && ("+operands[1]+" == 0xff800000 || "+operands[1]+" == 0x7f800000)) {");
        /* pow(-1, infinity) is 1 */
        context.code.push("  valf = 0x3f800000;");
        context.code.push("} else {");
        context.code.push("  valf=self.encode_float(Math.pow("+valf0+", "+valf1+"));");
        context.code.push("}");
        context.code.push(operands[2]+"valf);");
    },

    0x1B0: function(context, operands) { /* sin */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.sin("+valf+")));");
    },

    0x1B1: function(context, operands) { /* cos */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.cos("+valf+")));");
    },

    0x1B2: function(context, operands) { /* tan */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.tan("+valf+")));");
    },

    0x1B3: function(context, operands) { /* asin */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.asin("+valf+")));");
    },

    0x1B4: function(context, operands) { /* acos */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.acos("+valf+")));");
    },

    0x1B5: function(context, operands) { /* atan */
        var valf = oputil_decode_float(context, operands[0]);
        context.code.push(operands[1]+"self.encode_float(Math.atan("+valf+")));");
    },

    0x1B6: function(context, operands) { /* atan2 */
        var valf0 = oputil_decode_float(context, operands[0]);
        var valf1 = oputil_decode_float(context, operands[1]);
        context.code.push(operands[2]+"self.encode_float(Math.atan2("+valf0+", "+valf1+")));");
    },

    0x1C0: function(context, operands) { /* jfeq */
        var val, valf0, valf1, valf2;
        context.varsused["fequal"] = true;
        context.varsused["fdiff"] = true;
        context.code.push("if (("+operands[2]+" & 0x7f800000) == 0x7f800000 && ("+operands[2]+" & 0x007fffff) != 0) {");
        /* The delta is NaN, which can never match. */
        context.code.push("  fequal = 0;");
        context.code.push("} else if (("+operands[0]+" == 0xff800000 || "+operands[0]+" == 0x7f800000) && ("+operands[1]+" == 0xff800000 || "+operands[1]+" == 0x7f800000)) {");
        /* Both are infinite. Opposite infinities are never equal,
           even if the difference is infinite, so this is easy. */
        context.code.push("  fequal = ("+operands[0]+" == "+operands[1]+");");
        context.code.push("} else {");
        /* The other case: the values are not both infinite. */
        if (quot_isconstant(operands[2])) {
            val = Number(operands[2]);
            valf2 = "" + decode_float(val & 0x7fffffff);
        }
        else {
            val = "self.decode_float(("+operands[2]+") & 0x7fffffff)";
            valf2 = alloc_holdvar(context);
            context.code.push(valf2+"="+val+";");
        }
        valf0 = oputil_decode_float(context, operands[0]);
        valf1 = oputil_decode_float(context, operands[1]);
        context.code.push("  fdiff = "+valf1+" - "+valf0+";");
        context.code.push("  fequal = (fdiff <= "+valf2+" && fdiff >= -("+valf2+"));");
        context.code.push("}");
        context.code.push("if (fequal) {");
        oputil_perform_jump(context, operands[3]);
        context.code.push("}");
    },

    0x1C1: function(context, operands) { /* jfne */
        var val, valf0, valf1, valf2;
        context.varsused["fequal"] = true;
        context.varsused["fdiff"] = true;
        context.code.push("if (("+operands[2]+" & 0x7f800000) == 0x7f800000 && ("+operands[2]+" & 0x007fffff) != 0) {");
        /* The delta is NaN, which can never match. */
        context.code.push("  fequal = 0;");
        context.code.push("} else if (("+operands[0]+" == 0xff800000 || "+operands[0]+" == 0x7f800000) && ("+operands[1]+" == 0xff800000 || "+operands[1]+" == 0x7f800000)) {");
        /* Both are infinite. Opposite infinities are never equal,
           even if the difference is infinite, so this is easy. */
        context.code.push("  fequal = ("+operands[0]+" == "+operands[1]+");");
        context.code.push("} else {");
        /* The other case: the values are not both infinite. */
        if (quot_isconstant(operands[2])) {
            val = Number(operands[2]);
            valf2 = "" + decode_float(val & 0x7fffffff);
        }
        else {
            val = "self.decode_float(("+operands[2]+") & 0x7fffffff)";
            valf2 = alloc_holdvar(context);
            context.code.push(valf2+"="+val+";");
        }
        valf0 = oputil_decode_float(context, operands[0]);
        valf1 = oputil_decode_float(context, operands[1]);
        context.code.push("  fdiff = "+valf1+" - "+valf0+";");
        context.code.push("  fequal = (fdiff <= "+valf2+" && fdiff >= -("+valf2+"));");
        context.code.push("}");
        context.code.push("if (!fequal) {");
        oputil_perform_jump(context, operands[3]);
        context.code.push("}");
    },

    0x1C2: function(context, operands) { /* jflt */
        valf0 = oputil_decode_float(context, operands[0]);
        valf1 = oputil_decode_float(context, operands[1]);
        context.code.push("if ("+valf0+" < "+valf1+") {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x1C3: function(context, operands) { /* jfle */
        valf0 = oputil_decode_float(context, operands[0]);
        valf1 = oputil_decode_float(context, operands[1]);
        context.code.push("if ("+valf0+" <= "+valf1+") {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x1C4: function(context, operands) { /* jfgt */
        valf0 = oputil_decode_float(context, operands[0]);
        valf1 = oputil_decode_float(context, operands[1]);
        context.code.push("if ("+valf0+" > "+valf1+") {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x1C5: function(context, operands) { /* jfge */
        valf0 = oputil_decode_float(context, operands[0]);
        valf1 = oputil_decode_float(context, operands[1]);
        context.code.push("if ("+valf0+" >= "+valf1+") {");
        oputil_perform_jump(context, operands[2]);
        context.code.push("}");
    },

    0x1C8: function(context, operands) { /* jisnan */
        context.code.push("if (("+operands[0]+" & 0x7f800000) == 0x7f800000 && ("+operands[0]+" & 0x007fffff) != 0) {");
        oputil_perform_jump(context, operands[1]);
        context.code.push("}");
    },

    0x1C9: function(context, operands) { /* jisinf */
        context.code.push("if ("+operands[0]+" == 0xff800000 || "+operands[0]+" == 0x7f800000) {");
        oputil_perform_jump(context, operands[1]);
        context.code.push("}");
    },

    0x130: function(context, operands) { /* glk */
        var mayblock;
        if (quot_isconstant(operands[0]))
            mayblock = Glk.call_may_not_return(Number(operands[0]));
        else
            mayblock = true;
        if (mayblock) {
            context.code.push("  self.prevpc = "+context.prevcp+";");
            context.code.push("  self.pc = "+context.cp+";");
        }
        context.code.push("self.tempglkargs.length = " + operands[1] + ";");
        if (quot_isconstant(operands[1])) {
            var ix;
            var argc = Number(operands[1]);
            for (ix=0; ix<argc; ix++) {
                if (context.offstack.length) {
                    var holdvar = pop_offstack_holdvar(context);
                    context.code.push("self.tempglkargs["+ix+"]="+holdvar+";");
                }
                else {
                    context.code.push("self.tempglkargs["+ix+"]=self.frame.valstack.pop();");
                }
            }
            oputil_unload_offstate(context);
        }
        else {
            context.varsused["ix"] = true;
            oputil_unload_offstate(context);
            context.code.push("for (ix=0; ix<"+operands[1]+"; ix++) { self.tempglkargs[ix]=self.frame.valstack.pop(); }");
        }
        /* In the blocking case, we don't perform a normal store; we write a
           literal form of operands[2] into a global and get out. Fortunately
           we just unloaded the offstack. The non-blocking case is a normal
           store. */
        context.varsused["glkret"] = true;
        context.code.push("glkret = GiDispa.get_function("+operands[0]+")(self.tempglkargs);");
        if (mayblock) {
            context.code.push("if (glkret === Glk.DidNotReturn) {");
            context.code.push("  self.resumefuncop = "+oputil_record_funcop(operands[2])+";");
            context.code.push("  self.resumevalue = 0;");
            context.code.push("  self.pc = "+context.cp+";");
            context.code.push("  self.done_executing = true;");
            context.code.push("  return;");
            context.code.push("}");
        }
        oputil_store(context, operands[2], "glkret");
    }
}

/* Select a currently-unused "_hold*" variable, and mark it used. 
   If use is true, it's marked "1", meaning it's going onto the offstack
   or offloc. 
*/
function alloc_holdvar(context, use) {
    var ix = 0;
    var key;
    while (true) {
        key = "_hold" + ix;
        if (!context.holduse[key]) {
            context.holduse[key] = (use ? 1 : true);
            return key;
        }
        ix++;
    }
}

/* Remove a value from the offstack. If it is a constant, return it. If it 
   is a _hold var, mark it as not used by the offstack any more, and return 
   it (now a temporary holdvar). 
   (Do not call this if the offstack is empty.)
*/
function pop_offstack_holdvar(context) {
    var holdvar = context.offstack.pop();
    if (quot_isconstant(holdvar)) {
        return holdvar;
    }

    var use = context.holduse[holdvar];
    ;;;if (isNaN(use) || use === false || use === true) {
    ;;;    fatal_error("Offstack variable not marked as stack.", holdvar); //assert
    ;;;}
    use--;
    if (use == 0)
        use = true; // Not on the stack any more
    context.holduse[holdvar] = use;
    return holdvar;
}

/* Push a variable value onto the offstack. (This must be a holdvar, not
   a constant or expression.) Mark it as used an additional time by the
   offstate.
*/
function push_offstack_holdvar(context, holdvar) {
    context.offstack.push(holdvar);

    var use = context.holduse[holdvar];
    if (!use || use === true)
        use = 1;
    else
        use++;
    context.holduse[holdvar] = use;
}

/* Push a constant or holdvar into the offloc array. Reduce the usage of
   the holdvar already there, if there was one. If inchold is true,
   increase the usage of the new holdvar. (Only set this if value *is*
   a holdvar, and if you haven't already set its use.)

   If value is undefined, this erases the entry in the offloc array,
   instead.
*/
function store_offloc_value(context, addr, value, inchold) {
    var oldvar = context.offloc[addr];
    if (oldvar && quot_isholdvar(oldvar)) {
        var use = context.holduse[oldvar];
        use--;
        if (use == 0)
            use = true; // Not on the offloc any more
        context.holduse[oldvar] = use;
    }

    if (value === undefined) {
        context.offloc[addr] = undefined;
        context.offlocdirty[addr] = false;
        return;
    }

    context.offloc[addr] = value;
    context.offlocdirty[addr] = true;

    if (inchold) {
        var holdvar = value;
        var use = context.holduse[holdvar];
        if (!use || use === true)
            use = 1;
        else
            use++;
        context.holduse[holdvar] = use;
    }
}

/* Transfer values from the real stack to the offstack until there are at
   least count on the offstack. (Do not call this if there are insufficient
   values on the real stack.)
*/
function transfer_to_offstack(context, count) {
    var holdvar;
    while (context.offstack.length < count) {
        holdvar = alloc_holdvar(context, true);
        context.offstack.unshift(holdvar);
        context.code.push(holdvar+"=self.frame.valstack.pop();");
    }
}

/* Check whether a quoted value is a constant. */
function quot_isconstant(val) {
    return (val[0] === "0");
}

/* Check whether a quoted value is a holdvar. */
function quot_isholdvar(val) {
    return (val[0] === "_");
}

/* Read the list of operands of an instruction, and put accessor code
   in operands. This assumes that the CP is at the beginning of the
   operand mode list (right after an opcode number.) Upon return,
   the CP will be at the beginning of the next instruction.

   The results go into operands[0], operands[1], etc. But these are not
   the values themselves; what you get are JS expressions which will
   generate them. The opcode handlers then insert these expressions
   into the code being generated.

   (At this stage, operands are always unsigned integers. A constant
   -1 comes out as "0xffffffff".)

   What you get depends on the operand type. The Glulx spec just
   has Load and Store operands, but this function handles a couple of
   variations.

   Load operand types:

   "E" (expression): The returned value is an arbitrary expression. It
   may have side effects, so the opcode handler must use the expression
   exactly once. If there are several "E" operands, the handler must
   use them in order.
   
   "L" (load): The returned value is either a numeric constant or a
   "_holdN" temporary variable. In the latter case, a line of the form
   "_holdN = EXPRESSION" has been inserted into the generated code
   (before the opcode handler's code). This is more expensive than
   "E", but safer, because the value will not have side effects.

   (Conveniently, "E" and "L" values can be categorized by their first
   character. Constants begin with "0"; temporary variables begin with
   "_"; anything else is a more complex expression.)

   Store operand types:

   "F" (function): The returned value is an object. When this is passed
   to oputil_store(), it will generate code to store the value. (Do not
   use more than one "F" per opcode.)

   "S" (store): The returned value is an expression of the form "FUNC(".
   Any expression can be appended, with a close-paren, to store a value
   in the desired place. This is faster than "F", but less flexible;
   it messes with the offstack in a confusing way, and also can't treat
   constants specially.

   "C" (callstub): The returned value is an expression of the form 
   "desttype,destaddr" -- two of the values in a Glulx call stub. The
   oputil_push_callstub() function knows how to generate code that pushes
   a call stub, if you pass these values in.
   
*/
function parse_operands(context, cp, oplist, operands) {
    var modeaddr;
    var ix, modeval, mode;
    var value, addr;
    var holdvar;

    operands.desttype = 0;
    operands.numops = oplist.numops;

    modeaddr = cp;
    cp += ((oplist.numops+1) >> 1);

    for (ix=0; ix<oplist.numops; ix++) {
        if ((ix & 1) == 0) {
            modeval = Mem1(modeaddr);
            mode = (modeval & 0x0F);
        }
        else {
            mode = ((modeval >> 4) & 0x0F);
            modeaddr++;
        }

        var optype = oplist.formlist[ix];

        if (optype == "L") {
            switch (mode) {

            case 8: /* pop off stack */
                if (context.offstack.length) {
                    operands[ix] = pop_offstack_holdvar(context);
                }
                else {
                    holdvar = alloc_holdvar(context);
                    context.code.push(holdvar+"=self.frame.valstack.pop();");
                    operands[ix] = holdvar;
                }
                continue;
                
            case 0: /* constant zero */
                operands[ix] = "0";
                continue;
                
            case 1: /* one-byte constant */
                /* Sign-extend from 8 bits to 32 */
                value = QuoteMem1(cp);
                cp++;
                operands[ix] = value;
                continue;
                
            case 2: /* two-byte constant */
                /* Sign-extend the first byte from 8 bits to 32; the subsequent
                   byte must not be sign-extended. */
                value = QuoteMem2(cp);
                cp += 2;
                operands[ix] = value;
                continue;
                
            case 3: /* four-byte constant */
                /* Bytes must not be sign-extended. */
                value = QuoteMem4(cp);
                cp += 4;
                operands[ix] = value;
                continue;
            }

            if (mode >= 9 && mode <= 11) {
                if (mode == 9) {
                    addr = Mem1(cp);
                    cp++;
                }
                else if (mode == 10) {
                    addr = Mem2(cp);
                    cp += 2;
                }
                else if (mode == 11) {
                    addr = Mem4(cp);
                    cp += 4;
                }

                if (context.offloc[addr] !== undefined) {
                    operands[ix] = context.offloc[addr];
                    continue;
                }

                if (oplist.argsize == 4) {
                    value = "self.frame.locals["+addr+"]";
                }
                else if (oplist.argsize == 2) {
                    value = "self.frame.locals["+addr+"] & 0xffff";
                }
                else {
                    value = "self.frame.locals["+addr+"] & 0xff";
                }
                holdvar = alloc_holdvar(context, true);
                context.code.push(holdvar+"=("+value+");");
                context.offloc[addr] = holdvar;
                context.offlocdirty[addr] = false;
                operands[ix] = holdvar;
                continue;
            }

            switch (mode) {
            case 15: /* main memory RAM, four-byte address */
                addr = Mem4(cp) + ramstart;
                cp += 4;
                break; 

            case 14: /* main memory RAM, two-byte address */
                addr = Mem2(cp) + ramstart;
                cp += 2;
                break; 

            case 13: /* main memory RAM, one-byte address */
                addr = Mem1(cp) + ramstart;
                cp++;
                break; 
        
            case 7: /* main memory, four-byte address */
                addr = Mem4(cp);
                cp += 4;
                break;

            case 6: /* main memory, two-byte address */
                addr = Mem2(cp);
                cp += 2;
                break;

            case 5: /* main memory, one-byte address */
                addr = Mem1(cp);
                cp++;
                break;

            default:
                fatal_error("Unknown addressing mode in load operand.");
            }

            /* The main-memory cases. */
            if (oplist.argsize == 4) {
                value = "self.Mem4("+addr+")";
            }
            else if (oplist.argsize == 2) {
                value = "self.Mem2("+addr+")";
            }
            else {
                value = "self.Mem1("+addr+")";
            }
            holdvar = alloc_holdvar(context);
            context.code.push(holdvar+"=("+value+");");
            operands[ix] = holdvar;
            continue;

        }
        else if (optype == "E") {
            switch (mode) {

            case 8: /* pop off stack */
                if (context.offstack.length) {
                    operands[ix] = pop_offstack_holdvar(context);
                }
                else {
                    operands[ix] = "self.frame.valstack.pop()";
                }
                continue;
                
            case 0: /* constant zero */
                operands[ix] = "0";
                continue;
                
            case 1: /* one-byte constant */
                /* Sign-extend from 8 bits to 32 */
                value = QuoteMem1(cp);
                cp++;
                operands[ix] = value;
                continue;
                
            case 2: /* two-byte constant */
                /* Sign-extend the first byte from 8 bits to 32; the subsequent
                   byte must not be sign-extended. */
                value = QuoteMem2(cp);
                cp += 2;
                operands[ix] = value;
                continue;
                
            case 3: /* four-byte constant */
                /* Bytes must not be sign-extended. */
                value = QuoteMem4(cp);
                cp += 4;
                operands[ix] = value;
                continue;
            }

            if (mode >= 9 && mode <= 11) {
                if (mode == 9) {
                    addr = Mem1(cp);
                    cp++;
                }
                else if (mode == 10) {
                    addr = Mem2(cp);
                    cp += 2;
                }
                else if (mode == 11) {
                    addr = Mem4(cp);
                    cp += 4;
                }

                if (context.offloc[addr] !== undefined) {
                    operands[ix] = context.offloc[addr];
                    continue;
                }

                if (oplist.argsize == 4) {
                    value = "self.frame.locals["+addr+"]";
                }
                else if (oplist.argsize == 2) {
                    value = "self.frame.locals["+addr+"] & 0xffff";
                }
                else {
                    value = "self.frame.locals["+addr+"] & 0xff";
                }
                holdvar = alloc_holdvar(context, true);
                context.code.push(holdvar+"=("+value+");");
                context.offloc[addr] = holdvar;
                context.offlocdirty[addr] = false;
                operands[ix] = holdvar;
                continue;
            }

            switch (mode) {
            case 15: /* main memory RAM, four-byte address */
                addr = Mem4(cp) + ramstart;
                cp += 4;
                break; 

            case 14: /* main memory RAM, two-byte address */
                addr = Mem2(cp) + ramstart;
                cp += 2;
                break; 

            case 13: /* main memory RAM, one-byte address */
                addr = Mem1(cp) + ramstart;
                cp++;
                break; 
        
            case 7: /* main memory, four-byte address */
                addr = Mem4(cp);
                cp += 4;
                break;

            case 6: /* main memory, two-byte address */
                addr = Mem2(cp);
                cp += 2;
                break;

            case 5: /* main memory, one-byte address */
                addr = Mem1(cp);
                cp++;
                break;

            default:
                fatal_error("Unknown addressing mode in load operand.");
            }

            /* The main-memory cases. */
            if (oplist.argsize == 4) {
                value = "self.Mem4("+addr+")";
            }
            else if (oplist.argsize == 2) {
                value = "self.Mem2("+addr+")";
            }
            else {
                value = "self.Mem1("+addr+")";
            }
            operands[ix] = value;
            continue;

        }
        else if (optype == "S") {
            switch (mode) {

            case 8: /* push on stack */
                /* Not on the actual stack, yet, but on the offstack. */
                holdvar = alloc_holdvar(context, true);
                context.offstack.push(holdvar);
                operands[ix] = holdvar+"=(";
                continue;
                
            case 0: /* discard value */
                operands[ix] = "(";
                continue;
            }
                
            if (mode >= 9 && mode <= 11) {
                if (mode == 9) {
                    addr = Mem1(cp);
                    cp++;
                }
                else if (mode == 10) {
                    addr = Mem2(cp);
                    cp += 2;
                }
                else if (mode == 11) {
                    addr = Mem4(cp);
                    cp += 4;
                }
                
                /* The local-variable cases. */
                if (oplist.argsize == 4) {
                    holdvar = alloc_holdvar(context, true);
                    store_offloc_value(context, addr, holdvar, false);
                    operands[ix] = holdvar+"=(";
                }
                else if (oplist.argsize == 2) {
                    store_offloc_value(context, addr, undefined);
                    operands[ix] = "self.frame.locals["+addr+"]=(0xffff &";
                }
                else {
                    store_offloc_value(context, addr, undefined);
                    operands[ix] = "self.frame.locals["+addr+"]=(0xff &";
                }
                continue;
            }

            switch (mode) {
            case 15: /* main memory RAM, four-byte address */
                addr = Mem4(cp) + ramstart;
                cp += 4;
                break; 

            case 14: /* main memory RAM, two-byte address */
                addr = Mem2(cp) + ramstart;
                cp += 2;
                break; 

            case 13: /* main memory RAM, one-byte address */
                addr = Mem1(cp) + ramstart;
                cp++;
                break; 
        
            case 7: /* main memory, four-byte address */
                addr = Mem4(cp);
                cp += 4;
                break;

            case 6: /* main memory, two-byte address */
                addr = Mem2(cp);
                cp += 2;
                break;

            case 5: /* main memory, one-byte address */
                addr = Mem1(cp);
                cp++;
                break;

            default:
                fatal_error("Unknown addressing mode in store operand.");
            }

            /* The main-memory cases. */
            if (oplist.argsize == 4) {
                value = "self.MemW4("+addr+",";
            }
            else if (oplist.argsize == 2) {
                value = "self.MemW2("+addr+",";
            }
            else {
                value = "self.MemW1("+addr+",";
            }
            operands[ix] = value;
            continue;
        }
        else if (optype == "F") {
            var funcop = operands.func_store;

            switch (mode) {

            case 8: /* push on stack */
                funcop.mode = 8;
                funcop.argsize = oplist.argsize;
                operands[ix] = funcop;
                continue;
                
            case 0: /* discard value */
                funcop.mode = 0;
                funcop.argsize = oplist.argsize;
                operands[ix] = funcop;
                continue;
            }
                
            if (mode >= 9 && mode <= 11) {
                if (mode == 9) {
                    addr = Mem1(cp);
                    cp++;
                }
                else if (mode == 10) {
                    addr = Mem2(cp);
                    cp += 2;
                }
                else if (mode == 11) {
                    addr = Mem4(cp);
                    cp += 4;
                }
                
                /* The local-variable cases. */
                funcop.mode = 11;
                funcop.addr = addr;
                funcop.argsize = oplist.argsize;
                operands[ix] = funcop;
                continue;
            }

            switch (mode) {
            case 15: /* main memory RAM, four-byte address */
                addr = Mem4(cp) + ramstart;
                cp += 4;
                break; 

            case 14: /* main memory RAM, two-byte address */
                addr = Mem2(cp) + ramstart;
                cp += 2;
                break; 

            case 13: /* main memory RAM, one-byte address */
                addr = Mem1(cp) + ramstart;
                cp++;
                break; 
        
            case 7: /* main memory, four-byte address */
                addr = Mem4(cp);
                cp += 4;
                break;

            case 6: /* main memory, two-byte address */
                addr = Mem2(cp);
                cp += 2;
                break;

            case 5: /* main memory, one-byte address */
                addr = Mem1(cp);
                cp++;
                break;

            default:
                fatal_error("Unknown addressing mode in store operand.");
            }

            /* The main-memory cases. */
            funcop.mode = 15;
            funcop.addr = addr;
            funcop.argsize = oplist.argsize;
            operands[ix] = funcop;
            continue;
        }
        else if (optype == "C") {
            switch (mode) {

            case 8: /* push on stack */
                operands[ix] = "3,0";
                continue;
                
            case 0: /* discard value */
                operands[ix] = "0,0";
                continue;
            }
                
            if (mode >= 9 && mode <= 11) {
                if (mode == 9) {
                    addr = Mem1(cp);
                    cp++;
                }
                else if (mode == 10) {
                    addr = Mem2(cp);
                    cp += 2;
                }
                else if (mode == 11) {
                    addr = Mem4(cp);
                    cp += 4;
                }
                
                /* The local-variable cases. */
                operands[ix] = "2,"+addr;
                continue;
            }

            switch (mode) {
            case 15: /* main memory RAM, four-byte address */
                addr = Mem4(cp) + ramstart;
                cp += 4;
                break; 

            case 14: /* main memory RAM, two-byte address */
                addr = Mem2(cp) + ramstart;
                cp += 2;
                break; 

            case 13: /* main memory RAM, one-byte address */
                addr = Mem1(cp) + ramstart;
                cp++;
                break; 
        
            case 7: /* main memory, four-byte address */
                addr = Mem4(cp);
                cp += 4;
                break;

            case 6: /* main memory, two-byte address */
                addr = Mem2(cp);
                cp += 2;
                break;

            case 5: /* main memory, one-byte address */
                addr = Mem1(cp);
                cp++;
                break;

            default:
                fatal_error("Unknown addressing mode in store operand.");
            }

            /* The main-memory cases. */
            operands[ix] = "1,"+addr;
            continue;
        }
        else {
            fatal_error("Unknown operand type.", optype);
        }
    }

    return cp;
}

/* Construct a VMFunc for the function at the given address.
*/
function compile_func(funcaddr) {
    var addr = funcaddr;

    /* Check the Glulx type identifier byte. */
    var functype = Mem1(addr);
    if (functype != 0xC0 && functype != 0xC1) {
        if (functype >= 0xC0 && functype <= 0xDF)
            fatal_error("Call to unknown type of function.", addr);
        else
            fatal_error("Call to non-function.", addr);
    }
    addr++;
    
    /* Go through the function's locals-format list, and construct a
       slightly nicer description of the locals. (An array of [size, num].) */
    var localsformat = [];
    var rawstart = addr;
    var ix = 0;
    while (1) {
        /* Grab two bytes from the locals-format list. These are 
           unsigned (0..255 range). */
        var loctype = Mem1(addr);
        addr++;
        var locnum = Mem1(addr);
        addr++;

        if (loctype == 0) {
            break;
        }
        if (loctype != 1 && loctype != 2 && loctype != 4) {
            fatal_error("Invalid local variable size in function header.", loctype);
        }
        
        localsformat.push({ size:loctype, count:locnum });
    }

    /* We also copy the raw format list. This will be handy later on,
       when we need to serialize the stack. Note that it might be
       padded with extra zeroes to a four-byte boundary. */
    var rawformat = memmap.slice(rawstart, addr);
    while (rawformat.length % 4)
        rawformat.push(0);

    return new VMFunc(funcaddr, addr, localsformat, rawformat);
}

/* Construct a path for the given function starting at the given address.

   A path is a sequence of JS statements (eval'ed into a JS function)
   which implement the opcodes at that address. We compile as many
   opcodes as we efficiently can; compilation stops at the first
   call, return, unconditional branch, or so on. We also stop compilation
   if we reach an opcode which we know to be the *destination* of a
   branch. (The idea is that we're going to have to create a path
   starting there anyhow -- you can't jump into the middle of a JS
   function. So we avoid compiling those opcodes twice.)

   The path function returns the special value VMStopped on @quit or 
   if the top-level function exits. This will stop VM execution. 
   (Note that glk_exit() doesn't cause this -- it technically leaves
   the VM paused forever rather than stopped.)

   After executing a path, the VM state (pc, stack, etc) are set
   appropriately for the end of the path. However, we don't maintain
   that state opcode by opcode *inside* the path.
*/
function compile_path(vmfunc, startaddr, startiosys) {
    var cp = startaddr;
    var opcode;
    var opcodecp;
    var key;

    /* This will hold all sorts of useful information about the code
       sequence we're compiling. */
    var context = {
        vmfunc: vmfunc,

        cp: null, /* Will be filled in as we go */
        prevcp: null, /* ditto */

        /* The iosysmode, as of cp. This is always a literal value;
           if it becomes unknown-at-compile-time, we stop compiling. */
        curiosys: startiosys,

        /* List of code lines. */
        code: [],

        /* Dict indicating which _hold variables are in use. A true value
           means that the variable is used in this opcode; false means
           it is not, but has been used before in the path; an integer
           means the variable is in use on offstack or offloc (N times). */
        holduse: {},

        /* Dict indicating which other ad-hoc variables are in use. */
        varsused: {},

        /* A stack of quoted values (constants and _hold variables)
           which should be on the value stack, but temporarily aren't. */
        offstack: [],

        /* An array of quoted values (constants and _hold variables)
           which should be in the locals array, but temporarily aren't. */
        offloc: [],

        /* Indicates whether the values in offloc need to be written back
           to the locals array. (True means yes; false means it's just a
           a cached value and doesn't need to be written.) Same indices as 
           offloc. */
        offlocdirty: [],

        /* Set true when no more opcodes should be compiled for this path. */
        path_ends: false
    };

    /* This will hold the operand information for each opcode we compile.
       We'll recycle the object rather than allocating a new one each 
       time. */
    var operands = {};
    /* Another object to recycle. */
    operands.func_store = {};

    context.code.push(""); /* May be replaced by the _hold var declarations. */

    while (!context.path_ends) {

        /* Stash the current opcode's address, in case the interpreter needs to
           serialize the VM state out-of-band. */
        context.prevcp = cp;

        /* Fetch the opcode number. */
        opcodecp = cp;
        opcode = Mem1(cp);
        if (opcode === undefined) 
            fatal_error("Tried to compile nonexistent address", cp);
        cp++;

        if (opcode & 0x80) {
            /* More than one-byte opcode. */
            if (opcode & 0x40) {
                /* Four-byte opcode */
                opcode &= 0x3F;
                opcode = (opcode * 0x100) | Mem1(cp);
                cp++;
                opcode = (opcode * 0x100) | Mem1(cp);
                cp++;
                opcode = (opcode * 0x100) | Mem1(cp);
                cp++;
            }
            else {
                /* Two-byte opcode */
                opcode &= 0x7F;
                opcode = (opcode * 0x100) | Mem1(cp);
                cp++;
            }
        }

        /* Now we have an opcode number. */
        ;;;context.code.push("// " + opcodecp.toString(16) + ": opcode " + opcode.toString(16)); //debug

        /* Fetch the structure that describes how the operands for this
           opcode are arranged. This is a pointer to an immutable, 
           static object. */
        var oplist = operandlist_table[opcode];
        if (!oplist)
            fatal_error("Encountered unknown opcode.", opcode);
        cp = parse_operands(context, cp, oplist, operands);
        /* Some ophandlers need the next PC -- the address of the next
           instruction. That's cp right now. */
        context.cp = cp; 

        var ophandler = opcode_table[opcode];
        if (!ophandler)
            fatal_error("Encountered unhandled opcode.", opcode);
        ophandler(context, operands);

        /* Any _hold variables which were used in this opcode (only)
           are no longer used. Variables in the offstate are immune
           to this. */
        for (key in context.holduse) {
            if (context.holduse[key] === true)
                context.holduse[key] = false;
        }

        ;;;if (context.offstack.length) context.code.push("// offstack: " + context.offstack.join(",")); //debug
        ;;;if (context.offloc.length) context.code.push("// offloc: " + context.offloc.join(",") + "; dirty: " + context.offlocdirty.join(",")); //debug
        //context.code.push("// holduse: " + qobjdump(context.holduse));

        /* Check if any other compilation starts, or will start, at this
           address. If so, no need to compile further. */
        if (vmfunc.pathaddrs[cp] && !context.path_ends) {
            ;;;context.code.push("// reached jump-in point"); //debug
            context.code.push("self.pc="+cp+";");
            oputil_unload_offstate(context);
            context.code.push("return;");
            context.path_ends = true;
        }
    }

    if (context.offstack.length) 
        fatal_error("Path compilation ended with nonempty offstack.", context.offstack.length);
    if (context.offloc.length) 
        fatal_error("Path compilation ended with nonempty offloc.", context.offloc.length);

    /* Declare all the _hold variables, and other variables, that we need. */
    {
        var ls = [];
        for (key in context.holduse)
            ls.push(key);
        for (key in context.varsused)
            ls.push(key);
        if (ls.length)
            context.code[0] = "var " + ls.join(",") + ";";
    }

    //qlog("### code at " + startaddr.toString(16) + ":\n" + context.code.join("\n"));
    return make_code(context.code.join("\n"), "_func_path_"+startaddr);
}

/* Prepare for execution of a new function. The argcount is the number
   of arguments passed in; the arguments themselves are in the 
   tempcallargs array. (We don't rely on tempcallargs.length, as that
   can be greater than argcount.)

   This puts a new call frame onto the stack, and fills in its locals
   (or valstack, for a 0xC0 function.) The pc is set to the function's
   starting address.
*/
function enter_function(addr, argcount) {
    var ix;

    total_function_calls++; //###stats

    /* If this address has been registered for an accelerated function,
       dispatch it. */
    var accelfunc = accel_address_map[addr];
    if (accelfunc !== undefined) {
        accel_function_calls++; //###stats
        var val = accelfunc(argcount, self.tempcallargs);
        pop_callstub(val);
        return;
    }

    var vmfunc = vmfunc_table[addr];
    if (vmfunc === undefined) {
        vmfunc = compile_func(addr);
        if (addr < ramstart)
            vmfunc_table[addr] = vmfunc;
    }

    self.pc = vmfunc.startpc;

    var newframe = new StackFrame(vmfunc);
    newframe.depth = stack.length;
    if (stack.length == 0)
        newframe.framestart = 0;
    else
        newframe.framestart = self.frame.framestart + self.frame.framelen + 4*self.frame.valstack.length;
    stack.push(newframe);
    self.frame = newframe;

    if (vmfunc.functype == 0xC0) {
        /* Push the function arguments on the stack. The locals have already
           been zeroed. */
        for (ix=argcount-1; ix >= 0; ix--)
            self.frame.valstack.push(self.tempcallargs[ix]);
        self.frame.valstack.push(argcount);
    }
    else {
        /* Copy in function arguments. This is a bit gross, since we have to
           follow the locals format. If there are fewer arguments than locals,
           that's fine -- we've already zeroed out this space. If there are
           more arguments than locals, the extras are silently dropped. */
        for (ix=0; ix<argcount; ix++) {
            var form = vmfunc.localsindex[ix];
            if (form === undefined)
                break;
            if (form.size == 4)
                self.frame.locals[form.pos] = self.tempcallargs[ix];
            else if (form.size == 2)
                self.frame.locals[form.pos] = self.tempcallargs[ix] & 0xFFFF;
            else if (form.size == 1)
                self.frame.locals[form.pos] = self.tempcallargs[ix] & 0xFF;
        }
    }

    //qlog("### framestart " + self.frame.framestart + ", filled-in locals " + qobjdump(self.frame.locals) + ", valstack " + qobjdump(self.frame.valstack));
}
self.enter_function = enter_function;

/* Pop the current call frame off the stack. This is very simple.
   Returns true if the top-level stack frame is popped (thus stopping
   the VM).
*/
function leave_function() {
    var olddepth = self.frame.depth;

    stack.pop();
    if (stack.length == 0) {
        self.frame = null;
        return true;
    }
    self.frame = stack[stack.length-1];

    if (self.frame.depth != olddepth-1)
        fatal_error("Stack inconsistent after function exit.");
}
self.leave_function = leave_function;

/* Pop the stack down until it has length val. Used in the throw opcode. */
function pop_stack_to(val) {
    /* Down to the correct frame, if necessary. */
    while (stack.length && stack[stack.length-1].framestart > val)
        stack.pop();
    if (stack.length == 0)
        fatal_error("Stack evaporated during throw.");
    self.frame = stack[stack.length-1];

    val -= (self.frame.framestart+self.frame.framelen);
    if (val < 0)
        fatal_error("Attempted to throw below the frame value stack.");
    if (val & 3)
        fatal_error("Attempted to throw to an unaligned address.");
    val >>>= 2;
    if (val > self.frame.valstack.length)
        fatal_error("Attempted to throw beyond the frame value stack.");
    /* Down to the correct position in the valstack. */
    self.frame.valstack.length = val;
}
self.pop_stack_to = pop_stack_to;

/* Pop a callstub off the stack, and store a value at the appropriate 
   location. (When returning from a function, for example, the value is
   the function return value, and it gets stored wherever the function
   call wants it. The pc winds up pointing after the function call
   opcode.)
*/
function pop_callstub(val) {
    var destaddr, desttype;

    //qlog("### return value " + val.toString(16));
    if (isNaN(val))
        fatal_error("Function returned undefined value.");

    /* This somewhat clumsy way of popping off the last four elements of  the
     * stack turns out to be significantly faster, which is great, because this
     * function is extremely hot. */
    var valstack = self.frame.valstack;
    var vallen = valstack.length;
    var framestart = valstack[vallen - 1];
    if (framestart != self.frame.framestart) {
        valstack.length -= 1;
        fatal_error("Call stub frameptr (" + framestart + ") " +
            "does not match frame (" + self.frame.framestart + ")");
    }
    self.pc = valstack[vallen - 2];
    destaddr = valstack[vallen - 3];
    desttype = valstack[vallen - 4];
    valstack.length -= 4;

    switch (desttype) {
    case 0:
        return;
    case 1:
        MemW4(destaddr, val);
        return;
    case 2:
        self.frame.locals[destaddr] = val;
        return;
    case 3:
        self.frame.valstack.push(val);
        return;

    case 0x11:
        fatal_error("String-terminator call stub at end of function call.");
        return;

    case 0x10:
        /* This call stub was pushed during a string-decoding operation!
           We have to restart it. (Note that the return value is discarded.) */
        stream_string(0, self.pc, 0xE1, destaddr); 
        return;

    case 0x12:
        /* This call stub was pushed during a number-printing operation.
           Restart that. (Return value discarded.) */
        stream_num(0, self.pc, true, destaddr);
        return;

    case 0x13:
        /* This call stub was pushed during a C-string printing operation.
           We have to restart it. (Note that the return value is discarded.) */
        stream_string(0, self.pc, 0xE0, destaddr); 
        return;

    case 0x14:
        /* This call stub was pushed during a Unicode printing operation.
           We have to restart it. (Note that the return value is discarded.) */
        stream_string(0, self.pc, 0xE2, destaddr); 
        return;

    default:
        fatal_error("Unrecognized desttype in callstub.", desttype);
    }
}
self.pop_callstub = pop_callstub;

/* Do the value-storing part of an already-popped call stub. (This is a
   subset of the pop_callstub() work.) 
*/
function store_operand(desttype, destaddr, val) {
    switch (desttype) {
    case 0:
        return;
    case 1:
        MemW4(destaddr, val);
        return;
    case 2:
        self.frame.locals[destaddr] = val;
        return;
    case 3:
        self.frame.valstack.push(val);
        return;
    default:
        fatal_error("Unrecognized desttype in callstub.", desttype);
    }
}
self.store_operand = store_operand;

/* Do the value-storing work for a funcop. A null funcop is equivalent
   to mode 0 "discard".
*/
function store_operand_by_funcop(funcop, val) {
    if (!funcop)
        return;

    switch (funcop.mode) {

    case 8: /* push on stack */
        self.frame.valstack.push(val);
        return;

    case 0: /* discard value */
        return;

    case 11: /* The local-variable cases. */
        if (funcop.argsize == 4) {
            self.frame.locals[funcop.addr] = (val);
        }
        else if (funcop.argsize == 2) {
            self.frame.locals[funcop.addr] = (0xffff & val);
        }
        else {
            self.frame.locals[funcop.addr] = (0xff & val);
        }
        return;

    case 15: /* The main-memory cases. */
        if (funcop.argsize == 4) {
            MemW4(funcop.addr, val);
        }
        else if (funcop.argsize == 2) {
            MemW2(funcop.addr, val);
        }
        else {
            MemW1(funcop.addr, val);
        }
        return;

    default:
        fatal_error("Unknown addressing mode in store func by operand.");

    }
}

/* Backtrack through the current opcode (at prevpc), and figure out whether
   its input arguments are on the stack or not. This will be important when
   setting up the saved VM state for restarting its opcode.
   
   Returns an object { selop, argsop, resop }.
 */
function parse_partial_operand()
{
    var addr = self.prevpc;
    
    /* Fetch the opcode number. */
    var opcode = Mem1(addr);
    addr++;
    if (opcode & 0x80) {
        /* More than one-byte opcode. */
        if (opcode & 0x40) {
            /* Four-byte opcode */
            opcode &= 0x3F;
            opcode = (opcode << 8) | Mem1(addr);
            addr++;
            opcode = (opcode << 8) | Mem1(addr);
            addr++;
            opcode = (opcode << 8) | Mem1(addr);
            addr++;
        }
        else {
            /* Two-byte opcode */
            opcode &= 0x7F;
            opcode = (opcode << 8) | Mem1(addr);
            addr++;
        }
    }
    
    if (opcode != 0x130) { /* op_glk */
        qlog("parse_partial_operand: parsed wrong opcode: " + opcode);
        return null;
    }
    
    /* @glk has operands LLS. */
    return {
        selop  : Mem1(addr) & 0x0F,
        argsop : (Mem1(addr) >> 4) & 0x0F,
        resop  : Mem1(addr+1) & 0x0F
    };
}

/* Set the VM's random-number function to either a "true" RNG (Javascript's
   Math.random), or a seeded deterministic RNG.
*/
function set_random(val) {
    if (val == 0) {
        self.random_func = Math.random;
    }
    else {
        srand_set_seed(val);
        self.random_func = srand_get_random;
    }
}
self.set_random = set_random;

/* Here is a pretty standard random-number generator and seed function.
   It is used for the deterministic mode of the Glulx RNG. (In the
   normal, non-deterministic mode, we rely on Math.random() -- hopefully
   that pulls some nice juicy entropy from the OS.)
*/
var srand_table = undefined; /* Array[0..54] */
var srand_index1, srand_index2;

function srand_set_seed(seed) {
    var i, ii, k, val, loop;

    if (srand_table === undefined)
        srand_table = Array(55);

    srand_table[54] = seed;
    srand_index1 = 0;
    srand_index2 = 31;
    
    k = 1;

    for (i = 0; i < 55; i++) {
        ii = (21 * i) % 55;
        srand_table[ii] = k;
        k = (seed - k) >>>0;
        seed = srand_table[ii];
    }
    for (loop = 0; loop < 4; loop++) {
        for (i = 0; i < 55; i++) {
            val = srand_table[i] - srand_table[ (1 + i + 30) % 55];
            srand_table[i] = val >>>0;
        }
    }
}

function srand_get_random() {
    srand_index1 = (srand_index1 + 1) % 55;
    srand_index2 = (srand_index2 + 1) % 55;
    srand_table[srand_index1] = (srand_table[srand_index1] - srand_table[srand_index2]) >>>0;
    return srand_table[srand_index1] / 0x100000000;
}

/* accel_funcnum_map maps VM addresses to the index number of the (native)
   functions used to accelerate them. accel_address_map maps VM addresses
   directly to the native functions. (So accel_address_map[x] ==
   accel_func_map[accel_funcnum_map[x]].) These are also referenced from
   self. */
var accel_address_map = {};
var accel_funcnum_map = {};
self.accel_address_map = accel_address_map;
self.accel_funcnum_map = accel_funcnum_map;

/* A list of the nine parameter fields used by the accelerated functions. */
var accel_params = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
self.accel_params = accel_params;

/* The code for all the functions we can accelerate. Unrecognized indexes,
   including zero, map to undefined.

   Remember that there may be fewer arguments than expected, and any beyond
   argc should be taken as zero.
*/
var accel_func_map = {
    1: function func_1_z__region(argc, argv) {
        if (argc < 1)
            return 0;

        var addr = argv[0];
        if (addr < 36)
            return 0;
        if (addr >= self.endmem)
            return 0;

        var tb = Mem1(addr);
        if (tb >= 0xE0) {
            return 3;
        }
        if (tb >= 0xC0) {
            return 2;
        }
        if (tb >= 0x70 && tb <= 0x7F && addr >= ramstart) {
            return 1;
        }
        return 0;
    },

    2: function func_2_cp__tab(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        /* func_1_z__region(obj) */
        if (accel_func_map[1](argc, argv) != 1) { 
            Glk.glk_put_jstring("\n[** Programming error: tried to find the \".\" of (something) **]\n");
            return 0;
        }

        var otab = Mem4(obj + 16);
        if (!otab)
            return 0;

        var max = Mem4(otab);
        otab += 4;
        /* @binarysearch id 2 otab 10 max 0 0 res; */
        return binary_search(id, 2, otab, 10, max, 0, 0);
    },

    3: function func_3_ra__pr(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        var prop = accel_helper_get_prop(obj, id);
        if (prop == 0)
            return 0;

        return Mem4(prop + 4);
    },

    4: function func_4_rl__pr(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        var prop = accel_helper_get_prop(obj, id);
        if (prop == 0)
            return 0;

        return 4 * Mem2(prop + 2);
    },

    5: function func_5_oc__cl(argc, argv) {
        var zr, prop, inlist, inlistlen, jx;

        var obj = ((argc > 0) ? argv[0] : 0);
        var cla = ((argc > 1) ? argv[1] : 0);

        /* func_1_z__region(obj) */
        zr = accel_func_map[1](argc, argv);
        if (zr == 3)
            return (cla == accel_params[5]) ? 1 : 0;
        if (zr == 2)
            return (cla == accel_params[4]) ? 1 : 0;
        if (zr != 1)
            return 0;
    
        if (cla == accel_params[2]) {
            if (accel_helper_obj_in_class(obj))
                return 1;
            if (obj == accel_params[2])
                return 1;
            if (obj == accel_params[5])
                return 1;
            if (obj == accel_params[4])
                return 1;
            if (obj == accel_params[3])
                return 1;
            return 0;
        }
        if (cla == accel_params[3]) {
            if (accel_helper_obj_in_class(obj))
                return 0;
            if (obj == accel_params[2])
                return 0;
            if (obj == accel_params[5])
                return 0;
            if (obj == accel_params[4])
                return 0;
            if (obj == accel_params[3])
                return 0;
            return 1;
        }
        if ((cla == accel_params[5]) || (cla == accel_params[4]))
            return 0;
    
        if (!accel_helper_obj_in_class(cla)) {
            Glk.glk_put_jstring("\n[** Programming error: tried to apply 'ofclass' with non-class **]\n");
            return 0;
        }
    
        prop = accel_helper_get_prop(obj, 2);
        if (prop == 0)
           return 0;
    
        inlist = Mem4(prop + 4);
        if (inlist == 0)
           return 0;
    
        inlistlen = Mem2(prop + 2);
        for (jx = 0; jx < inlistlen; jx++) {
            if (Mem4(inlist + (4 * jx)) == cla)
                return 1;
        }
        return 0;
    },

    6: function func_6_rv__pr(argc, argv) {
        var id = ((argc > 1) ? argv[1] : 0);
        var addr;

        /* func_3_ra__pr */
        addr = accel_func_map[3](argc, argv);
        
        if (addr == 0) {
            /* id > 0 && id < indiv_prop_start */
            if ((id > 0) && (id < accel_params[1])) {
                /* Mem4(cpv__start + 4*id) */
                return Mem4(accel_params[8] + (4 * id));
            }

            Glk.glk_put_jstring("\n[** Programming error: tried to read (something) **]\n");
            return 0;
        }

        return Mem4(addr);
    },

    7: function func_7_op__pr(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        var indiv_prop_start = accel_params[1];

        /* func_1_z__region(obj) */
        var zr = accel_func_map[1](argc, argv);
        if (zr == 3) {
            /* print is INDIV_PROP_START+6 */
            if (id == indiv_prop_start+6)
                return 1;
            /* print_to_array is INDIV_PROP_START+7 */
            if (id == indiv_prop_start+7)
                return 1;
            return 0;
        }
        if (zr == 2) {
            /* call is INDIV_PROP_START+5 */
            return ((id == indiv_prop_start+5) ? 1 : 0);
        }
        if (zr != 1)
            return 0;
    
        if ((id >= indiv_prop_start) && (id < indiv_prop_start+8)) {
            if (accel_helper_obj_in_class(obj))
                return 1;
        }
    
        /* func_3_ra__pr */
        return ((accel_func_map[3](argc, argv)) ? 1 : 0);
    },

    8: function func_8_cp__tab(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        /* func_1_z__region(obj) */
        if (accel_func_map[1](argc, argv) != 1) { 
            Glk.glk_put_jstring("\n[** Programming error: tried to find the \".\" of (something) **]\n");
            return 0;
        }

        /*  otab = Mem4(obj + 4*(3+(int)(num_attr_bytes/4))); */
        var otab = Mem4(obj + 4*(3+(accel_params[7]>>2)));
        if (!otab)
            return 0;

        var max = Mem4(otab);
        otab += 4;
        /* @binarysearch id 2 otab 10 max 0 0 res; */
        return binary_search(id, 2, otab, 10, max, 0, 0);
    },

    9: function func_9_ra__pr(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        var prop = accel_helper_get_prop_new(obj, id);
        if (prop == 0)
            return 0;

        return Mem4(prop + 4);
    },

    10: function func_10_rl__pr(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        var prop = accel_helper_get_prop_new(obj, id);
        if (prop == 0)
            return 0;

        return 4 * Mem2(prop + 2);
    },

    11: function func_11_oc__cl(argc, argv) {
        var zr, prop, inlist, inlistlen, jx;

        var obj = ((argc > 0) ? argv[0] : 0);
        var cla = ((argc > 1) ? argv[1] : 0);

        /* func_1_z__region(obj) */
        zr = accel_func_map[1](argc, argv);
        if (zr == 3)
            return (cla == accel_params[5]) ? 1 : 0;
        if (zr == 2)
            return (cla == accel_params[4]) ? 1 : 0;
        if (zr != 1)
            return 0;
    
        if (cla == accel_params[2]) {
            if (accel_helper_obj_in_class(obj))
                return 1;
            if (obj == accel_params[2])
                return 1;
            if (obj == accel_params[5])
                return 1;
            if (obj == accel_params[4])
                return 1;
            if (obj == accel_params[3])
                return 1;
            return 0;
        }
        if (cla == accel_params[3]) {
            if (accel_helper_obj_in_class(obj))
                return 0;
            if (obj == accel_params[2])
                return 0;
            if (obj == accel_params[5])
                return 0;
            if (obj == accel_params[4])
                return 0;
            if (obj == accel_params[3])
                return 0;
            return 1;
        }
        if ((cla == accel_params[5]) || (cla == accel_params[4]))
            return 0;
    
        if (!accel_helper_obj_in_class(cla)) {
            Glk.glk_put_jstring("\n[** Programming error: tried to apply 'ofclass' with non-class **]\n");
            return 0;
        }
    
        prop = accel_helper_get_prop_new(obj, 2);
        if (prop == 0)
           return 0;
    
        inlist = Mem4(prop + 4);
        if (inlist == 0)
           return 0;
    
        inlistlen = Mem2(prop + 2);
        for (jx = 0; jx < inlistlen; jx++) {
            if (Mem4(inlist + (4 * jx)) == cla)
                return 1;
        }
        return 0;
    },

    12: function func_12_rv__pr(argc, argv) {
        var id = ((argc > 1) ? argv[1] : 0);
        var addr;

        /* func_9_ra__pr */
        addr = accel_func_map[9](argc, argv);
        
        if (addr == 0) {
            /* id > 0 && id < indiv_prop_start */
            if ((id > 0) && (id < accel_params[1])) {
                /* Mem4(cpv__start + 4*id) */
                return Mem4(accel_params[8] + (4 * id));
            }

            Glk.glk_put_jstring("\n[** Programming error: tried to read (something) **]\n");
            return 0;
        }

        return Mem4(addr);
    },

    13: function func_13_op__pr(argc, argv) {
        var obj = ((argc > 0) ? argv[0] : 0);
        var id = ((argc > 1) ? argv[1] : 0);

        var indiv_prop_start = accel_params[1];

        /* func_1_z__region(obj) */
        var zr = accel_func_map[1](argc, argv);
        if (zr == 3) {
            /* print is INDIV_PROP_START+6 */
            if (id == indiv_prop_start+6)
                return 1;
            /* print_to_array is INDIV_PROP_START+7 */
            if (id == indiv_prop_start+7)
                return 1;
            return 0;
        }
        if (zr == 2) {
            /* call is INDIV_PROP_START+5 */
            return ((id == indiv_prop_start+5) ? 1 : 0);
        }
        if (zr != 1)
            return 0;
    
        if ((id >= indiv_prop_start) && (id < indiv_prop_start+8)) {
            if (accel_helper_obj_in_class(obj))
                return 1;
        }
    
        /* func_9_ra__pr */
        return ((accel_func_map[9](argc, argv)) ? 1 : 0);
    }
};
self.accel_func_map = accel_func_map;

var accel_helper_temp_args = [ 0, 0 ];

function accel_helper_obj_in_class(obj)
{
    /* This checks whether obj is contained in Class, not whether
       it is a member of Class. */
    /* (Mem4(obj + 13 + num_attr_bytes) == class_metaclass) */
    return (Mem4(obj + 13 + accel_params[7]) == accel_params[2]);
}

/* Look up a property entry. */
function accel_helper_get_prop(obj, id)
{
    var cla = 0;
    var prop;

    if (id & 0xFFFF0000) {
        /* Mem4(classes_table+...) */
        cla = Mem4(accel_params[0]+((id & 0xFFFF) * 4));
        accel_helper_temp_args[0] = obj;
        accel_helper_temp_args[1] = cla;
        /* func_5_oc__cl */
        if (accel_func_map[5](2, accel_helper_temp_args) == 0)
            return 0;

        id = id >> 16;
        obj = cla;
    }

    accel_helper_temp_args[0] = obj;
    accel_helper_temp_args[1] = id;
    /* func_2_cp__tab */
    prop = accel_func_map[2](2, accel_helper_temp_args);
    if (prop == 0)
        return 0;

    if (accel_helper_obj_in_class(obj) && (cla == 0)) {
        /* id < num_attr_bytes || id >= num_attr_bytes+8 */
        if ((id < accel_params[1]) || (id >= accel_params[1]+8))
            return 0;
    }

    /* Mem4(self) -- the global variable self */
    if (Mem4(accel_params[6]) != obj) {
        if (Mem1(prop + 9) & 1)
            return 0;
    }
    return prop;
}

/* Look up a property entry. This is part of the newer set of accel
   functions (8 through 13), which support increasing NUM_ATTR_BYTES.
   It is identical to get_prop() except that it calls the new versions
   of func_5 and func_2. */
function accel_helper_get_prop_new(obj, id)
{
    var cla = 0;
    var prop;

    if (id & 0xFFFF0000) {
        /* Mem4(classes_table+...) */
        cla = Mem4(accel_params[0]+((id & 0xFFFF) * 4));
        accel_helper_temp_args[0] = obj;
        accel_helper_temp_args[1] = cla;
        /* func_11_oc__cl */
        if (accel_func_map[11](2, accel_helper_temp_args) == 0)
            return 0;

        id = id >> 16;
        obj = cla;
    }

    accel_helper_temp_args[0] = obj;
    accel_helper_temp_args[1] = id;
    /* func_8_cp__tab */
    prop = accel_func_map[8](2, accel_helper_temp_args);
    if (prop == 0)
        return 0;

    if (accel_helper_obj_in_class(obj) && (cla == 0)) {
        /* id < num_attr_bytes || id >= num_attr_bytes+8 */
        if ((id < accel_params[1]) || (id >= accel_params[1]+8))
            return 0;
    }

    /* Mem4(self) -- the global variable self */
    if (Mem4(accel_params[6]) != obj) {
        if (Mem1(prop + 9) & 1)
            return 0;
    }
    return prop;
}


/* Set the current table address, and rebuild decoding tree. */
function set_string_table(addr) {
    if (self.stringtable == addr)
        return;

    /* Drop the existing cache and tree. */
    decoding_tree = undefined;
    vmstring_table = undefined;

    /* Set the register. */
    self.stringtable = addr;

    if (self.stringtable == 0) {
        return;
    }

    var textenv = vmtextenv_table[self.stringtable];
    if (textenv === undefined) {
        /* We will need a new VMTextEnv. */
        /* If the table is entirely in ROM, we can build a decoding tree.
           If not, leave it undefined in the VMTextEnv. */
        var dectab = undefined;
        var tablelen = Mem4(self.stringtable);
        var rootaddr = Mem4(self.stringtable+8);
        var cache_stringtable = (self.stringtable+tablelen <= ramstart);
        if (cache_stringtable) {
            //qlog("building decoding table at " + self.stringtable.toString(16) + ", length " + tablelen.toString(16));
            var tmparray = Array(1);
            //var pathstart = new Date().getTime(); //debug
            build_decoding_tree(tmparray, rootaddr, 4 /*CACHEBITS*/, 0);
            dectab = tmparray[0];
            if (dectab === undefined)
                fatal_error("Failed to create decoding tree.");
            //qlog("done building; time = " + ((new Date().getTime())-pathstart) + " ms"); //debug
        }

        textenv = new VMTextEnv(self.stringtable, dectab);
        vmtextenv_table[self.stringtable] = textenv;
    }

    decoding_tree = textenv.decoding_tree;
    vmstring_table = textenv.vmstring_tables[self.iosysmode];
}
self.set_string_table = set_string_table;

/* Set the VM iosys, and adjust the vmstring_table register appropriately. 
*/
function set_iosys(mode, rock) {
    switch (mode) {
    case 0: /* null */
        rock = 0;
        break;
    case 1: /* filter */
        break;
    case 2: /* glk */
        rock = 0;
        break;
    default: /* pretend it's null */
        mode = 0;
        rock = 0;
        break;
    }

    self.iosysmode = mode;
    self.iosysrock = rock;

    var textenv = vmtextenv_table[self.stringtable];
    if (textenv === undefined)
        vmstring_table = undefined;
    else
        vmstring_table = textenv.vmstring_tables[self.iosysmode];
}
self.set_iosys = set_iosys;

/* The form of the decoding tree is a tree of arrays and leaf objects.
   An array always has 16 entries (2^CACHESIZE). Every object, including
   the array, has a "type" field corresponding to the Glulx node type.

   The arrays have a peculiar structure (inherited from Glulxe). Each one
   encapsulates a subtree of binary branch nodes, up to four nodes deep. This
   lets you traverse the tree four levels at a time (using four input bits at
   a time). The first input bit is the 1s place of the array index, and so 
   on.

   Life gets complicated if we want to encode *fewer* than four levels. A
   subtree with only one branch (and two leaves) must duplicate each leaf
   four times: 0,1,0,1,... This is because the decoder will index using
   four bits at a time, but the high bits will be undefined.

   The initial argument is the array we're writing into. If this is the
   top-level call, it will be a fake (length-one) array -- see above.
*/
function build_decoding_tree(cablist, nodeaddr, depth, mask) {
    var ix, type, cab;
    var depthbit;

    type = Mem1(nodeaddr);

    if (type == 0 && depth == 4) { /*CACHEBITS*/
        /* Start a new array. */
        cab = Array(16); /*CACHESIZE*/
        cab.type = 0;
        cab.depth = 4; /*CACHEBITS*/
        cablist[mask] = cab;
        build_decoding_tree(cab, nodeaddr, 0, 0);
        return;
    }

    if (type == 0) {
        var leftaddr  = Mem4(nodeaddr+1);
        var rightaddr = Mem4(nodeaddr+5);
        build_decoding_tree(cablist, leftaddr, depth+1, mask);
        build_decoding_tree(cablist, rightaddr, depth+1, (mask | (1 << depth)));
        return;
    }

    /* Leaf node. */
    nodeaddr++;

    cab = {};
    cab.type = type;
    cab.depth = depth;
    switch (type) {
    case 0x02: /* 8-bit character */
        cab.value = Mem1(nodeaddr);
        cab.cchar = CharToString(cab.value);
        break;
    case 0x04: /* Unicode character */
        cab.value = Mem4(nodeaddr);
        cab.cchar = CharToString(cab.value);
        break;
    case 0x03: /* C-style string */
    case 0x05: /* C-style unicode string */
        /* If the address is in ROM, we could read it, convert to a JS
           string, and store it in the node. */
        cab.addr = nodeaddr;
        break;
    case 0x08: /* indirect ref */
    case 0x09: /* double-indirect ref */
        cab.addr = Mem4(nodeaddr);
        break;
    case 0x0A: /* indirect ref with arguments */
    case 0x0B: /* double-indirect ref with arguments */
        cab.addr = nodeaddr;
        break;
    case 0x01: /* terminator */
        break;
    default:
        fatal_error("Unknown node type in string table.", type);
    }

    depthbit = (1 << depth);
    for (ix = mask; ix < 16 /* CACHESIZE */; ix += depthbit) {
        cablist[ix] = cab;
    }
}

/* Print a (signed, decimal) integer. The incoming value is actually
   unsigned, so we have to convert it (using the "& 0xffffffff" trick)
   before stringifying it.

   This is only called when the iosysmode is filter. However, we could
   re-enter (with inmiddle true) with some other iosysmode, so we handle
   all the cases.
*/
function stream_num(nextcp, value, inmiddle, charnum) {
    var buf = (value & 0xffffffff).toString(10);

    //qlog("### stream_num(" + nextcp + ", " + buf + ", " + inmiddle + ", " + charnum + ") iosys " + self.iosysmode);

    switch (self.iosysmode) {
    case 2: /* glk */
        if (charnum)
            buf = buf.slice(charnum);
        Glk.glk_put_jstring(buf, true);
        break;

    case 1: /* filter */
        if (!inmiddle) {
            // push_callstub(0x11, 0);
            self.frame.valstack.push(0x11, 0, nextcp, self.frame.framestart);
            inmiddle = true;
        }
        if (charnum < buf.length) {
            var ch = buf.charCodeAt(charnum);
            /* Note that value is unsigned here -- only unsigned values
               go on the stack. */
            // push_callstub(0x12, charnum+1);
            self.frame.valstack.push(0x12, charnum+1, value, self.frame.framestart);
            self.tempcallargs[0] = ch;
            enter_function(self.iosysrock, 1);
            return true;
        }
        break;

    case 0: /* null */
        break;
    }

    if (inmiddle) {
        var desttype, destaddr;
        /* String terminated. Carry out a pop_callstub_string(). */
        if (self.frame.valstack.pop() != self.frame.framestart)
            fatal_error("Call stub frameptr does not match frame.");
        self.pc = self.frame.valstack.pop();
        destaddr = self.frame.valstack.pop();
        desttype = self.frame.valstack.pop();
        if (desttype != 0x11) 
            fatal_error("String-on-string call stub while printing number.");
    }
}
self.stream_num = stream_num;

/* Look up a string, and print or execute it.

   This returns true if a sub-function needs to be called. In this case,
   the pc and stack are already set up, so the caller needs to return
   to the main execution loop.

   This returns false if execution can continue for the caller. This is the
   simple case, where the caller began at the start of a string and the
   whole thing got printed.
*/
function stream_string(nextcp, addr, inmiddle, bitnum) {
    var substring = (inmiddle != 0);
    var addrkey, strop, res;
    var desttype, destaddr;

    //qlog("### stream_string("+addr+") from cp="+nextcp+" $"+nextcp.toString(16)+" in iosys "+self.iosysmode);

    while (true) {
        strop = undefined;
        if (inmiddle == 0)
            addrkey = addr;
        else
            addrkey = addr+"/"+inmiddle+"/"+bitnum;

        if (vmstring_table !== undefined && addr < ramstart) {
            strop = vmstring_table[addrkey];
            if (strop === undefined) {
                strop = compile_string(self.iosysmode, addr, inmiddle, bitnum);
                vmstring_table[addrkey] = strop;
                strings_compiled++; //###stats
                strings_cached++; //###stats
            }
        }
        else {
            strop = compile_string(self.iosysmode, addr, inmiddle, bitnum);
            strings_compiled++; //###stats
        }

        //qlog("### strop(" + addrkey + (substring?":[sub]":"") + "): " + strop);
    
        if (!(strop instanceof Function)) {
            Glk.glk_put_jstring(strop);
            if (!substring)
                return false;
        }
        else {
            res = strop(self, nextcp, substring);
            if (res instanceof Array) {
                /* Entered a substring */
                substring = true;
                addr = res[0];
                inmiddle = res[1];
                bitnum = res[2];
                //qlog("### push to addr="+addr+"/"+inmiddle+"/"+bitnum);
                continue;
            }
            if (res) {
                /* Entered a function. The pc is set. */
                return true;
            }
            /* Else, string terminated. */
        }
        
        /* String terminated. Carry out a pop_callstub_string(). */
        if (self.frame.valstack.pop() != self.frame.framestart)
            fatal_error("Call stub frameptr does not match frame.");
        self.pc = self.frame.valstack.pop();
        destaddr = self.frame.valstack.pop();
        desttype = self.frame.valstack.pop();

        if (desttype == 0x11) {
            /* The call stub for the top-level string. Return to the main
               execution loop. */
            return true;
        }
        else if (desttype == 0x10) {
            /* The call stub for a sub-function. Continue the compressed
               string that called it. */
            substring = true;
            bitnum = destaddr;
            inmiddle = 0xE1;
            addr = self.pc;
            //qlog("### end; pop to addr="+addr+"/"+inmiddle+"/"+bitnum);
        }
        else {
            fatal_error("Function-terminator call stub at end of string.");
        }
    }
}
self.stream_string = stream_string;

/* Generate a function which outputs the string, or rather one path of it.
   Like function paths, a string path only runs up to the first internal
   call; then it exits so that the main terp loop can start working on
   the function.

   The generated function returns true if a VM function is set up to go next;
   an array [addr, inmiddle, bitnum] if a new (or re-entering) string is set
   up; or false if the string has ended normally. In the latter case, a
   string-callstub needs to be popped and used.

   If the string ends with no sub-strings or sub-calls (the substring flag
   stays false, and there is no stack activity), then this doesn't bother with
   a function. It returns a plain string.
*/
function compile_string(curiosys, startaddr, inmiddle, startbitnum) {
    var addr = startaddr;
    var bitnum = startbitnum;
    var retval = undefined;
    var ch, type;

    if (!addr)
        fatal_error("Called compile_string with null address.");

    /* This will hold all sorts of useful information about the code
       sequence we're compiling. */
    var context = {
        startaddr: startaddr,
        startbitnum: startbitnum,
        buffer: [],
        code: []
    }

    if (inmiddle == 0) {
        type = Mem1(addr);
        if (type == 0xE2)
            addr+=4;
        else
            addr++;
        bitnum = 0;
    }
    else {
        type = inmiddle;
    }

    if (type == 0xE1) {
        if (decoding_tree) {
            var bits, numbits, readahead, tmpaddr;
            var cablist, cab;
            var done = false;

            /* bitnum is already set right */
            bits = Mem1(addr); 
            if (bitnum)
                bits >>= bitnum;
            numbits = (8 - bitnum);
            readahead = false;
            
            if (!(decoding_tree instanceof Array)) {
                /* This is a bit of a cheat. If the top-level block is not
                   a branch, then it must be a string-terminator -- otherwise
                   the string would be an infinite repetition of that block.
                   We check for this case and bail immediately. */
                done = true;
            }

            cablist = decoding_tree;
            while (!done) {
                if (numbits < 4) { /* CACHEBITS */
                    /* readahead is certainly false */
                    var newbyte = Mem1(addr+1);
                    bits |= (newbyte << numbits);
                    numbits += 8;
                    readahead = true;
                }

                cab = cablist[bits & 0x0F]; /* CACHEMASK */
                numbits -= cab.depth;
                bits >>= cab.depth;
                bitnum += cab.depth;
                if (bitnum >= 8) {
                    addr += 1;
                    bitnum -= 8;
                    if (readahead) {
                        readahead = false;
                    }
                    else {
                        var newbyte = Mem1(addr);
                        bits |= (newbyte << numbits);
                        numbits += 8;
                    }
                }

                if (cab instanceof Array) {
                    /* non-leaf node */
                    cablist = cab;
                    continue;
                }

                switch (cab.type) {
                case 0x01: /* string terminator */
                    done = true;
                    break;
                case 0x02: /* single character */
                case 0x04: /* single Unicode character */
                    switch (curiosys) {
                    case 2: /* glk */
                        context.buffer.push(cab.cchar);
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        context.code.push("self.tempcallargs[0]="+cab.value+";");
                        context.code.push("self.enter_function(self.iosysrock, 1);");
                        retval = true;
                        done = true;
                        break;
                    }
                    cablist = decoding_tree;
                    break;
                case 0x03: /* C string */
                    switch (curiosys) {
                    case 2: /* glk */
                        tmpaddr = cab.addr;
                        while (true) {
                            ch = Mem1(tmpaddr);
                            if (ch == 0)
                                break;
                            context.buffer.push(CharToString(ch));
                            tmpaddr++;
                        }
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        retval = "["+(cab.addr)+", 0xE0, 0]";
                        done = true;
                        break;
                    }
                    cablist = decoding_tree;
                    break;
                case 0x05: /* C Unicode string */
                    switch (curiosys) {
                    case 2: /* glk */
                        tmpaddr = cab.addr;
                        while (true) {
                            ch = Mem4(tmpaddr);
                            if (ch == 0)
                                break;
                            context.buffer.push(CharToString(ch));
                            tmpaddr += 4;
                        }
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        retval = "["+(cab.addr)+", 0xE2, 0]";
                        done = true;
                        break;
                    }
                    cablist = decoding_tree;
                    break;
                case 0x08:
                case 0x09:
                case 0x0A:
                case 0x0B: 
                    oputil_flush_string(context);
                    oputil_push_substring_callstub(context);
                    /* It's not worth precomputing this type-test. We could
                       do it for a single-indirect to a ROM address, and
                       it'd be mostly okay if we weren't caching this
                       JIT code. But those aren't the common cases, so
                       let's not bother. */
                    context.code.push("var otype, retval;");
                    context.code.push("var oaddr = "+(cab.addr)+";");
                    if (cab.type >= 0x09)
                        context.code.push("oaddr = self.Mem4(oaddr);");
                    if (cab.type == 0x0B)
                        context.code.push("oaddr = self.Mem4(oaddr);");
                    context.code.push("otype = self.Mem1(oaddr);");
                    retval = "retval";
                    done = true;

                    oputil_push_callstub(context, "0x10,"+bitnum, addr);
                    context.code.push("if (otype >= 0xE0 && otype <= 0xFF) {");
                    context.code.push("retval = [oaddr, 0, 0];");
                    context.code.push("}");
                    context.code.push("else if (otype >= 0xC0 && otype <= 0xDF) {");
                    var argc = 0;
                    if (cab.type == 0x0A || cab.type == 0x0B) {
                        argc = Mem4(cab.addr+4);
                        for (var ix=0; ix<argc; ix++)
                            context.code.push("self.tempcallargs["+ix+"]="+Mem4(cab.addr+8+4*ix)+";");
                    }
                    context.code.push("self.enter_function(oaddr, "+argc+");");
                    context.code.push("retval = true;");
                    context.code.push("}");
                    context.code.push("else {");
                    context.code.push("self.fatal_error('Unknown object while decoding string indirect reference.', otype);");
                    context.code.push("}");
                    break;
                default:
                    fatal_error("Unknown entity in string decoding (cached).");
                    break;
                }
            }
        }
        else {  /* No decoding_tree available. */
            var node, byt, nodetype;
            var done = false;
            
            if (!self.stringtable)
                fatal_error("Attempted to print a compressed string with no table set.");
            /* bitnum is already set right */
            byt = Mem1(addr);
            if (bitnum)
                byt >>= bitnum;
            node = Mem4(self.stringtable+8);

            while (!done) {
                nodetype = Mem1(node);
                node++;
                switch (nodetype) {
                case 0x00: /* non-leaf node */
                    if (byt & 1) 
                        node = Mem4(node+4);
                    else
                        node = Mem4(node+0);
                    if (bitnum == 7) {
                        bitnum = 0;
                        addr++;
                        byt = Mem1(addr);
                    }
                    else {
                        bitnum++;
                        byt >>= 1;
                    }
                    break;
                case 0x01: /* string terminator */
                    retval = false;
                    done = true;
                    break;
                case 0x02: /* single character */
                    ch = Mem1(node);
                    switch (curiosys) {
                    case 2: /* glk */
                        context.buffer.push(CharToString(ch));
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        context.code.push("self.tempcallargs[0]="+ch+";");
                        context.code.push("self.enter_function(self.iosysrock, 1);");
                        retval = true;
                        done = true;
                        break;
                    }
                    node = Mem4(self.stringtable+8);
                    break;
                case 0x04: /* single Unicode character */
                    ch = Mem4(node);
                    switch (curiosys) {
                    case 2: /* glk */
                        context.buffer.push(CharToString(ch));
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        context.code.push("self.tempcallargs[0]="+ch+";");
                        context.code.push("self.enter_function(self.iosysrock, 1);");
                        retval = true;
                        done = true;
                        break;
                    }
                    node = Mem4(self.stringtable+8);
                    break;
                case 0x03: /* C string */
                    switch (curiosys) {
                    case 2: /* glk */
                        while (true) {
                            ch = Mem1(node);
                            if (ch == 0)
                                break;
                            context.buffer.push(CharToString(ch));
                            node++;
                        }
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        retval = "["+node+", 0xE0, 0]";
                        done = true;
                        break;
                    }
                    node = Mem4(self.stringtable+8);
                    break;
                case 0x05: /* C Unicode string */
                    switch (curiosys) {
                    case 2: /* glk */
                        while (true) {
                            ch = Mem4(node);
                            if (ch == 0)
                                break;
                            context.buffer.push(CharToString(ch));
                            node += 4;
                        }
                        break;
                    case 1: /* filter */
                        oputil_flush_string(context);
                        oputil_push_substring_callstub(context);
                        oputil_push_callstub(context, "0x10,"+bitnum, addr);
                        retval = "["+node+", 0xE2, 0]";
                        done = true;
                        break;
                    }
                    node = Mem4(self.stringtable+8);
                    break;
                case 0x08:
                case 0x09:
                case 0x0A:
                case 0x0B: 
                    oputil_flush_string(context);
                    oputil_push_substring_callstub(context);
                    /* It's not worth precomputing this type-test. We could
                       do it for a single-indirect to a ROM address, and
                       it'd be mostly okay if we weren't caching this
                       JIT code. But those aren't the common cases, so
                       let's not bother. */
                    context.code.push("var otype, retval;");
                    context.code.push("var oaddr = "+Mem4(node)+";");
                    if (nodetype == 0x09 || nodetype == 0x0B)
                        context.code.push("oaddr = self.Mem4(oaddr);");
                    context.code.push("otype = self.Mem1(oaddr);");
                    retval = "retval";
                    done = true;

                    oputil_push_callstub(context, "0x10,"+bitnum, addr);
                    context.code.push("if (otype >= 0xE0 && otype <= 0xFF) {");
                    context.code.push("retval = [oaddr, 0, 0];");
                    context.code.push("}");
                    context.code.push("else if (otype >= 0xC0 && otype <= 0xDF) {");
                    var argc = 0;
                    if (nodetype == 0x0A || nodetype == 0x0B) {
                        argc = Mem4(node+4);
                        for (var ix=0; ix<argc; ix++)
                            context.code.push("self.tempcallargs["+ix+"]="+Mem4(node+8+4*ix)+";");
                    }
                    context.code.push("self.enter_function(oaddr, "+argc+");");
                    context.code.push("retval = true;");
                    context.code.push("}");
                    context.code.push("else {");
                    context.code.push("self.fatal_error('Unknown object while decoding string indirect reference.', otype);");
                    context.code.push("}");
                    break;
                default:
                    fatal_error("Unknown entity in string decoding.", nodetype);
                    break;
                }
            }
        }
    }
    else if (type == 0xE0) {
        var ch;
        switch (curiosys) {
        case 2: /* glk */
            while (1) {
                ch = Mem1(addr);
                addr++;
                if (ch == 0)
                    break;
                context.buffer.push(CharToString(ch));
            }
            break;
        case 1: /* filter */
            oputil_flush_string(context);
            oputil_push_substring_callstub(context);
            ch = Mem1(addr);
            addr++;
            if (ch != 0) {
                oputil_push_callstub(context, "0x13,0", addr);
                context.code.push("self.tempcallargs[0]="+ch+";");
                context.code.push("self.enter_function(self.iosysrock, 1);");
                retval = true;
            }
            else {
                retval = "false";
            }
            break;
        }
    }
    else if (type == 0xE2) {
        var ch;
        switch (curiosys) {
        case 2: /* glk */
            while (1) {
                ch = Mem4(addr);
                addr+=4;
                if (ch == 0)
                    break;
                context.buffer.push(CharToString(ch));
            }
            break;
        case 1: /* filter */
            oputil_flush_string(context);
            oputil_push_substring_callstub(context);
            ch = Mem4(addr);
            addr+=4;
            if (ch != 0) {
                oputil_push_callstub(context, "0x14,0", addr);
                context.code.push("self.tempcallargs[0]="+ch+";");
                context.code.push("self.enter_function(self.iosysrock, 1);");
                retval = true;
            }
            else {
                retval = "false";
            }
            break;
        }
    }
    else if (type >= 0xE0 && type <= 0xFF) {
        fatal_error("Attempt to print unknown type of string.");
    }
    else {
        fatal_error("Attempt to print non-string.");
    }

    if (!retval) {
        /* The simple case; retval is false or undefined. Equivalent to a
           function that prints text and returns false. */
        ;;;if (context.code.length > 1) {
        ;;;    fatal_error("Simple-case string generated code."); //assert
        ;;;}
        return context.buffer.join("");
    }
    else {
        oputil_flush_string(context);
        context.code.push("return " + retval + ";");
        return make_code(context.code.join("\n"), "_func_str_"+startaddr, "nextcp", "substring");
    }
}

function do_gestalt(val, val2) {
    var ix;

    switch (val) {
    case 0: /* GlulxVersion */
        return 0x00030102; /* Glulx spec version 3.1.2 */

    case 1: /* TerpVersion */
        return 0x00020106; /* Quixe version 2.1.6 */

    case 2: /* ResizeMem */
        return 1; /* Memory resizing works. */

    case 3: /* Undo */
        return 1; /* Undo works. */

    case 4: /* IOSystem */
        switch (val2) {
        case 0:
            return 1; /* The "null" system always works. */
        case 1:
            return 1; /* The "filter" system always works. */
        case 2:
            return 1; /* A Glk library is hooked up. */
        default:
            return 0;
        }
        break;

    case 5: /* Unicode */
        return 1; /* We can handle Unicode. */

    case 6: /* MemCopy */
        return 1; /* We can do mcopy/mzero. */

    case 7: /* MAlloc */
        return 1; /* We can handle malloc/mfree. */

    case 8: /* MAllocHeap */
        return heap_get_start();

    case 9: /* Acceleration */
        return 1; /* The acceleration opcodes work. */

    case 10: /* AccelFunc */
        if (accel_func_map[val2])
            return 1;
        else
            return 0;

    case 11: /* Float */
        return 1; /* We can handle the floating-point opcodes. */


    default:
        return 0;
    }
}
self.do_gestalt = do_gestalt;

/* This fetches a search key, and returns an array containing the key
   (bytewise). Actually it always returns the same array.
*/
function fetch_search_key(addr, len, options) {
    var ix;

    if (options & 1) {
        /* indirect key */
        return MemSlice(addr, len);
    }
    else {
        switch (len) {
        case 4:
            return [
                (addr >> 24) & 0xFF,
                (addr >> 16) & 0xFF,
                (addr >> 8) & 0xFF,
                addr & 0xFF
            ];
        case 2:
            return [
                (addr >> 8) & 0xFF,
                addr & 0xFF
            ];
        case 1:
            return [addr & 0xFF];
        default:
            fatal_error('Direct search key must hold one, two, or four bytes.');
        }
    }
}

function linear_search(key, keysize, start, 
    structsize, numstructs, keyoffset, options) {

    var ix, count, match, bytes;
    var retindex = ((options & 4) != 0);
    var zeroterm = ((options & 2) != 0);
    var keybuf = fetch_search_key(key, keysize, options);

    for (count=0; count<numstructs; count++, start+=structsize) {
        match = true;
        bytes = MemSlice(start + keyoffset, keysize);
        for (ix=0; match && ix<keysize; ix++) {
            if (bytes[ix] != keybuf[ix])
                match = false;
        }

        if (match) {
            if (retindex)
                return count;
            else
                return start;
        }
        
        if (zeroterm) {
            match = true;
            bytes = MemSlice(start + keyoffset, keysize);
            for (ix=0; match && ix<keysize; ix++) {
                if (bytes[ix] != 0)
                    match = false;
            }
            
            if (match) {
                break;
            }
        }
    }

    if (retindex)
        return 0xFFFFFFFF;
    else
        return 0;
}

function binary_search(key, keysize, start, 
    structsize, numstructs, keyoffset, options) {

    var top, bot, addr, val, cmp, ix;
    var byt, byt2;
    var retindex = ((options & 4) != 0);
    var keybuf = fetch_search_key(key, keysize, options);

    bot = 0;
    top = numstructs;
    while (bot < top) {
        cmp = 0;
        val = (top+bot) >> 1;
        addr = start + val * structsize;
        for (ix=0; (!cmp) && ix<keysize; ix++) {
            byt = Mem1(addr + keyoffset + ix);
            byt2 = keybuf[ix];
            if (byt < byt2)
                cmp = -1;
            else if (byt > byt2)
                cmp = 1;
        }

        if (!cmp) {
            if (retindex)
                return val;
            else
                return addr;
        }
        
        if (cmp < 0) {
            bot = val+1;
        }
        else {
            top = val;
        }
    }

    if (retindex)
        return 0xFFFFFFFF;
    else
        return 0;
}

function linked_search(key, keysize, start, 
    keyoffset, nextoffset, options) {

    var ix, byt, match;
    var zeroterm = ((options & 2) != 0);
    var keybuf = fetch_search_key(key, keysize, options);

    while (start != 0) {
        match = true;
        for (ix=0; match && ix<keysize; ix++) {
            byt = Mem1(start + keyoffset + ix);
            if (byt != keybuf[ix])
                match = false;
        }

        if (match) {
            return start;
        }
        
        if (zeroterm) {
            match = true;
            for (ix=0; match && ix<keysize; ix++) {
                byt = Mem1(start + keyoffset + ix);
                if (byt != 0)
                    match = false;
            }
            
            if (match) {
                break;
            }
        }

        start = Mem4(start + nextoffset);
    }

    return 0;
}

self.linear_search = linear_search;
self.binary_search = binary_search;
self.linked_search = linked_search;

/* Convert an integer (in IEEE-754 single-precision format) into a
   Javascript number.
*/
function decode_float(val) {
    var sign, res, expo;

    if (val & 0x80000000) {
        sign = true;
        val = val & 0x7fffffff;
    }
    else {
        sign = false;
    }

    if (val == 0) {
        return (sign ? -0.0 : 0.0);
    }

    if ((val & 0x7f800000) == 0x7f800000) {
        /* Either an infinity or a NaN. */
        if ((val & 0x7fffff) == 0) {
            return (sign ? -Infinity : Infinity);
        }
        else {
            return (sign ? -NaN : NaN);
        }
    }

    expo = (val>>23 & 0xff);
    /* 8388608 is 2^23, in case you're curious. */
    if (expo) {
        res = ((val & 0x7fffff | 0x800000) / 8388608
            * Math.pow(2, (expo - 127)));
    }
    else {
        res = ((val & 0x7fffff) / 8388608
            * Math.pow(2, -126));
    }

    if (sign)
        return -res;
    else
        return res;
}

/* Convert a Javascript number into IEEE-754 single-precision format.
   The result will be a (non-negative) 32-bit integer.
*/
function encode_float(val) {
    var absval, fbits;
    var mant, expo, sign;

    if (isNaN(val)) {
        return 0x7f800001;
    }
    if (!isFinite(val)) {
        if (val < 0)
            return 0xff800000;
        else
            return 0x7f800000;
    }
    if (val == 0) {
        /* We have to deal with zeroes separately, because you can't test
           (-0 < 0) -- it ain't so. You have to turn the thing into an
           infinity and test that. */
        if (1 / val < 0)
            return 0x80000000;
        else
            return 0x0;
    }

    if (val < 0) {
        sign = true;
        absval = -val;
    }
    else {
        sign = false;
        absval = val;
    }

    expo = Math.floor(Math.log(absval) / Math.log(2));
    mant = absval / Math.pow(2, expo);

    if (expo >= 128) {
        /* Oops, overflow */
        return (sign ? 0xff800000 : 0x7f800000); /* infinity */
    }
    else if (expo < -126) {
        /* Denormalized (very small) number */
        mant = mant * Math.pow(2, 126 + expo);
        expo = 0;
    }
    else if (!(expo == 0 && mant == 0.0)) {
        expo += 127;
        mant -= 1.0; /* Get rid of leading 1 */
    }

    mant = mant * 8388608.0; /* 2^23 */

    /* We want to round mant to the nearest integer. However, we bias
       towards rounding down, in order to make Javascript's math
       (which is double-precision) match the single-precision C code. */
    fbits = (mant + 0.4999999999999999) << 0; 
    if (fbits >= 8388608) {
        /* The carry propagated out of a string of 23 1 bits. */
        fbits = 0;
        expo++;
        if (expo >= 255) {
            /* Oops, overflow */
            return (sign ? 0xff800000 : 0x7f800000); /* infinity */
        }
    }

    if (sign)
        return ((0x80000000) | (expo << 23) | (fbits)) >>>0;
    else
        return (expo << 23) | (fbits);
}

self.decode_float = decode_float;
self.encode_float = encode_float;

/* ----------------------------------------------------------------- */

/* Now we declare all the VM global variables and constants.

   Some of these are (private) variables; some live in the self object.
   There's no real difference, except for the rule that JIT-compiled
   functions cannot access private variables. I could have put all
   of them in self, but I was lazy.
*/

/* Parameters set at prepare() time, including the game image and any
   execution options. */

var game_image = null; /* the original game image, as an array of bytes */
var game_signature = null; /* string, containing the first 64 bytes of image */
var opt_rethrow_exceptions = null;
var opt_do_vm_autosave = null;
var opt_clear_vm_autosave = null;

/* The VM state variables. */

var memmap; /* array of bytes */
var stack; /* array of StackFrames */
self.frame = null; /* the top of the stack */
self.vm_started = false; /* Quixe is initialized */
self.vm_stopped = false; /* Quixe has shut down */
self.tempcallargs = null; /* only used momentarily, for enter_function() */
self.tempglkargs = null; /* only used momentarily, for the @glk opcode */
self.done_executing = null; /* signals that we've quit *or* paused for interaction */

var vmfunc_table; /* maps addresses to VMFuncs */
var vmtextenv_table; /* maps stringtable addresses to VMTextEnvs */
/* The following two variables point to inside the current string table.
   They are undefined if stringtable is zero, or a non-ROM address. */
var decoding_tree; /* binary tree of string nodes */
var vmstring_table; /* maps addresses to functions or strings */

self.random_func = null; /* Math.random or deterministic equivalent */

/* Header constants. */
var ramstart;
var endgamefile;   // always game_image.length
var origendmem;
var stacksize;     // not used -- we allow the stack to grow as needed
var startfuncaddr;
var origstringtable;
var checksum;

/* The VM registers. */
self.pc = null;
self.stringtable = null;
self.endmem = null;        // always memmap.length
self.protectstart = null;
self.protectend = null;
self.iosysmode = null;
self.iosysrock = null;

/* This is not needed for VM operation, but it may be needed for
   autosave/autorestore. It is updated very lazily -- only when
   beginning a blocking @glk opcode. (I.e., only when we're about
   to autosave.) */
self.prevpc = null;

var undostack;     // array of VM state snapshots.
self.resumefuncop = null;
self.resumevalue = null;

/* Memory allocation heap. Blocks have "addr" and "size" properties. */
var heapstart;     // Start address of the heap.
var usedlist;      // Sorted array of used blocks.
var freelist;      // Sorted array of free blocks.

/* Statistics -- may only be meaningful in a debug release. */
var total_execution_time = 0;
var total_function_calls = 0;
var accel_function_calls = 0;
var total_path_calls = 0;
var paths_cached = 0;
var paths_compiled = 0;
var strings_cached = 0;
var strings_compiled = 0;

/* Set up all the initial VM state.
*/
function setup_vm() {
    var val, version;

    if (!game_image)
        fatal_error("There is no Glulx game file loaded.");

    self.vm_started = true;
    self.resumefuncop = null;
    self.resumevalue = 0;
    memmap = null;
    stack = [];
    self.frame = null;
    self.pc = 0;
    self.prevpc = 0;

    if (game_image.length < 36)
        fatal_error("This is too short to be a valid Glulx file.");
    val = ByteRead4(game_image, 0);
    if (val != 0x476c756c)   // 'Glul'
        fatal_error("This is not a valid Glulx file.");
    
    /* We support version 2.0 through 3.1.*. */
    version = ByteRead4(game_image, 4);
    if (version < 0x20000) 
        fatal_error("This Glulx file is too old a version to execute.");
    if (version >= 0x30200) 
        fatal_error("This Glulx file is too new a version to execute.");

    ramstart = ByteRead4(game_image, 8);
    endgamefile = ByteRead4(game_image, 12);
    origendmem = ByteRead4(game_image, 16);
    stacksize = ByteRead4(game_image, 20);
    startfuncaddr = ByteRead4(game_image, 24);
    origstringtable = ByteRead4(game_image, 28);
    checksum = ByteRead4(game_image, 32);

    /* Set the protection range to (0, 0), meaning "off". */
    self.protectstart = 0;
    self.protectend = 0;

    if (ramstart < 0x100 
        || endgamefile < ramstart 
        || origendmem < endgamefile) 
        fatal_error("The segment boundaries in the header are in an impossible order.");

    if (endgamefile != game_image.length)
        fatal_error("The game file length does not agree with the header.");

    self.done_executing = false;
    vmfunc_table = {};
    vmtextenv_table = {};
    decoding_tree = undefined;
    vmstring_table = undefined;
    self.tempcallargs = Array(8);
    self.tempglkargs = Array(8);
    set_random(0);

    self.endmem = origendmem;
    self.stringtable = 0;

    undostack = [];

    heapstart = 0;
    usedlist = [];
    freelist = [];

    if (opt_clear_vm_autosave) {
        Dialog.autosave_write(game_signature, null);
    }
    if (opt_do_vm_autosave && !opt_clear_vm_autosave) {
        try {
            var snapshot = Dialog.autosave_read(game_signature);
            if (snapshot) {
                qlog('Found autosave...');
                vm_autorestore(snapshot);
                return;
            }
        }
        catch (ex) {
            qlog('Autorestore failed, deleting it: ' + show_exception(ex));
            if (ex.stack)
                qlog('JS stack dump:\n' + ex.stack);
            Dialog.autosave_write(game_signature, null);
        }
    }
    
    vm_restart();
}

/* Put the VM into a state where it's ready to begin executing the
   game. This is called both at startup time, and when the machine
   performs a "restart" opcode. 
*/
function vm_restart() {
    var ix;

    /* Deactivate the heap (if it was active). */
    heap_clear();

    var protect = copy_protected_range();

    /* Build (or rebuild) main memory array. */
    memmap = null; // garbage-collect old memmap
    memmap = game_image.slice(0, endgamefile);
    self.endmem = memmap.length;
    change_memsize(origendmem, false);
    /* endmem is now origendmem */

    paste_protected_range(protect);

    stack = [];
    self.frame = null;
    self.pc = 0;
    self.prevpc = 0;
    self.iosysmode = 0;
    self.iosysrock = 0;
    set_string_table(origstringtable);

    /* Note that we do not reset the protection range. */
    
    /* Push the first function call. (No arguments.) */
    enter_function(startfuncaddr, 0);
    
    /* We're now ready to execute. */
}
self.vm_restart = vm_restart;

/* Run-length-encode an array, for Quetzal. */
function compress_bytes(arr) {
    result = [];
    var i = 0;
    while (i < arr.length) {
        var zeroes = 0;
        while (i < arr.length && arr[i] == 0 && zeroes <= 255) {
            zeroes++;
            i++;
        }
        if (zeroes > 0) {
            result.push(0);
            result.push(zeroes - 1);
        }
        while (i < arr.length && arr[i] != 0) {
            result.push(arr[i]);
            i++;
        }
    }
    //qlog("Compressed " + arr.length + " bytes to " + result.length);
    return result;
}

/* Run-length-decode an array, for Quetzal. */
function decompress_bytes(arr) {
    result = [];
    var i = 0;
    while (i < arr.length) {
        var b = arr[i++];
        if (b == 0) {
            var count = arr[i++] + 1;
            for (var j = 0; j < count; j++) {
                result.push(0);
            }
        } else {
            result.push(b);
        }
    }
    //qlog("Decompressed " + arr.length + " bytes to " + result.length);
    return result;
}

/* Pack an array of { key:ID, chunk:bytes } into a single byte array.
   The ID should be a 4-character string.
*/
function pack_iff_chunks(chunks) {
    bytes = [];
    for (var ix = 0; ix < chunks.length; ix++) {
        var key = chunks[ix].key;
        var chunk = chunks[ix].chunk;
        if (key.length != 4) {
            fatal_error("Bad chunk ID (must be exactly 4 chars): " + key);
        }
        if (chunk == undefined) {
            fatal_error("Missing chunk data: " + key);
        }
        //qlog("Writing " + key + " (" + chunk.length + " bytes)");
        BytePushString(bytes, key);
        BytePush4(bytes, chunk.length);
        bytes = bytes.concat(chunk);
        /* Align to even length... */
        if (bytes.length & 1)
            bytes.push(0);
    }
    return bytes;
}

/* Unpack a byte array into an { ID -> bytes } map, or undefined on error.
   The order of chunks is not preserved.
*/
function unpack_iff_chunks(bytes) {
    chunks = {};
    var pos = 0;
    while (pos < bytes.length) {
        if ((pos + 8) > bytes.length) {
          qlog("IFF chunk header is truncated");
          return undefined;
        }
        var key = ByteReadString(bytes, pos, 4);
        var size = ByteRead4(bytes, pos + 4);
        pos += 8;

        if ((pos + size) > bytes.length) {
          qlog(key + " chunk is truncated " +
                "(" + size + " bytes needed, " + (bytes.length - pos) + " available");
          return undefined;
        }
        chunks[key] = bytes.slice(pos, pos + size);
        pos += size;
        /* Align to even length... */
        if (pos & 1)
            pos += 1;
        //qlog("Reading " + key + " (" + size + " bytes)");
    }
    return chunks;
}

/* Writes a snapshot of the VM state to the given Glk stream. Returns true
   on success. 
*/
function vm_save(streamid) {
    ;;;if (memmap.length != self.endmem) {
    ;;;    fatal_error("Memory length was incorrect before save."); //assert
    ;;;}

    if (self.iosysmode != 2)
        fatal_error("Streams are only available in Glk I/O system.");

    var str = GiDispa.class_obj_from_id('stream', streamid);
    if (!str)
        return false;
    
    chunks = [];
    
    chunks.push({ key:"IFhd", chunk:game_image.slice(0, 128) });
    
    var cmem = memmap.slice(ramstart);
    for (var i = ramstart; i < game_image.length; i++) {
        cmem[i - ramstart] ^= game_image[i];
    }
    cmem = compress_bytes(cmem);
    cmem.splice(0, 0, 0,0,0,0); // prepend four zeroes
    // Write in the endmem value
    ByteWrite4(cmem, 0, self.endmem);
    chunks.push({key:"CMem", chunk:cmem});
    
    var stkschunk = [];
    chunks.push({ key:"Stks", chunk:stkschunk });
    for (var i = 0; i < stack.length; i++) {
        push_serialized_stackframe(stack[i], stkschunk);
    }

    if (heap_is_active()) {
        var mallchunk = [];
        chunks.push({ key:"MAll", chunk:mallchunk });
        BytePush4(mallchunk, heapstart);
        BytePush4(mallchunk, usedlist.length);
        for (var i = 0; i < usedlist.length; i++) {
            BytePush4(mallchunk, usedlist[i].addr);
            BytePush4(mallchunk, usedlist[i].size);
        }
    }

    var payload_bytes = []
    BytePushString(payload_bytes, "IFZS");
    payload_bytes = payload_bytes.concat(pack_iff_chunks(chunks));
    
    var quetzal = pack_iff_chunks([{ key:"FORM", chunk:payload_bytes }])
    //qlog("vm_save: writing " + quetzal.length + " bytes");    
    Glk.glk_put_buffer_stream(str, quetzal);
    return true;
}

/* Reads a VM state snapshot from the given Glk stream and restores it.
   Returns true on success.
*/
function vm_restore(streamid) {
    if (self.iosysmode != 2)
        fatal_error("Streams are only available in Glk I/O system.");

    var str = GiDispa.class_obj_from_id('stream', streamid);
    if (!str)
        return false;
    
    var quetzal = new Array(0);
    var buffer = new Array(1024);
    var count = 1;
    while (count > 0) {
        count = Glk.glk_get_buffer_stream(str, buffer);
        quetzal = quetzal.concat(buffer.slice(0, count));
    }
    //qlog("vm_restore: reading " + quetzal.length + " bytes");
    
    quetzal = unpack_iff_chunks(quetzal);
    if (!quetzal) {
        qlog("vm_restore failed: file is not Quetzal");
        return false;
    }
    quetzal = quetzal["FORM"];
    if (!quetzal || ByteReadString(quetzal, 0, 4) != "IFZS") {
        qlog("vm_restore failed: file doesn't start with FORM/IFZS header");
        return false;
    }
    var chunks = unpack_iff_chunks(quetzal.slice(4));

    // Unpack the chunks map into the VM state. (This is destructive to
    // the contents of chunks.)
    
    if (!chunks["IFhd"]) {
        qlog("vm_restore failed: missing required IFhd chunk");
        return false;
    }
    for (var i = 0; i < 128; i++) {
        if (chunks["IFhd"][i] != game_image[i]) {
            qlog("vm_restore failed: this save image is for a different game");
            return false;
        }
    }    
    if (!chunks["CMem"]) {
        qlog("vm_restore failed: missing required CMem chunk");
        return false;
    }
    if (!chunks["Stks"]) {
        qlog("vm_restore failed: missing required Stks chunk");
        return false;
    }
    
    // The point of no return.
    var protect = copy_protected_range();
    heap_clear();
    
    var newendmem = ByteRead4(chunks["CMem"], 0);
    var ram_xor = chunks["CMem"].slice(4);
    ram_xor = decompress_bytes(ram_xor);
    // The trailing zeroes may have been snipped; add them in.
    while (ram_xor.length < newendmem - ramstart)
        ram_xor.push(0);
    change_memsize(newendmem, false);
    memmap = game_image.slice(0, ramstart).concat(ram_xor);
    for (var i = ramstart; i < game_image.length; i++) {
        memmap[i] ^= game_image[i];
    }

    ;;;if (memmap.length != self.endmem) {
    ;;;    fatal_error("Memory length was incorrect after restore."); //assert
    ;;;}

    var stackchunk = chunks["Stks"];
    stack = [];
    while (stackchunk.length) {
        self.frame = pop_deserialized_stackframe(stackchunk);
        if (!self.frame) {
            fatal_error("vm_restore failed: bad stack frame");
        }
        stack.unshift(self.frame);
    }
    for (var i = 0; i < stack.length; i++) {
        stack[i].depth = i;
    }
    self.frame = stack[stack.length - 1];

    var heapchunk = chunks["MAll"];
    if (heapchunk && heapchunk.length >= 8) {
        heapstart = ByteRead4(heapchunk, 0);
        var numblocks = ByteRead4(heapchunk, 4);

        for (var i = 0; i < numblocks; i++) {
            var addr = ByteRead4(heapchunk, 8 + 8*i);
            var size = ByteRead4(heapchunk, 12 + 8*i);
            usedlist.push(new HeapBlock(addr, size));
        }

        // This list may be out-of-order. Sort it by address.
        usedlist.sort(function(blk1, blk2) {return blk1.addr - blk2.addr;});

        // Create freelist blocks to fill in the gaps.
        var heapend = heapstart;
        for (var i = 0; i < usedlist.length; i++) {
            var addr = usedlist[i].addr;
            var size = usedlist[i].size;
            if (addr < heapend || (addr + size) > self.endmem) {
                fatal_error("vm_restore failed: corrupt dynamic heap");
            }
            if (addr > heapend) {
                freelist.push(new HeapBlock(heapend, addr - heapend));
            }
            heapend = addr + size;
        }
        if (heapend < self.endmem) {
            freelist.push(new HeapBlock(heapend, self.endmem - heapend));
        }
    }

    ;;;assert_heap_valid(); //assert
    
    paste_protected_range(protect);
    return true;
}

/* Writes a snapshot of the VM state to a special file (not represented
   by a fileref -- that's how special it is). The eventaddr is the
   VM address of the event structure; we'll need it to autorestore
   properly.

   This looks a lot like vm_save, but we serialize a little differently.
   We're creating a JSONable object.
*/
function vm_autosave(eventaddr) {
    if (eventaddr < 0) {
        /* Delete the autosave. */
        //qlog('### deleting autosave');
        Dialog.autosave_write(game_signature, null);
        return;
    }

    //var timestart = new Date().getTime(); //###stats

    var opmodes = parse_partial_operand();
    if (!opmodes)
        return;

    var snapshot = {};

    /* When the save file is autorestored, the VM will restart the @glk
       opcode. That means that the Glk argument (the event structure
       address) must be waiting on the stack. Possibly also the @glk
       opcode's operands -- these might or might not have come off the
       stack. */

    var valstack = self.frame.valstack;
    var origstacklen = valstack.length;
    /* The event structure address: */
    valstack.push(eventaddr);
    if (opmodes.argsop == 8) {
        /* The number of Glk arguments (1): */
        valstack.push(1);
    }
    if (opmodes.selop == 8) {
        /* The Glk call selector (0x00C0): */
        valstack.push(0x00C0);
    }

    /* Push a temporary callstub which contains the *last* PC -- the address
       of the @glk(select) invocation. */
    valstack.push(0, 0, self.prevpc, self.frame.framestart);

    /* Save the RAM, stack, and heap. */

    snapshot.ram = memmap.slice(ramstart);
    snapshot.endmem = self.endmem;
    snapshot.pc = self.pc;
    snapshot.stack = [];
    for (var i = 0; i < stack.length; i++) {
        push_serialized_stackframe(stack[i], snapshot.stack);
    }

    if (heap_is_active()) {
        snapshot.heapstart = heapstart;
        snapshot.usedlist = [];
        for (var i = 0; i < usedlist.length; i++) {
            snapshot.usedlist.push(usedlist[i].addr);
            snapshot.usedlist.push(usedlist[i].size);
        }
    }

    /* Pop off the temporary stack stuff. */
    valstack.length = origstacklen;

    /* Save miscellaneous VM things which are not part of a standard
       save state. */
    snapshot.stringtable = self.stringtable;
    snapshot.iosysmode = self.iosysmode;
    snapshot.iosysrock = self.iosysrock;
    snapshot.protectstart = self.protectstart;
    snapshot.protectend = self.protectend;
    if (self.random_func == srand_get_random && srand_table) {
        snapshot.srand_table = srand_table.slice(0);
        snapshot.srand_index1 = srand_index1;
        snapshot.srand_index2 = srand_index2;
    }
    snapshot.accel_params = accel_params.slice(0);
    snapshot.accel_funcnum_map = {};
    for (var ix in accel_funcnum_map)
        snapshot.accel_funcnum_map[ix] = accel_funcnum_map[ix];

    /* Tell the Glk API layer to save its own state and pass it back
       to us. (This includes the glui32-to-Glk-ID table.) */
    snapshot.glk = Glk.save_allstate();

    /* Write the snapshot into an appropriate location, which depends
       on the game signature. */
    Dialog.autosave_write(game_signature, snapshot);

    //var timeend = new Date().getTime(); //###stats
    //qlog("### autosave complete; time = " + (timeend-timestart) + " ms");
}

/* Load a snapshot of the VM state back in. This is called at the end of
   vm_setup, replacing the vm_restart call.
*/
function vm_autorestore(snapshot) {

    memmap = game_image.slice(0, endgamefile);
    memmap = memmap.slice(0, ramstart).concat(snapshot.ram);
    self.endmem = snapshot.endmem;
    self.pc = snapshot.pc;

    stack = [];

    var stackchunk = snapshot.stack.slice(0);
    while (stackchunk.length) {
        var frm = pop_deserialized_stackframe(stackchunk);
        if (!frm) {
            fatal_error("vm_autorestore failed: bad stack frame");
        }
        stack.unshift(frm);
    }
    for (var i = 0; i < stack.length; i++) {
        stack[i].depth = i;
    }
    self.frame = stack[stack.length - 1];

    if (snapshot.heapstart === undefined) {
        heapstart = 0;
        usedlist = [];
        freelist = [];
    }
    else {
        heapstart = snapshot.heapstart;

        usedlist = [];
        for (var ix = 0; ix < snapshot.usedlist.length; ix += 2) {
            var addr = snapshot.usedlist[ix];
            var size = snapshot.usedlist[ix+1];
            usedlist.push(new HeapBlock(addr, size));
        }

        // This list may be out-of-order. Sort it by address.
        usedlist.sort(function(blk1, blk2) {return blk1.addr - blk2.addr;});

        // Create freelist blocks to fill in the gaps.
        freelist = [];
        var heapend = heapstart;
        for (var i = 0; i < usedlist.length; i++) {
            var addr = usedlist[i].addr;
            var size = usedlist[i].size;
            if (addr < heapend || (addr + size) > self.endmem) {
                fatal_error("vm_autorestore failed: corrupt dynamic heap");
            }
            if (addr > heapend) {
                freelist.push(new HeapBlock(heapend, addr - heapend));
            }
            heapend = addr + size;
        }
        if (heapend < self.endmem) {
            freelist.push(new HeapBlock(heapend, self.endmem - heapend));
        }
    }

    ;;;assert_heap_valid(); //assert

    /* Restore miscellaneous VM things which are not part of a standard
       save state. */
    set_string_table(snapshot.stringtable);
    set_iosys(snapshot.iosysmode, snapshot.iosysrock);
    self.protectstart = snapshot.protectstart;
    self.protectend = snapshot.protectend;

    if (snapshot.srand_table === undefined) {
        set_random(0);
    }
    else {
        set_random(1);
        srand_table = snapshot.srand_table.slice(0);
        srand_index1 = snapshot.srand_index1;
        srand_index2 = snapshot.srand_index2;
    }

    accel_params = snapshot.accel_params.slice(0);
    for (var ix in snapshot.accel_funcnum_map) {
        accel_funcnum_map[ix] = snapshot.accel_funcnum_map[ix];
        accel_address_map[ix] = self.accel_func_map[accel_funcnum_map[ix]];
    }

    /* Restore Glk API information. */
    Glk.restore_allstate(snapshot.glk);

    /* Pop the callstub, restoring the PC to the @glk opcode (prevpc). */
    pop_callstub(0);
}

/* Pushes a snapshot of the VM state onto the undo stack. If there are too
   many on the stack, throw away the oldest.
*/
function vm_saveundo() {
    ;;;if (memmap.length != self.endmem) {
    ;;;    fatal_error("Memory length was incorrect before saveundo."); //assert
    ;;;}

    var snapshot = {};
    snapshot.ram = memmap.slice(ramstart);
    snapshot.endmem = self.endmem;
    snapshot.pc = self.pc;
    snapshot.stack = [];
    for (var i = 0; i < stack.length; i++) {
        snapshot.stack[i] = clone_stackframe(stack[i]);
    }

    snapshot.heapstart = heapstart;
    snapshot.usedlist = usedlist.slice(0);
    snapshot.freelist = freelist.slice(0);

    undostack.push(snapshot);
    if (undostack.length > 10) {
        undostack.shift();
    }
}

/* Pops a VM state snapshot from the undo stack (if possible) and restores it.
   Returns true on success.
*/
function vm_restoreundo() {
    if (undostack.length == 0) {
        return false;
    }
    var snapshot = undostack.pop();
    var protect = copy_protected_range();

    memmap = memmap.slice(0, ramstart).concat(snapshot.ram);
    self.endmem = snapshot.endmem;
    stack = snapshot.stack;
    self.frame = stack[stack.length - 1];
    self.pc = snapshot.pc;

    heapstart = snapshot.heapstart;
    usedlist = snapshot.usedlist;
    freelist = snapshot.freelist;
    
    paste_protected_range(protect);

    ;;;if (memmap.length != self.endmem) {
    ;;;    fatal_error("Memory length was incorrect after undo."); //assert
    ;;;}
    ;;;assert_heap_valid(); //assert

    return true;
}

self.vm_save = vm_save;
self.vm_restore = vm_restore;
self.vm_saveundo = vm_saveundo;
self.vm_restoreundo = vm_restoreundo;

/* Change the size of the memory map. The internal flag should be true 
   only when the heap-allocation system is calling.
*/
function change_memsize(newlen, internal) {
    var lx;

    if (newlen == self.endmem)
        return;

    if ((!internal) && heap_is_active())
        fatal_error("Cannot resize Glulx memory space while heap is active.");
    if (newlen < origendmem)
        fatal_error("Cannot resize Glulx memory space smaller than it started.");
    if (newlen & 0xFF)
        fatal_error("Can only resize Glulx memory space to a 256-byte boundary.");

    memmap.length = newlen;
    if (newlen > self.endmem) {
        for (lx=self.endmem; lx<newlen; lx++) {
            memmap[lx] = 0;
        }
    }

    self.endmem = newlen;    
}
self.change_memsize = change_memsize;

/* Return an object which represents the protected-memory range and its
   contents. This can later be pasted back into the VM. If there is no
   protection range, this returns null.

   The idea is that you call this before a restore/restart operation, and
   then call paste_protected_range() afterwards.
*/
function copy_protected_range() {
    if (self.protectstart >= self.protectend)
        return null;

    var len = self.protectend - self.protectstart;
    var obj = {
        start: self.protectstart,
        end: self.protectend,
        len: len
    };
    var arr = memmap.slice(self.protectstart, self.protectend);

    /* It is legal to protect a range that falls outside of memory; the
       extra bits are presumed to be zero. */
    while (arr.length < len)
        arr.push(0);
    obj.mem = arr;

    return obj;
}

/* Paste a protected-memory range into the VM. 
*/
function paste_protected_range(obj) {
    if (!obj)
        return;

    var ix, addr;
    var arr = obj.mem;
    var start = obj.start;
    var end = obj.end;
    if (end > self.endmem)
        end = self.endmem;

    for (ix=0, addr=start; addr<end; ix++, addr++) {
        memmap[addr] = arr[ix];
    }
}

/* The checksum check. */
function perform_verify() {
    var imagelen = game_image.length;
    var ix, newsum, checksum;

    if (imagelen < 0x100 || (imagelen & 0xFF) != 0)
        return 1;
    if (imagelen != ByteRead4(game_image, 12))
        return 1;

    checksum = ByteRead4(game_image, 32);
    /* Allow for the fact that the checksum is computed with the checksum
       field zeroed. */
    newsum = (-checksum) >>>0;

    for (ix=0; ix<imagelen; ix+=4) {
        newsum = (newsum + ByteRead4(game_image, ix)) >>>0;
    }

    if (newsum != checksum)
        return 1;

    return 0;
}
self.perform_verify = perform_verify;

/* Return the game image signature. This is used as a fingerprint on save
   files, to ensure that you can't save in one game and restore in a 
   different one.
*/
function quixe_get_signature() {
    return game_signature;
}

/* Return the internal self object. This gives the caller access to
   the entire VM state, including memory. So use it wisely.
*/
function quixe_get_vm_self() {
    return self;
}

/* Return whatever information seems useful about execution so far.
   This is not meant to be super-efficient; it does some counting
   every time you call it.
*/
function quixe_get_statistics() {
    var stat = {
        game_image_length: game_image.length,
        total_execution_time: total_execution_time,
        total_function_calls: total_function_calls,
        accel_function_calls : accel_function_calls,
        total_path_calls: total_path_calls,
        paths_cached: paths_cached,
        paths_compiled: paths_compiled,
        strings_cached: strings_cached,
        strings_compiled: strings_compiled
    };

    return stat;
}

/* Heap functions. */

function heap_clear() {
    heapstart = 0;
    usedlist = [];
    freelist = [];
}

function heap_is_active() {
    return (usedlist.length > 0);
}

function heap_get_start() {
    return heapstart;
}

/* Constructor: HeapBlock

   We never modify heap blocks, to ensure they can be reused safely across
   saveundo() and restore().
*/
function HeapBlock(addr, size) {
    this.addr = addr;
    this.size = size;
    this.end = addr + size;
}

/* Search list of HeapBlock objects for the given address.
   If the exact address isn't found, return index of next highest address.
*/
function heap_binary_search(list, addr) {
    var low = 0;
    var high = list.length;
    while (low < high) {
        var mid = (low + high) >> 1;
        if (list[mid].addr < addr) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }
    return low;
}

function heap_malloc(size) {
    if (!heap_is_active()) {
        heapstart = self.endmem;
    }
    
    for (var i = 0, max = freelist.length; i < max; i++) {
        var freeblock = freelist[i];
        if (freeblock.size >= size) {
            // Free block is big enough. Off with its head.
            if (freeblock.size > size) {
                freelist[i] = new HeapBlock(freeblock.addr + size, freeblock.size - size);
            } else {
                freelist.splice(i, 1);
            }
            var pos = heap_binary_search(usedlist, freeblock.addr);
            usedlist.splice(pos, 0, new HeapBlock(freeblock.addr, size));
            return freeblock.addr;
        }
    }

    // No free block is big enough. Grow the heap.
    var addr = self.endmem;
    var rounded_up_size = ((size + 0xFF) & 0xFFFFFF00);
    change_memsize(self.endmem + rounded_up_size, true);
    if (rounded_up_size > size) {
        freelist.push(new HeapBlock(addr + size, rounded_up_size - size));
    }
    usedlist.push(new HeapBlock(addr, size));
    return addr;
}
self.heap_malloc = heap_malloc;

function heap_free(addr) {
    var pos = heap_binary_search(usedlist, addr);
    var block = usedlist[pos];
    if (!block || block.addr != addr) {
        fatal_error("Tried to free non-existent block");
    }
    usedlist.splice(pos, 1);
    
    if (usedlist.length == 0) {
        // No allocated blocks left. Blow away the whole heap.
        change_memsize(heapstart, true);
        heap_clear();
        return;
    }

    // Find the correct position to insert this block into the freelist.
    pos = heap_binary_search(freelist, addr);

    // If the next block is free, merge with it.
    var next = freelist[pos];
    if (next && next.addr == block.end) {
        block = new HeapBlock(addr, block.size + next.size);
        freelist.splice(pos, 1);
    }
    
    // If the previous block is free, merge with it.
    var prev = freelist[pos - 1];
    if (prev && prev.end == block.addr) {
        block = new HeapBlock(prev.addr, prev.size + block.size);
        freelist.splice(pos - 1, 1);
        pos -= 1;
    }
    
    freelist.splice(pos, 0, block);
}
self.heap_free = heap_free;

/* Check that the heap state is consistent. This is slow, so we only
   call it in debug assertions.
*/
function assert_heap_valid() {
    //qlog("### heap check: heapstart " + heapstart + ", " + usedlist.length + " used, " + freelist.length + " free");
    if (!heap_is_active()) {
        if (heapstart != 0)
            fatal_error("Heap inconsistency: heapstart nonzero");

        if (usedlist.length > 0)
            fatal_error("Heap inconsistency: usedlist nonempty");

        if (freelist.length > 0)
            fatal_error("Heap inconsistency: usedlist nonempty");

        return;
    }

    if (heapstart == 0)
        fatal_error("Heap inconsistency: heapstart is zero");

    var addr = heapstart;
    var upos = 0, fpos = 0;
    while (upos < usedlist.length || fpos < freelist.length) {
        var u = usedlist[upos];
        var f = freelist[fpos];
        if (u && u.addr == addr) {
            //qlog("###..."+u.addr+" ("+u.size+" alloc)");
            addr += u.size;
            upos++;
        } else if (f && f.addr == addr) {
            //qlog("###..."+f.addr+" ("+f.size+" free)");
            addr += f.size;
            fpos++;
        } else {
            fatal_error("Heap inconsistency: no block at address " + addr);
        }
    }
    
    if (addr != self.endmem)
        fatal_error("Heap inconsistency: overrun at end of heap");
}
self.assert_heap_valid = assert_heap_valid;

var debuginfo = {
    map: {},
    functions: [],
    functionmap: {}
};

function quixe_get_debuginfo() {
    return debuginfo;
}

function parse_inform_debug_data() {
    var buf = GiLoad.get_debug_info();
    if (!buf)
        return;
    var done;
    var pos, oldpos;
    
    if (!(buf[0] == 0xDE && buf[1] == 0xBF && buf[2] == 0 && buf[3] == 0)) {
        qlog("Dbug chunk did not contain an (old-style) Inform gameinfo.dbg file");
        return;
    }
    
    var informversion = (buf[4]<<8) | (buf[5]);
    pos = 6;
    done = false;

    while (!done) {
        var rectype = buf[pos++];

        switch (rectype) {
            case 0:
            case undefined:
                done = true;
                break;

            case 1: /* file */
                var filenum = buf[pos++];
                oldpos = pos; while (buf[pos]) { pos++ };
                var includename = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                oldpos = pos; while (buf[pos]) { pos++ };
                var filename = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 2: /* class */
                oldpos = pos; while (buf[pos]) { pos++ };
                var classname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                var linestart = buf.slice(pos, pos+4);
                pos += 4;
                var lineend = buf.slice(pos, pos+4);
                pos += 4;
                break;

            case 3: /* object */
                var objnum = (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var objname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                var linestart = buf.slice(pos, pos+4);
                pos += 4;
                var lineend = buf.slice(pos, pos+4);
                pos += 4;
                break;

            case 4: /* global */
                var num = (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 5: /* attribute */
                var num = (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 6: /* property */
                var num = (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 7: /* fake action */
                var num = (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 8: /* action */
                var num = (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 9: /* header */
                pos += 64;
                break;

            case 10: /* sequence point */
                var funcnum = (buf[pos++]<<8) | (buf[pos++]);
                var seqcount = (buf[pos++]<<8) | (buf[pos++]);
                pos += seqcount * 6;
                break;

            case 11: /* function */
                var funcnum = (buf[pos++]<<8) | (buf[pos++]);
                var line = buf.slice(pos, pos+4);
                pos += 4;
                var funcaddr = (buf[pos++]<<16) | (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var funcname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                var locals = [];
                while (buf[pos]) {
                    oldpos = pos; while (buf[pos]) { pos++ };
                    var locname = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                    pos++;
                    locals.push(locname);
                }
                pos++;
                debuginfo.functions.push({ 
                    num:funcnum, name:funcname, addr:funcaddr,
                    locals:locals });
                break;

            case 12: /* array */
                var arrayaddr = (buf[pos++]<<8) | (buf[pos++]);
                oldpos = pos; while (buf[pos]) { pos++ };
                var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                pos++;
                break;

            case 13: /* map */
                while (buf[pos]) {
                    oldpos = pos; while (buf[pos]) { pos++ };
                    var name = String.fromCharCode.apply(this, buf.slice(oldpos, pos));
                    pos++;
                    var addr = (buf[pos++]<<16) | (buf[pos++]<<8) | (buf[pos++]);
                    debuginfo.map[name] = addr;
                }
                pos++;
                break;

            case 14: /* function end */
                var funcnum = (buf[pos++]<<8) | (buf[pos++]);
                var line = buf.slice(pos, pos+4);
                pos += 4;
                var endaddr = (buf[pos++]<<16) | (buf[pos++]<<8) | (buf[pos++]);
                break;                

            default:
                qlog("Unknown record type in debug data: " + rectype);
                done = true;
                break;
        }
    }

    var funcbase = debuginfo.map["code area"];
    if (funcbase) {
        var ix;
        for (ix=0; ix<debuginfo.functions.length; ix++) {
            var func = debuginfo.functions[ix];
            debuginfo.functionmap[funcbase+func.addr] = func;
        }
    }
}

/* Dummy value, returned by path functions on @quit or when leave_function()
   pops the top-level stack frame. */
self.VMStopped = { dummy: 'The top-level function has returned.' };

/* Begin executing code, compiling as necessary. When glk_select is invoked,
   or the game ends, this calls Glk.update() and exits.
*/
function execute_loop() {
    var vmfunc, pathtab, path;
    var pathstart, pathend;

    if (self.resumefuncop) {
        //qlog("### at resume time, storing value " + self.resumevalue + " at funcop " + self.resumefuncop.key);
        store_operand_by_funcop(self.resumefuncop, self.resumevalue);
        self.resumefuncop = null;
        self.resumevalue = 0;
    }

    pathstart = new Date().getTime(); //###stats

    while (!self.done_executing) {
        //qlog("### pc now " + self.pc.toString(16));
        vmfunc = self.frame.vmfunc;
        pathtab = vmfunc[self.iosysmode];
        path = pathtab[self.pc];
        if (path === undefined) {
            vmfunc.pathaddrs[self.pc] = true;
            path = compile_path(vmfunc, self.pc, self.iosysmode);
            paths_compiled++; //###stats
            if (self.pc < ramstart) {
                pathtab[self.pc] = path;
                paths_cached++; //###stats
            }
        }
        total_path_calls++; //###stats
        var res = path(self);
        if (res === self.VMStopped) {
            self.done_executing = true;
            self.vm_stopped = true;
        }
    }

    pathend = new Date().getTime(); //###stats
    total_execution_time += (pathend-pathstart) / 1000.0; //###stats

    if (self.vm_stopped) {
        /* If the library resumes us after exiting, we'll call glk_exit()
           again. That's the library's problem. */
        Glk.glk_exit();
    }

    Glk.update();

    qlog("### done executing; path time = " + (pathend-pathstart) + " ms");
}

/* End of Quixe namespace function. Return the object which will
   become the Quixe global. */
return {
    version: '2.1.6', /* Quixe version */
    prepare: quixe_prepare,
    init: quixe_init,
    resume: quixe_resume,
    get_signature: quixe_get_signature,
    get_vm_internals: quixe_get_vm_self,
    get_statistics: quixe_get_statistics,
    get_debuginfo: quixe_get_debuginfo,

    ReadByte: ReadArgByte,
    WriteByte: WriteArgByte,
    ReadWord: ReadArgWord,
    WriteWord: WriteArgWord,
    ReadStructField: ReadStructField,
    WriteStructField: WriteStructField,
    SetResumeStore: SetResumeStore,

    do_autosave: vm_autosave
};

}();

/* End of Quixe library. */


/***/ }),

/***/ "./src/vorple/audio.js":
/*!*****************************!*\
  !*** ./src/vorple/audio.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaults": () => (/* binding */ defaults),
/* harmony export */   "clearPlaylist": () => (/* binding */ clearPlaylist),
/* harmony export */   "currentMusicPlaying": () => (/* binding */ currentMusicPlaying),
/* harmony export */   "fadeOut": () => (/* binding */ fadeOut),
/* harmony export */   "isAudioPlaying": () => (/* binding */ isAudioPlaying),
/* harmony export */   "isEffectPlaying": () => (/* binding */ isEffectPlaying),
/* harmony export */   "isElementPlaying": () => (/* binding */ isElementPlaying),
/* harmony export */   "isMusicPlaying": () => (/* binding */ isMusicPlaying),
/* harmony export */   "playMusic": () => (/* binding */ playMusic),
/* harmony export */   "playSound": () => (/* binding */ playSound),
/* harmony export */   "setPlaylist": () => (/* binding */ setPlaylist),
/* harmony export */   "stopMusic": () => (/* binding */ stopMusic)
/* harmony export */ });
/* harmony import */ var _file__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./file */ "./src/vorple/file.js");


/**
 * @module audio
 */

/**
 * @private
 */
let musicQueue = [];

/**
 * @private
 */
let musicPauseTimer;

/**
 * @private
 */
let playlist = [];


/**
 * Default values for durations.
 *
 * @type {{fadeDuration: number, pauseBetweenTracks: number}}
 */
const defaults = {
    fadeDuration: 1000,         // the duration of fade in or out, in milliseconds
    pauseBetweenTracks: 1000    // how long to pause between music tracks, in milliseconds
};


/**
 * Sets a timer that starts the next track in the music queue
 * after the time specified by defaults.pauseBetweenTracks.
 *
 * @private
 */
function timeNextTrack() {
    clearTimeout( musicPauseTimer );

    if( musicQueue.length === 0 && playlist.length > 0 ) {
        musicQueue = playlist.slice();
    }

    // no tracks in any queue, do nothing
    if( musicQueue.length === 0 ) {
        return;
    }

    // make sure the "stopping" flag is set (even though the audio has already stopped)
    $( '.vorple-music' ).data( "stopping", true );

    musicPauseTimer = setTimeout( function() {
        const next = musicQueue.shift();

        if( next ) {
            playMusic( next.url, next.looping );
        }
    }, defaults.pauseBetweenTracks );
}


/**
 * Clears the playlist and the music queue. Does not stop music that's
 * currently playing.
 */
function clearPlaylist() {
    playlist = [];
    musicQueue = [];
}


/**
 * Gets the name of the currently playing music file, or null if nothing
 * is playing. If music has been asked to stop, returns the
 * music that will play next.
 *
 * @returns {string|null}
 */
function currentMusicPlaying() {
    const $music = $( '.vorple-music' );

    if( $music.length === 0 ) {
        return null;
    }

    if( $music.data( 'stopping' ) || !isMusicPlaying() ) {
        if( musicQueue.length > 0 ) {
            return musicQueue[ 0 ].url;
        }

        if( playlist.length > 0 ) {
            return playlist[ 0 ].url;
        }

        return null;
    }

    return $music.data( 'resourceurl' ) || $music.attr( 'src' );
}


/**
 * Fades out sound.
 *
 * @param {string|object} element  The audio element that should fade out
 * @param {number} [duration=1000]  The duration of the fade in milliseconds,
 *      default 1000 ms (1 second) or the value set in
 *      vorple.defaults.fadeDuration. Note that the duration is calculated from
 *      100% volume, even if the current volume of the sound is less than that.
 * @param {function} [callback]  Function that is called when the audio has
 *      stopped completely with a boolean as the first parameter that matches
 *      what this function returned
 *
 * @returns {boolean}  False if the element doesn't exist or is not an audio
 *      element, true otherwise
 */
function fadeOut( element, duration, callback ) {
    const tick = 50;    // how often the volume is changed
    const $sound = $( element );
    const sound = $sound.get( 0 );

    const runCallbackIfExists = remove => {
        if( remove ) {
            $sound.remove();
        }

        if( typeof callback === "function" ) {
            callback();
        }
    };

    if( typeof duration !== "number" ) {
        duration = defaults.fadeDuration;
    }

    if( !sound || sound.tagName !== "AUDIO" ) {
        runCallbackIfExists( false );
        return false;
    }

    if( duration <= 0 ) {
        runCallbackIfExists( true );
        return true;
    }

    duration = Math.min( duration, 60000 ); // cap the duration to 1 minute

    const delta = tick / duration;  // how much to change the volume on each tick

    clearTimeout( $sound.data( "fadeouttimer" ) );

    $sound.data( "stopping", true );

    function next( volume ) {
        sound.volume = Math.max( volume, 0 );

        if( volume > 0 ) {
            const newTimer = setTimeout( function() {
                next( volume - delta );
            }, tick );

            $sound.data( "fadeouttimer", newTimer );
        }
        else {
            $sound.remove();
            runCallbackIfExists( true );
        }
    }

    next( sound.volume - delta );

    return true;
}


/**
 * Checks if any audio is playing. Note that sound that is being loaded or
 * has received a play command but isn't playing for some other reason
 * isn't considered as playing, even though it's about to start.
 *
 * @returns {boolean}
 */
function isAudioPlaying() {
    return isEffectPlaying() || isMusicPlaying();
}


/**
 * Checks if any sound effect is playing.
 *
 * @returns {boolean}
 */
function isEffectPlaying () {
    let isEffectPlaying = false;

    $( '.vorple-sound-effect' ).each( function() {
        if( isElementPlaying( this ) ) {
            isEffectPlaying = true;
            return false;
        }
    } );

    return isEffectPlaying;
}


/**
 * Checks if an audio element is playing.
 *
 * @param {string|object} audioElement  DOM element, jQuery object or jQuery
 *      selector of the audio element
 * @returns {boolean}
 */
function isElementPlaying( audioElement ) {
    const elem = $( audioElement ).get( 0 );

    return !!( elem && elem.tagName === "AUDIO" && !elem.paused );
}


/**
 * Checks if music is playing. Returns true if music is actually playing
 * and it isn't fading out at the moment.
 *
 * @returns {boolean}
 */
function isMusicPlaying() {
    const $music = $( '.vorple-music' );

    // if the audio element doesn't exist, music is never playing
    if( $music.length === 0 ) {
        return false;
    }

    // if there are tracks in the music queue, music is playing
    if( musicQueue.length > 0 ) {
        return true;
    }

    // if the queue is empty but there's a playlist, music is playing
    if( playlist.length > 0 ) {
        return true;
    }

    // if the music is stopping, it's not considered playing
    if( $music.data( 'stopping' ) ) {
        return false;
    }

    // finally check the audio's actual play state
    return isElementPlaying( $music );
}


/**
 * Starts playing music. If the same music file is already playing, does nothing
 * except sets the looping property. If another music file is playing,
 * fades out the old one before playing the new one.
 *
 * @param {string} url
 * @param {object} [options={}]
 * @param {boolean} [options.looping=false]  If true, the track keeps repeating
 * @param {boolean} [options.restart=false]  If true, always starts playing from
 *   the start, even when this track is already playing
 */
function playMusic( url, options = {} ) {
    const $music = $( '.vorple-music' );
    const { looping, restart } = options;

    clearTimeout( musicPauseTimer );

    // check if this specific track is already playing
    if( !restart && (
            ( $music.length > 0 && ( $music.attr( 'src' ) === url || $music.data( 'resourceurl' ) === url ) ) ||
            ( $music.length === 0 && musicQueue.length > 0 && musicQueue[ 0 ].url === url )
        ) ) {
        // if the music is fading out, stop the fadeout and continue
        clearTimeout( $music.data( "fadeOutTimer" ) );

        $music.prop( 'volume', 1 ).data( 'stopping', false )
            .prop( 'loop', !!looping ).get( 0 ).play();
    }
    else if( restart && isElementPlaying( '.vorple-music' ) ) {
        musicQueue.unshift( { url, looping: !!looping} );
        fadeOut( $music, null, timeNextTrack )
    }
    else {
        $music.remove();
        $( '<audio class="vorple-audio vorple-music">' )
            .attr( 'src', (0,_file__WEBPACK_IMPORTED_MODULE_0__.resourceUrl)( url ) )
            .data( 'resourceurl', url ) 
            .prop( 'loop', !!looping )
            .appendTo( 'body' )
            .on( 'ended', timeNextTrack )
            .get( 0 ).play();
    }
}


/**
 * Starts playing a sound effect.
 *
 * @param {string} url
 * @param {object} [options={}]
 * @param {string} [options.id=""]  The id to attach to the audio element
 * @param {boolean} [options.looping=false]  If true, the sound effect keeps repeating
 * @returns {object} The audio DOM element
 */
function playSound( url, options = {} ) {
    const looping = !!options.looping;

    const $audio = $( '<audio class="vorple-audio vorple-sound-effect">' )
        .attr( 'src', (0,_file__WEBPACK_IMPORTED_MODULE_0__.resourceUrl)( url ) )
        .data( 'resourceurl', url ) 
        .prop( 'loop', looping )
        .appendTo( 'body' );

    if( options.id ) {
        $audio.attr( 'id', options.id );
    }

    const audioElement = $audio.get( 0 );
    audioElement.play();

    // if the sound is not looping, remove the element from the DOM when it finishes playing
    if( !looping ) {
        $audio.on( 'ended', function() {
            this.remove();
        });
    }

    return audioElement;
}


/* from https://stackoverflow.com/a/6274381 */
function shuffleArray( a ) {
    for( let i = a.length - 1; i > 0; i-- ) {
        const j = Math.floor( Math.random() * (i + 1) );
        [ a[ i ], a[ j ] ] = [ a[ j ], a[ i ] ];
    }
    return a;
}


/**
 * Sets a playlist and starts playing it.
 *
 * @param {string[]} list  An array of music file URLs
 * @param {object} [options={}]
 * @param {boolean} [options.looping=false]  If true, the playlist starts playing again
 *      from the start when it ends
 * @param {boolean} [options.restart=false]  If true, always play from the start even
 *      when a track in the playlist is already playing
 * @param {boolean} [options.shuffle=false]  If true, shuffles the playlist in random
 *      order before playing it
 */
function setPlaylist( list, options = {} ) {
    if( list.length === 0 ) {
        musicQueue = [];
        playlist = [];
        return;
    }

    const { looping, restart, shuffled } = options;
    const currentTrackUrl = currentMusicPlaying();

    // if the playlist is a list of URLs, turn them into objects that have
    // the "looping" property
    const pl = list.map( item => {
        if( typeof item === 'string' ) {
            return {
                url: item,
                looping: false
            };
        }

        return item;
    });

    if( shuffled ) {
        shuffleArray( pl );
    }

    const currentlyPlayingIndex = restart ? -1 : pl.findIndex( track => track.url === currentTrackUrl );
    const startFromIndex = ( currentlyPlayingIndex < 1 ) ? 0 : currentlyPlayingIndex;

    musicQueue = pl.slice( startFromIndex + 1 );

    if( looping ) {
        playlist = pl.slice();
    }

    // start the first track unless it's already playing
    if( currentTrackUrl !== pl[ startFromIndex ].url ) {
        playMusic( pl[ startFromIndex ].url );
    }
}


/**
 * Stops playing music. Clears the music queue and the playlist.
 *
 * @param {number} [fadeoutDuration=1000] The duration of the fadeout. Set to 0
 *      to stop immediately.
 */
function stopMusic( fadeoutDuration ) {
    const $music = $( '.vorple-music' );

    musicQueue = [];
    playlist = [];

    if( $music.length > 0 ) {
        // note: although we just cleared the playlist and queue,
        // it's possible that a new track is added while the music is fading out.
        // That's why we have to add the timeNextTrack callback so that the
        // next track will start playing in that case.
        fadeOut( $music, fadeoutDuration, timeNextTrack )
    }
}


/***/ }),

/***/ "./src/vorple/debug.js":
/*!*****************************!*\
  !*** ./src/vorple/debug.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "error": () => (/* binding */ error),
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "off": () => (/* binding */ off),
/* harmony export */   "on": () => (/* binding */ on),
/* harmony export */   "status": () => (/* binding */ status),
/* harmony export */   "toggle": () => (/* binding */ toggle)
/* harmony export */ });
/* harmony import */ var _haven_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../haven/error */ "./src/haven/error.js");
/* harmony import */ var _haven_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../haven/buffer */ "./src/haven/buffer.js");
/**
 * @module debug
 */



/**
 * @private
 * @type {boolean}
 */
let debugState = false;


/**
 * Show an error in the console and on the screen.
 *
 * @param {string} text  Error message
 * @returns {boolean} Always returns true, for consistency with log()
 */
function error( text ) {
    console.error( text );
    (0,_haven_error__WEBPACK_IMPORTED_MODULE_0__.default)( text );

    return true;
}


/**
 * Print a logging message to console and on the screen if debugging mode is on.
 *
 * @param {string} text  Text to log
 * @returns {boolean} True if a debugging message was printed, false otherwise
 */
function log( text ) {
    if( !debugState ) {
        return false;
    }

    console.log( text );
    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_1__.append)( '[' + text + ']\n', 0 );

    return true;
}


/**
 * Set the debugging status off.
 *
 * @returns {boolean} the new status (always false)
 */
function off() {
    debugState = false;

    return status();
}


/**
 * Set the debugging status on.
 *
 * @returns {boolean} the new status (always true)
 */
function on() {
    debugState = true;

    return status();
}


/**
 * Returns the current state of the debugging flag.
 *
 * @returns {boolean}
 */
function status() {
    return debugState;
}


/**
 * Set or unset the the debugging flag.
 *
 * @returns {boolean} The new status of the debugging flag.
 */
function toggle() {
    debugState = !debugState;

    return status();
}

/***/ }),

/***/ "./src/vorple/file.js":
/*!****************************!*\
  !*** ./src/vorple/file.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HANDSHAKE_FILENAME": () => (/* binding */ HANDSHAKE_FILENAME),
/* harmony export */   "JS_EVAL_FILENAME": () => (/* binding */ JS_EVAL_FILENAME),
/* harmony export */   "JS_RETURN_VALUE_FILENAME": () => (/* binding */ JS_RETURN_VALUE_FILENAME),
/* harmony export */   "JS_RETURN_VALUE_TYPE_FILENAME": () => (/* binding */ JS_RETURN_VALUE_TYPE_FILENAME),
/* harmony export */   "ASYNC_FS_ROOT": () => (/* binding */ ASYNC_FS_ROOT),
/* harmony export */   "INFORM_PATH": () => (/* binding */ INFORM_PATH),
/* harmony export */   "VORPLE_PATH": () => (/* binding */ VORPLE_PATH),
/* harmony export */   "SAVEFILE_PATH": () => (/* binding */ SAVEFILE_PATH),
/* harmony export */   "TRANSCRIPT_PATH": () => (/* binding */ TRANSCRIPT_PATH),
/* harmony export */   "TMP_PATH": () => (/* binding */ TMP_PATH),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "exists": () => (/* binding */ exists),
/* harmony export */   "filePrompt": () => (/* binding */ filePrompt),
/* harmony export */   "getFS": () => (/* binding */ getFS),
/* harmony export */   "inAsyncFS": () => (/* binding */ inAsyncFS),
/* harmony export */   "info": () => (/* binding */ info),
/* harmony export */   "informHeader": () => (/* binding */ informHeader),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "isReady": () => (/* binding */ isReady),
/* harmony export */   "markReady": () => (/* binding */ markReady),
/* harmony export */   "mkdir": () => (/* binding */ mkdir),
/* harmony export */   "move": () => (/* binding */ move),
/* harmony export */   "path": () => (/* binding */ path),
/* harmony export */   "read": () => (/* binding */ read),
/* harmony export */   "readdir": () => (/* binding */ readdir),
/* harmony export */   "resourceUrl": () => (/* binding */ resourceUrl),
/* harmony export */   "rmdir": () => (/* binding */ rmdir),
/* harmony export */   "restoreFilePrompt": () => (/* binding */ restoreFilePrompt),
/* harmony export */   "saveFilePrompt": () => (/* binding */ saveFilePrompt),
/* harmony export */   "transcriptFilePrompt": () => (/* binding */ transcriptFilePrompt),
/* harmony export */   "unlink": () => (/* binding */ unlink),
/* harmony export */   "write": () => (/* binding */ write)
/* harmony export */ });
/* harmony import */ var _vorple__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vorple */ "./src/vorple/vorple.js");
/**
 * This module is the access point to the virtual filesystem. 
 * 
 * The system uses BrowserFS to handle the virtual filesystem in browser's localstorage.
 * See https://jvilk.com/browserfs/2.0.0-beta/classes/_backend_localstorage_.localstoragefilesystem.html
 * for the full API. The getFS() method can be used to retrieve the filesystem object that can be used
 * to access the BrowserFS API directly.
 * 
 * All methods in this module use the synchronous versions of the filesystem methods
 * (readFileSync, writeFileSync etc.)
 * 
 * @module file
 * @since 3.2.0
 */



const BrowserFS = __webpack_require__( /*! browserfs */ "./node_modules/browserfs/dist/browserfs.js" );
const { basename, dirname, resolve } = __webpack_require__( /*! path */ "./node_modules/path-browserify/index.js" );
const vex = __webpack_require__( /*! vex-js */ "./node_modules/vex-js/dist/js/vex.js" );

const HANDSHAKE_FILENAME = 'VpHndshk';
const JS_EVAL_FILENAME = 'VpJSEval';
const JS_RETURN_VALUE_FILENAME = 'VpJSRtrn';
const JS_RETURN_VALUE_TYPE_FILENAME = 'VpJSType';

const HANDSHAKE_INIT = "Callooh!";
const HANDSHAKE_RESPONSE = "Callay!";

const SYNC_FS_ROOT = '/';

/**
 * The directory root for the extended filesystem which has more space (IndexedDB)
 * and uses asynchronous access.
 * 
 * @type {string}
 */
const ASYNC_FS_ROOT = '/extended/';

/**
 *  The directory where Inform reads author-provided files (not saves or transcripts).
 * 
 * @type {string}
 */
const INFORM_PATH = SYNC_FS_ROOT + 'inform';        

/**
 *  The directory Vorple uses for its own files for communication between the interpreter and the game file.
 * 
 * @type {string}
 */
const VORPLE_PATH = SYNC_FS_ROOT + 'vorple';

/**
 * Save file directory in the extended filesystem.
 * 
 * @type {string}
 */
const SAVEFILE_PATH = ASYNC_FS_ROOT + 'savefiles';

/**
 * Transcripts directory in the extended filesystem.
 * 
 * @type {string}
 */
const TRANSCRIPT_PATH = ASYNC_FS_ROOT + 'transcripts';

/**
 * The directory for temporary files. The temporary directory is emptied after leaving the page.
 * 
 * @type {string}
 */
const TMP_PATH = '/tmp';
const DEFAULT_PATH = INFORM_PATH;

let fs = null;


/**
 * Check if file contents start with an Inform 7 header.
 * 
 * @private
 * @param {string} contents 
 */
function hasHeader( contents ) {
    return new RegExp( `^[\\-*] //.*// .*\\s+` ).test( contents );
}


/**
 * Copies a file.
 * 
 * @param {*} source File to copy
 * @param {*} target Target directory or the new name
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place. Applies to both source and target parameters.
 * @param {boolean} [options.replace=true] If true, any existing file of the same name will be replaced.
 *   If false, the operation will not continue if the file already exists.
 * @returns {boolean} True on success, false otherwise
 */
function copy( source, target, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        replace: true,
        ...options
    };

    const sourceFilename = path( source, opt.cwd );

    if( !exists( sourceFilename ) ) {
        // can't copy files that don't exist
        return false;
    }
    
    if( info( sourceFilename ).isDirectory ) {
        // won't copy directories
        return false;
    }

    const targetPath = path( target, opt.cwd );
    let targetFilename = targetPath;

    // if the target is a directory, add the source filename to the target
    if( exists( targetPath ) && info( targetPath ).isDirectory ) {
        targetFilename = path( basename( source ), targetPath );
    }

    if( exists( targetFilename ) ) {
        if( !opt.replace ) {
            // asked not to replace target
            return false;
        }

        if( info( targetFilename ).isDirectory ) {
            // directories won't be overwritten
            return false;
        }
    }

    try {
        const contents = read( sourceFilename, { header: true } );
        write( targetFilename, contents, { header: false } );
        return true;
    }
    catch( e ) {
        return false;
    }
}


/**
 * Does a file or directory exist in the virtual filesystem?
 * 
 * @param {string} filename 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {boolean} True if the file/directory exists, false otherwise
 */
function exists( filename, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };

    return fs.existsSync( path( filename, opt.cwd ) );
}


/**
 * Show a modal asking the user to provide a filename.
 * 
 * @param {function} callback The function to call with the filename as the parameter
 *   after the user has selected the filename, or null if action was canceled
 * @param {string} [filepath=/inform] The root path of the file
 */
function filePrompt( callback, filepath = INFORM_PATH ) {
    const needsAsync = inAsyncFS( filepath );
    const fs = getFS();

    const asyncExists = async function( filename ) {
        return new Promise( resolve => {
            try {
                fs.exists( filename, status => resolve( status ) );
            }
            catch( e ) {
                resolve( false );
            }
        });
    };

    const askForFilename = function() {
        vex.dialog.open({
            message: 'Enter filename:',
            input: [
                '<input name="filename" type="text" required />',
            ].join(''),
            buttons: [
                $.extend({}, vex.dialog.buttons.YES, { text: 'Save' }),
                $.extend({}, vex.dialog.buttons.NO, { text: 'Cancel' })
            ],
            callback: async function (data) {
                if (!data) {
                    callback( null );
                } else {
                    const finalPath = path( data.filename, filepath );

                    if( needsAsync ) {
                        if( await asyncExists( finalPath ) ) {
                            askToOverwrite( finalPath );
                        }
                        else {
                            callback( finalPath );
                        }
                    }
                    else {
                        if( exists( finalPath ) ) {
                            askToOverwrite( finalPath );
                        }
                        else {
                            callback( finalPath );
                        }
                    }
                }
            }
        });
    };

    const askToOverwrite = function( finalPath ) {
        vex.dialog.open({
            message: 'File already exists. Overwrite?',
            buttons: [
                $.extend({}, vex.dialog.buttons.YES, { text: 'Overwrite' }),
                $.extend({}, vex.dialog.buttons.NO, { text: 'Cancel' })
            ],
            callback: function( overwrite ) {
                if( overwrite ) {
                    callback( finalPath );
                }
                else {
                    callback( null );
                }
            }
        });
    };

    if( needsAsync ) {
        (async function() {
            if( !await asyncExists( filepath ) ) {
                mkdir( filepath, askForFilename );
            }

            askForFilename();
        })();
    }
    else {
        if( !exists( filepath ) ) {
            mkdir( filepath );
        }

        askForFilename();
    }
}


/**
 * Returns the BrowserFS object for direct access to the BrowserFS API.
 * 
 * @returns {object|null} The FS object or null if the filesystem hasn't been initialized yet
 */
function getFS() {
    return fs;
}


/**
 * Check if a file is in a filesystem that requires asynchronous access.
 * 
 * (Asynchronous file access isn't officially supported so this is for internal use only.)
 * 
 * @private
 * @param {string} fullPath Path to the file. Must be a full path, not relative.
 */
function inAsyncFS( fullPath ) {
    return fullPath.startsWith( ASYNC_FS_ROOT );
}


/**
 * Returns an object with information about a file or directory:
 * 
 * ```
 * {
 *   contents: string | Array<string>,   // Contents of text file, or files inside the directory
 *   directory: string,                  // Parent directory
 *   header: null | {                    // Inform 7 header, or null if doesn't exist/apply
 *     project: string,                  // Project name in the header
 *     ready: boolean                    // File's ready status
 *   },
 *   name: string,                       // Base filename or directory name
 *   isDirectory: boolean,               // True if it's a directory, false if it's a normal file
 *   path: string                        // Full path to the file
 * }
 * ```
 * 
 * Returns null if the file or directory doesn't exist.
 * 
 * @param {string} filename 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {object|null}
 */
function info( filename, options ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };

    try {
        const fullPath = path( filename, opt.cwd );
        const stats = fs.statSync( fullPath );
        const isDirectory = stats.isDirectory();
        let contents;

        if( isDirectory ) {
            contents = readdir( filename, { cwd: opt.cwd } );
        }
        else {
            contents = read( filename, { cwd: opt.cwd, header: true } );
        }
        
        if( contents === null ) {
            return false;
        }
        
        const header = hasHeader( contents ) ? {
            project: contents.split( '//' )[ 1 ],
            ready: contents.charAt( 0 ) === '*'
        } : null;

        return {
            contents,
            directory: dirname( fullPath ),
            name: basename( fullPath ),
            header,
            isDirectory,
            path: fullPath
        };
    }
    catch( e ) {
        // file doesn't exist or couldn't be opened
        return null;
    }
}


/**
 * Creates a header for Inform 7 files. If the story is Inform 6, returns an empty string.
 * 
 * @param {string} project Project's name
 * @param {string} filename Filename, path is automatically removed
 * @param {boolean} [ready=true] If true, the file is marked "ready" for Inform 7
 * @returns {string} Inform 7 header or an empty string for Inform 6
 */
function informHeader( project, filename, ready = true ) {
    const readyMark = ready ? "*" : "-";

    if( (0,_vorple__WEBPACK_IMPORTED_MODULE_0__.getInformVersion)() === 7 ) {
        return `${readyMark} //${project}// ${basename( filename )}\n`;
    }

    return '';
}


/**
 * Initialize the filesystem. This gets called automatically when calling
 * vorple.init() but it can be called manually before that to get access
 * to the filesystem earlier.
 * 
 * The method returns a promise that resolves into the BrowserJS filesystem
 * object, but after the promise has resolved all vorple.file.* are also
 * available.
 * 
 * @example 
 * async function getAccessToFS() {
 *   const fs = await vorple.file.init();
 *   
 *   // fs is now the BrowserFS filesystem object (what you'd get from vorple.file.getFS())
 *   // also all vorple.file.* methods are now available
 *   vorple.file.write("info.txt", "Filesystem is now available");
 * }
 * 
 * @returns {Promise<object>} A promise that resolves to the filesystem object
 */
function init() {
    return new Promise( ( resolve, reject ) => {
        if( fs ) {
            // already initialized!
            return resolve(fs);
        }

        BrowserFS.configure({
            fs: 'MountableFileSystem',
            options: {
                [ SYNC_FS_ROOT ]: { fs: "LocalStorage", options: {} },
                [ ASYNC_FS_ROOT ]: { fs: "IndexedDB", options: {} },
                [ TMP_PATH ]: { fs: "InMemory", options: {} }
            }
        }, async error => {
            if( error ) {
                return reject( error );
            }

            // save a reference to BrowserFS methods
            fs = BrowserFS.BFSRequire('fs');

            // create the necessary directories if they don't exist
            [ VORPLE_PATH, INFORM_PATH ].forEach( dir => {
                if( !exists( dir ) ) {
                    mkdir( dir );
                }
            });

            // the same thing for paths that need async operations
            await Promise.all( [ SAVEFILE_PATH, TRANSCRIPT_PATH ].map( dir => new Promise( resolve => {
                fs.exists( dir, alreadyExists => {
                    if( !alreadyExists ) {
                        fs.mkdir( dir, resolve );
                    }
                    else {
                        resolve();
                    }
                });
            }) ) );

            // Create the handshake file. This file must "really" exist for the interpreter to pick it up.
            try {
                fs.writeFileSync( path( HANDSHAKE_FILENAME, VORPLE_PATH ), '', 'utf8' );
            }
            catch( e ) {
                // already exists - no need to do anything
            }

            resolve(fs);
        });
    });
}

/**
 * Check if a file has been marked ready for Inform 7 to read.
 * 
 * If the file doesn't exist, it doesn't have a header, or it can't be read,
 * the method returns false. Error conditions must be checked manually if
 * it's important to make a difference between invalid operation and a file
 * that has been marked not ready.
 * 
 * This method always returns false on Inform 6.
 * 
 * @param {string} filename 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {boolean} True if file is ready, false on error or not ready
 */
function isReady( filename, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };

    if( (0,_vorple__WEBPACK_IMPORTED_MODULE_0__.getInformVersion)() !== 7 ) {
        return false;
    }

    const contents = read( filename, {
        cwd: opt.cwd,
        header: true
    });

    if( contents === null ) {
        // read failed
        return false;
    }

    if( !hasHeader( contents ) ) {
        return false;
    }

    return contents.charAt( 0 ) === "*";
}


/**
 * Marks a file ready to read (or not ready to read) for Inform 7.
 * This is equivalent of the phrases "mark (external file) as ready to read"
 * and "mark (external file) as not ready to read" in Inform 7.
 * 
 * If the file doesn't have an Inform 7 header the method does nothing and returns false.
 * 
 * In Inform 6 this method does nothing and always returns false.
 * 
 * @param {string} filename 
 * @param {boolean} [ready=true] If true, marks the file ready. Otherwise marks the file not ready.
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {boolean} True if operation was successful, false otherwise.
 *  Returns true even if no change was made to the file (was already marked ready.)
 */

function markReady( filename, ready = true, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };

    if( (0,_vorple__WEBPACK_IMPORTED_MODULE_0__.getInformVersion)() !== 7 ) {
        return false;
    }

    const contents = read( filename, {
        cwd: opt.cwd,
        header: true
    });

    if( !contents ) {
        // read failed
        return false;
    }

    if( !hasHeader( contents ) ) {
        return false;
    }

    const readyMarker = ready ? "*" : "-";
    const newContents = readyMarker + contents.substr( 1 );

    return write( filename, newContents, { cwd: opt.cwd, header: false } );
}


/**
 * Create a new directory in the virtual filesystem. 
 * 
 * This does not create missing subdirectories, e.g. mkdir( 'foo/bar' ) won't work
 * if directory 'foo' doesn't exist.
 * 
 * @param {string} dirname 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {boolean} True if directory was created, false otherwise
 */
function mkdir( dirname, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };
    const fullPath = path( dirname, opt.cwd );

    if( inAsyncFS( fullPath ) ) {
        return fs.mkdir( fullPath );
    }

    try {
        fs.mkdirSync( fullPath );
        return true;
    }
    catch( e ) {
        return false;
    }
}


/**
 * Moves a file or directory to another directory.
 * If the target doesn't exist, the file or directory is renamed.
 * 
 * @param {*} source File/directory to move
 * @param {*} target Target directory or the new name
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place. Applies to both source and target parameters.
 * @param {boolean} [options.replace=true] If true, any existing file of the same name will be replaced.
 *   If false, the operation will not continue if the file already exists.
 *   This option is ignored if the source is a directory (a directory will never overwrite a file.)
 * @returns {boolean} True on success, false otherwise
 */
function move( source, target, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        replace: true,
        ...options
    };

    if( !exists( source, { cwd: opt.cwd } ) ) {
        return false;
    }

    const sourceFilename = path( source, opt.cwd );
    const sourceIsDir = info( sourceFilename ).isDirectory;
    const targetPath = path( target, opt.cwd );
    let targetFilename = targetPath;

    // if the target is a directory, add the source filename to the target
    if( exists( targetPath ) && info( targetPath ).isDirectory ) {
        targetFilename = path( basename( source ), targetPath );
    }

    if( exists( targetFilename ) ) {
        if( !opt.replace ) {
            // asked not to replace target
            return false;
        }

        if( sourceIsDir ) {
            // directories don't overwrite anything
            return false;
        }

        if( info( targetFilename ).isDirectory ) {
            // directories won't be overwritten
            return false;
        }
    }

    try {
        fs.renameSync( sourceFilename, targetFilename );
        return true;
    }
    catch( e ) {
        return false;
    }
}


/**
 * Adds a path to a given filename.
 * See https://nodejs.org/api/path.html#path_path_resolve_paths
 * for rules on how path joining works.
 * 
 * The default root directory is /inform so
 * `vorple.file.path( "foo.txt", "bar" )` will resolve to
 * `/inform/bar/foo.txt`.
 * 
 * @example
 * vorple.file.path( "foo.txt" );                   // --> /inform/foo.txt
 * vorple.file.path( "foo.txt", "bar" );            // --> /inform/bar/foo.txt
 * vorple.file.path( "foo.txt", "/bar" );           // --> /bar/foo.txt
 * vorple.file.path( "../foo.txt", "/bar/xyz" );    // --> /bar/foo.txt
 * vorple.file.path( "foo.txt", "/" );              // --> /foo.txt
 * vorple.file.path( "/foo.txt", "/bar/xyz" );      // --> /foo.txt
 * 
 * @param {string} filename
 * @param {string} path
 */
function path( filename, path = '.' ) {
    return resolve( DEFAULT_PATH, path, filename );
}


/**
 * Read a text file from the virtual filesystem
 * 
 * @param {string} filename
 * @param {object} [options={}]
 * @param {boolean} [options.binary=false] Is it a binary file?
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @param {boolean} [options.header=false] If true, return value contains the Inform 7 header if present. Otherwise the header is not included in the return value.
 * @returns {string|null} The contents of the file, or null file could not be read
 */
function read( filename, options = {} ) {
    const opt = {
        binary: false,
        cwd: DEFAULT_PATH,
        header: false,
        ...options
    };

    const encoding = opt.binary ? {} : 'utf8';
    
    // Regardless of what the file actually contains, 
    // the handshake response is returned when the story file
    // tries to read the handshake file. This tells it that
    // it's running on the Vorple interpreter.
    if( filename === HANDSHAKE_FILENAME ) {
        return informHeader( 'VORPLE', filename ) + HANDSHAKE_RESPONSE;
    }

    try {
        const contents = fs.readFileSync( path( filename, opt.cwd ), encoding, 'r' );

        if( !opt.header && hasHeader( contents ) ) {
            // header not wanted - remove it from the return value
            return contents.substr( contents.indexOf( '\n' ) + 1 );
        }

        return contents;
    }
    catch( e ) {
        return null;
    }
}


/**
 * Returns the contents of a directory. Returns null if the directory doesn't exist
 * or the directory is actually a file.
 * 
 * @param {string} dirname 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {array|null} The list of files in the directory, or null on error
 */
function readdir( dirname, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };
    
    try {
        return fs.readdirSync( path( dirname, opt.cwd ) );
    }
    catch( e ) {
        return null;
    }
}


/**
 * Get the URL to a resource, which can be a normal URL or a data URL containing
 * the resource itself. This is used to get the resource files from the Borogove
 * editor.
 *  
 * @param {string} url
 * @returns {string} The URL or a data URL
 * @since 3.2.2
 */
function resourceUrl( url ) {
    // don't do anything to non-strings or empty strings
    if( typeof url !== "string" || !url ) {
        return url;
    }

    const lowerCaseUrl = url.toLowerCase();

    // don't do anything to external URLs
    if( lowerCaseUrl.indexOf( "http://" ) > -1 || lowerCaseUrl.indexOf( "https://" ) > -1 ) {
        return url;
    }

    // don't do anything unless we're in a Borogove environment
    if( !window.borogove || !window.borogove.getFileContents ) {
        return url;
    }

    return window.borogove.getFileContents( url );
}


/**
 * Remove a directory from the virtual filesystem. Directory must be empty.
 * 
 * @param {string} dirname 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {boolean} True if directory was removed, false otherwise
 */
function rmdir( dirname, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };
    
    try {
        fs.rmdirSync( path( dirname, opt.cwd ) );
        return true;
    }
    catch( e ) {
        return false;
    }
}


/**
 * Ask the user to choose a save file to restore.
 * 
 * @param {string} gameid The IFID of the game
 * @param {function} callback The function to call with the filename as the parameter
 *   after the user has selected the filename, or null if action was canceled
 * @private
 */
async function restoreFilePrompt( gameid, callback ) {
    const fullPath = path( gameid, SAVEFILE_PATH );
    const fs = getFS();
    const savefiles = await new Promise( resolve => fs.readdir( fullPath, ( err, result ) => resolve( result ) ) );

    if( !savefiles ) {
        vex.dialog.open({
            message: 'There are no save files yet.',
            buttons: [
                $.extend({}, vex.dialog.buttons.YES, { text: 'OK' }),
            ],
            callback: function () {
                callback( null );
            }
        });
        return;
    }

    vex.dialog.open({
        message: 'Choose save file to restore:',
        input: '<ul style="list-style-type:none">' + 
            savefiles.map( ( file, index ) => `<li>
                <label>
                    <input type="radio" value="${index}" name="fileindex" required>
                    ${file}
                </label>
            </li>` ).join('') +
        '</ul>',
        buttons: [
            $.extend({}, vex.dialog.buttons.YES, { text: 'Restore' }),
            $.extend({}, vex.dialog.buttons.NO, { text: 'Cancel' })
        ],
        callback: function (data) {
            if (!data) {
                return callback( null );
            } else {
                const source = path( savefiles[ data.fileindex ], fullPath );
                const dest = path( savefiles[ data.fileindex ], TMP_PATH );

                // We need to do this "hack" and copy the save file to the synchronous
                // filesystem so that the engine can read it synchronously
                fs.readFile( source, {}, ( err, contents ) => {
                    write( dest, contents, { binary: true } );
                    callback( dest);
                });
            }
        }
    });
}


/**
 * Ask the user to provide a filename for saving the transcript.
 * 
 * @param {function} callback The function to call with the filename as the parameter
 *   after the user has selected the filename, or null if action was canceled
 * @private
 */
function saveFilePrompt( gameid, callback ) {
    filePrompt( callback, path( gameid, SAVEFILE_PATH ) );
}


/**
 * Ask the user to provide a filename for saving the transcript.
 * 
 * @param {function} callback The function to call with the filename as the parameter
 *   after the user has selected the filename, or null if action was canceled
 * @private
 */
function transcriptFilePrompt( callback ) {
    const choice = prompt( 'Enter filename' );
    
    if( !choice ) {
        return callback( null );
    }

    callback( path( choice, TRANSCRIPT_PATH ) );
}


/**
 * Unlink (i.e. delete) a file from the virtual filesystem.
 * Use rmdir() to remove directories.
 * 
 * @param {string} filename 
 * @param {object} [options={}]
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @returns {boolean} True if file was removed, false otherwise
 */
function unlink( filename, options = {} ) {
    const opt = {
        cwd: DEFAULT_PATH,
        ...options
    };

    try {
        fs.unlinkSync( path( filename, opt.cwd ) );
        return true;
    }
    catch( e ) {
        return false;
    }
}


/**
 * Write a file to the virtual filesystem.
 * 
 * @param {string} filename
 * @param {string|array} contents Contents of what to write to the file, either a string or a byte array
 * @param {object} [options={}]
 * @param {boolean} [options.append=false] If true, contents are appended to the file, otherwise the file is overwritten with the new content
 * @param {boolean} [options.binary=false] If true, writes a binary file instead of a text file
 * @param {string} [options.cwd=/inform] The directory where the operation takes place
 * @param {boolean} [options.header=true] If true, an Inform 7 header is added to the start of the file. On Inform 6 this option does nothing.
 * @param {string} [options.project=VORPLE] The project name that's used in the Inform 7 header.
 *  Does nothing on Inform 6 or if `options.header` is false.
 * @param {boolean} [options.ready=true] If true, the header gets a "ready" mark (`*`) to signal Inform 7 that the file can be read.
 *  Otherwise the header is marked not ready (`-`).
 *  Does nothing on Inform 6 or if `options.header` is false.
 * @returns {boolean} True on success, false otherwise
 */
function write( filename, contents, options = {} ) {
    const opt = {
        append: false,
        binary: false,
        cwd: DEFAULT_PATH,
        header: true,
        project: "VORPLE",
        ready: true,
        ...options
    };

    const fullPath = path( filename, opt.cwd );
    const informVersion = (0,_vorple__WEBPACK_IMPORTED_MODULE_0__.getInformVersion)();
    const encoding = opt.binary ? {} : 'utf8';
    let header = "";

    if( opt.binary ) {
        // convert binary files to a Buffer
        contents = Buffer.from( contents );
    }
    else if( contents instanceof Uint8Array ) {
        contents = contents.toString();
    }
    else if( Array.isArray( contents ) ) {
        // convert normal arrays to a string
        contents = contents.map( code => String.fromCharCode( code ) ).join( '' );
    }

    if( opt.header && !opt.binary ) {
        header = informHeader( opt.project, filename, opt.ready );
    }

    // If the story is writing to the handshake file, detect the Inform version
    // by checking the possible header
    if( filename === HANDSHAKE_FILENAME && contents.length > 0 && !informVersion ) {
        // in case the handshake file is binary, turn it into string
        const handshake = contents.toString();
        
        if( handshake === HANDSHAKE_INIT ) {
            (0,_vorple__WEBPACK_IMPORTED_MODULE_0__.setInformVersion)( 6 );
            return true;
        }

        if( hasHeader( handshake ) ) {
            (0,_vorple__WEBPACK_IMPORTED_MODULE_0__.setInformVersion)( 7 );
            return true;
        }

        console.warn( "Unknown handshake initialization from the story file – can't detect Inform version" );
        return false;
    }

    try {
        if( inAsyncFS( fullPath ) ) {
            // This handles the "special case" of writing savefiles and transcripts - not guaranteed to work in the general case!
            if( contents.length === 0 ) {
                return;
            }
            if( opt.append ) {
                fs.appendFile( fullPath, contents, encoding, err => console.log( err ) );
            }
            else {
                fs.writeFile( fullPath, contents, encoding, err => console.log( err ) );
            }
            return true;
        }
        
        if( opt.append ) {
            // append the I7 header only if the file doesn't exist
            if( header && !exists( fullPath ) ) {
                fs.writeFileSync( fullPath, header, encoding );                
            }

            fs.appendFileSync( fullPath, contents, encoding );
        }
        else {
            if( header ) {
                fs.writeFileSync( fullPath, header + contents, encoding );
            }
            else {
                fs.writeFileSync( fullPath, contents, encoding );
            }
        }

        return true;
    }
    catch( e ) {
        return false;
    }
}


/***/ }),

/***/ "./src/vorple/glk.js":
/*!***************************!*\
  !*** ./src/vorple/glk.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sendChar": () => (/* binding */ sendChar),
/* harmony export */   "sendLine": () => (/* binding */ sendLine)
/* harmony export */ });
/* harmony import */ var _haven_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../haven/buffer */ "./src/haven/buffer.js");
/* harmony import */ var _haven_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../haven/input */ "./src/haven/input.js");
/* harmony import */ var _haven_prompt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../haven/prompt */ "./src/haven/prompt.js");
/* harmony import */ var _haven_haven__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../haven/haven */ "./src/haven/haven.js");
/* harmony import */ var _file__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./file */ "./src/vorple/file.js");
/* harmony import */ var _vorple__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vorple */ "./src/vorple/vorple.js");
/* harmony import */ var _haven__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./haven */ "./src/vorple/haven.js");
/* harmony import */ var _haven_error__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../haven/error */ "./src/haven/error.js");
/* harmony import */ var _glkConstants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./glkConstants */ "./src/vorple/glkConstants.js");
/**
 * GLK connection to Quixe. This is a trimmed down and slightly modified
 * version of glkapi.js by Andrew Plotkin.
 * 
 * Functions that are modified are annotated, for easier syncing with
 * updates in official Quixe.
 * 
 * @module glk
 * @since 3.2.0
 * @private
 */










    


/** VORPLE UTILITY FUNCTIONS */

const key_codes = {
    KEY_BACKSPACE: 8,
    KEY_TAB:       9,
    KEY_RETURN:   13,
    KEY_ESC:      27,
    KEY_LEFT:     37,
    KEY_UP:       38,
    KEY_RIGHT:    39,
    KEY_DOWN:     40,
    KEY_DELETE:   46,
    KEY_HOME:     36,
    KEY_END:      35,
    KEY_PAGEUP:   33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT:   45
};

/**
 * Receive character input from UI
 */
function sendChar( value ) {
    let res = String.fromCharCode( value );

    switch( value ) {
        case key_codes.KEY_RETURN:
            res = 'return'; break;
        case key_codes.KEY_LEFT:
            res = 'left'; break;
        case key_codes.KEY_RIGHT:
            res = 'right'; break;
        case key_codes.KEY_UP:
            res = 'up'; break;
        case key_codes.KEY_DOWN:
            res = 'down'; break;
        case key_codes.KEY_BACKSPACE:
            res = 'delete'; break;
        case key_codes.KEY_ESC:
            res = 'escape'; break;
        case key_codes.KEY_TAB:
            res = 'tab'; break;
        case key_codes.KEY_PAGEUP:
            res = 'pageup'; break;
        case key_codes.KEY_PAGEDOWN:
            res = 'pagedown'; break;
        case key_codes.KEY_HOME:
            res = 'home'; break;
        case key_codes.KEY_END:
            res = 'end'; break;
        case 112:
            res = 'func1'; break;
        case 113:
            res = 'func2'; break;
        case 114:
            res = 'func3'; break;
        case 115:
            res = 'func4'; break;
        case 116:
            res = 'func5'; break;
        case 117:
            res = 'func6'; break;
        case 118:
            res = 'func7'; break;
        case 119:
            res = 'func8'; break;
        case 120:
            res = 'func9'; break;
        case 121:
            res = 'func10'; break;
        case 122:
            res = 'func11'; break;
        case 123:
            res = 'func12'; break;
    }

    accept_ui_event({ 
        type: 'char',
        value: res
    });
}


/**
 * Receive line input from UI
 */
function sendLine( value ) {
    accept_ui_event({ 
        type: 'line',
        value
    });
}


/**
 * Choose a different directory when reading or writing Vorple files
 */
function filePath( filename ) {
    const vorpleFiles = [ _file__WEBPACK_IMPORTED_MODULE_4__.HANDSHAKE_FILENAME, _file__WEBPACK_IMPORTED_MODULE_4__.JS_EVAL_FILENAME, _file__WEBPACK_IMPORTED_MODULE_4__.JS_RETURN_VALUE_FILENAME, _file__WEBPACK_IMPORTED_MODULE_4__.JS_RETURN_VALUE_TYPE_FILENAME ];
    
    if( vorpleFiles.indexOf( filename ) > -1 ) {
        return _file__WEBPACK_IMPORTED_MODULE_4__.VORPLE_PATH;
    }

    return _file__WEBPACK_IMPORTED_MODULE_4__.INFORM_PATH;
}


/**
 * Function that does nothing for GLK functions that we won't use at all
 */
function DO_NOTHING() {}




/** GLKAPI.JS */

/* The VM interface object. */
let VM = null;

/* Options from the vm_options object. */
let option_exit_warning;
let option_do_vm_autosave;
let option_before_select_hook;
let option_extevent_hook;
let option_glk_gestalt_hook;

/* Library display state. */
let has_exited = false;
let ui_disabled = false;
let ui_specialinput = null;
let ui_specialcallback = null;
let event_generation = 0;
let current_partial_inputs = null;
let current_partial_outputs = null;


function init( vm_options ) {   // modified
    VM = vm_options.vm;
    GiDispa.set_vm( VM );
    
    vm_options.accept = accept_ui_event;
    option_exit_warning = vm_options.exit_warning;
    option_do_vm_autosave = vm_options.do_vm_autosave;
    option_before_select_hook = vm_options.before_select_hook;
    option_extevent_hook = vm_options.extevent_hook;
    option_glk_gestalt_hook = vm_options.glk_gestalt_hook;

    if( option_before_select_hook ) {
        option_before_select_hook();
    }

    // wait a tick before continuing initialization
    setTimeout( () => accept_ui_event({ type: 'init', gen: 0 }), 1 );
}


function accept_ui_event(obj) {  // modified
    if( ui_disabled ) {
        /* We've hit glk_exit() or a VM fatal error, or just blocked the UI for
            some modal dialog. */
        return;
    }

    /* Note any partial inputs; we'll need them if the game cancels a line
        input. This may be undef. */
    current_partial_inputs = obj.partial;

    switch( obj.type ) {
        case 'init':
            // content_metrics = obj.metrics;
            /* We ignore the support array. This library is updated in sync
            with GlkOte, so we know what it supports. */
            VM.init();
            break;
            
        // these are not supported
        case 'external':
        case 'timer':
        case 'hyperlink':
        case 'mouse':
        case 'arrange':
        case 'redraw':
            break;

        case 'specialresponse':
            if (obj.response === 'fileref_prompt') {
                gli_fileref_create_by_prompt_callback(obj);
            }
            break;

        case 'char':
            handle_char_input( obj.value );
            break;

        case 'line':
            handle_line_input( obj.value, obj.terminator );
            break;
    }
}

// function handle_arrange_input() {
// function handle_redraw_input() {
// function handle_external_input(res) {
// function handle_hyperlink_input(disprock, val) {
// function handle_mouse_input(disprock, xpos, ypos) {

function handle_char_input( /* disprock, */ input) {    // modified
    var charval;

    if (!gli_selectref)
        return;

    var win = gli_rootwin;  // we have only one window

    if (input.length == 1) {
        charval = input.charCodeAt(0);
        if (!win.char_request_uni)
            charval = charval & 0xFF;
    }
    else {
        charval = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.KeystrokeNameMap[input];
        if (!charval)
            charval = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_Unknown;
    }

    gli_selectref.set_field(0, _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.evtype_CharInput);
    gli_selectref.set_field(1, win);
    gli_selectref.set_field(2, charval);
    gli_selectref.set_field(3, 0);

    win.char_request = false;
    win.char_request_uni = false;
    win.input_generation = null;

    if (window.GiDispa)
        GiDispa.prepare_resume(gli_selectref);
    gli_selectref = null;
    VM.resume();
}

function handle_line_input( /* disprock, */ input, _termkey) {  // modified
    var ix;

    if (!gli_selectref) {
        return;
    }

    var win = gli_rootwin;

    if (input.length > win.linebuf.length)
        input = input.slice(0, win.linebuf.length);

    if (win.request_echo_line_input) {
        ix = win.style;
        gli_set_style(win.str, _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.style_Input);
        gli_window_put_string(win, input);
        if (win.echostr)
            glk_put_jstring_stream(win.echostr, input);
        gli_set_style(win.str, ix);
        gli_window_put_string(win, "\n");
        if (win.echostr)
            glk_put_jstring_stream(win.echostr, "\n");
    }

    for (ix=0; ix<input.length; ix++)
        win.linebuf[ix] = input.charCodeAt(ix);

    var termcode = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_Return;
    /*
    if (termkey && KeystrokeNameMap[termkey]) 
        termcode = KeystrokeNameMap[termkey];
    */

    gli_selectref.set_field(0, _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.evtype_LineInput);
    gli_selectref.set_field(1, win);
    gli_selectref.set_field(2, input.length);
    gli_selectref.set_field(3, termcode);

    if (window.GiDispa)
        GiDispa.unretain_array(win.linebuf);
    win.line_request = false;
    win.line_request_uni = false;
    win.request_echo_line_input = null;
    win.input_generation = null;
    win.linebuf = null;

    if (window.GiDispa)
        GiDispa.prepare_resume(gli_selectref);
    gli_selectref = null;
    VM.resume();
}


function update() { // modified
    var dataobj = { type: 'update', gen: event_generation };
    var winarray = null;
    var contentarray = null;
    var inputarray = null;
    var win, obj, robj, useobj, lineobj, ls, val, ix, cx;
    var initial, lastpos, laststyle, lasthyperlink;

    win = gli_rootwin;

    useobj = false;
    obj = { id: win.disprock };
    if (contentarray == null)
        contentarray = [];

    gli_window_buffer_deaccumulate(win);
    if (win.content.length) {
        obj.text = win.content.slice(0);
        win.content.length = 0;
        useobj = true;
    }
    if (win.clearcontent) {
        obj.clear = true;
        win.clearcontent = false;
        useobj = true;
        if (!obj.text) {
            obj.text = [];
        }
        win.reserve.length = 0;
    }
    if (obj.text && obj.text.length) {
        for (ix=0; ix<obj.text.length; ix++) {
            win.reserve.push(obj.text[ix]);
        }
    }
    if (win.reserve.length > 100) {
        win.reserve.splice(0, win.reserve.length-100);
    }

    if (useobj)
        contentarray.push(obj);

    inputarray = [];
    
    obj = null;
    if (win.char_request) {
        obj = { id: win.disprock, type: 'char', gen: win.input_generation };
    }
    if (win.line_request) {
        initial = '';
        if (current_partial_outputs) {
            val = current_partial_outputs[win.disprock];
            if (val)
                initial = val;
        }
        /* Note that the initial and terminators fields will be ignored
            if this is a continued (old) input request. So it doesn't
            matter if they're wrong. */
        obj = { id: win.disprock, type: 'line', gen: win.input_generation,
                maxlen: win.linebuf.length, initial: initial };
        if (win.line_input_terminators.length) {
            obj.terminators = win.line_input_terminators;
        }
    }
    if (obj)
        inputarray.push(obj);

    dataobj.windows = winarray;
    dataobj.content = contentarray;
    dataobj.input = inputarray;

    if (ui_specialinput) {
        const callback = function( filename ) {
            accept_ui_event({ 
                type: 'specialresponse',
                response: "fileref_prompt",
                value: filename ? { filename } : null
            });
        };

        dataobj.specialinput = ui_specialinput;
        switch( ui_specialinput.filetype ) {
            case 'save':
                if( ui_specialinput.filemode === "write" ) {
                    (0,_file__WEBPACK_IMPORTED_MODULE_4__.saveFilePrompt)( ui_specialinput.gameid, callback );
                }
                else {
                    (0,_file__WEBPACK_IMPORTED_MODULE_4__.restoreFilePrompt)( ui_specialinput.gameid, callback );
                }
                break;
            case 'transcript':
                (0,_file__WEBPACK_IMPORTED_MODULE_4__.transcriptFilePrompt)( callback );
                break;
            default:
                (0,_file__WEBPACK_IMPORTED_MODULE_4__.filePrompt)( callback );
                break;
        }
    }

    if (ui_disabled) {
        dataobj.disable = true;
    }

    /* Clean this up; it's only meaningful within one run/update cycle. */
    current_partial_outputs = null;

    /* If we're doing an autorestore, gli_autorestore_glkstate will 
       contain additional setup information for the first update()
       call only. */
    if (gli_autorestore_glkstate)
        dataobj.autorestore = gli_autorestore_glkstate;
    gli_autorestore_glkstate = null;

    // GlkOte.update(dataobj, gli_autorestore_glkstate);

    if (option_before_select_hook) {
        option_before_select_hook();
    }
    if (option_do_vm_autosave) {
        if (has_exited) {
            /* On quit or fatal error, delete the autosave. */
            VM.do_autosave(-1);
        }
        else {
            /* If this is a good time, autosave. */
            var eventarg = GiDispa.check_autosave();
            if (eventarg)
                VM.do_autosave(eventarg);
        }
    }
}

function fatal_error( err ) {   // modified
    (0,_haven_error__WEBPACK_IMPORTED_MODULE_7__.default)( err );
}

function CharToString(val) {
    if (val < 0x10000) {
        return String.fromCharCode(val);
    }
    else {
        val -= 0x10000;
        return String.fromCharCode(0xD800 + (val >> 10), 0xDC00 + (val & 0x3FF));
    }
}

function TrimArrayToBytes(arr) {
    var ix, newarr;
    var len = arr.length;
    for (ix=0; ix<len; ix++) {
        if (arr[ix] < 0 || arr[ix] >= 0x100) 
            break;
    }
    if (ix == len) {
        return arr;
    }
    newarr = Array(len);
    for (ix=0; ix<len; ix++) {
        if (arr[ix] < 0 || arr[ix] >= 0x100) 
            newarr[ix] = 63;  // '?'
        else
            newarr[ix] = arr[ix];
    }
    return newarr;
}

function ByteArrayToString(arr) {
    var ix, newarr;
    var len = arr.length;
    if (len == 0)
        return '';
    for (ix=0; ix<len; ix++) {
        if (arr[ix] < 0 || arr[ix] >= 0x100) 
            break;
    }
    if (ix == len) {
        return String.fromCharCode.apply(this, arr);
    }
    newarr = Array(len);
    for (ix=0; ix<len; ix++) {
        newarr[ix] = String.fromCharCode(arr[ix] & 0xFF);
    }
    return newarr.join('');
}

function UniArrayToString(arr) {
    var ix, val, newarr;
    var len = arr.length;
    if (len == 0)
        return '';
    for (ix=0; ix<len; ix++) {
        if (arr[ix] >= 0x10000) 
            break;
    }
    if (ix == len) {
        return String.fromCharCode.apply(this, arr);
    }
    newarr = Array(len);
    for (ix=0; ix<len; ix++) {
        val = arr[ix];
        if (val < 0x10000) {
            newarr[ix] = String.fromCharCode(val);
        }
        else {
            val -= 0x10000;
            newarr[ix] = String.fromCharCode(0xD800 + (val >> 10), 0xDC00 + (val & 0x3FF));
        }
    }
    return newarr.join('');
}

function UniArrayToUTF8(arr) {
    var count = 0;

    for (var ix=0; ix<arr.length; ix++) {
        var val = arr[ix];
        if (val < 0x80) {
            count += 1;
        }
        else if (val < 0x800) {
            count += 2;
        }
        else if (val < 0x10000) {
            count += 3;
        }
        else if (val < 0x200000) {
            count += 4;
        }
        else {
            count += 1;
        }
    }

    if (count == arr.length)
        return arr;

    var res = [];
    for (var ix=0; ix<arr.length; ix++) {
        var val = arr[ix];
        if (val < 0x80) {
            res.push(val);
        }
        else if (val < 0x800) {
            res.push(0xC0 | ((val & 0x7C0) >> 6));
            res.push(0x80 |  (val & 0x03F)     );
        }
        else if (val < 0x10000) {
            res.push(0xE0 | ((val & 0xF000) >> 12));
            res.push(0x80 | ((val & 0x0FC0) >>  6));
            res.push(0x80 |  (val & 0x003F)      );
        }
        else if (val < 0x200000) {
            res.push(0xF0 | ((val & 0x1C0000) >> 18));
            res.push(0x80 | ((val & 0x03F000) >> 12));
            res.push(0x80 | ((val & 0x000FC0) >>  6));
            res.push(0x80 |  (val & 0x00003F)      );
        }
        else {
            res.push(63);  // '?'
        }
    }

    return res;
}

function UniArrayToBE32(arr) {
    var res = new Array(4*arr.length);
    for (var ix=0; ix<arr.length; ix++) {
        var val = arr[ix];
        res[4*ix]   = (val >> 24) & 0xFF;
        res[4*ix+1] = (val >> 16) & 0xFF;
        res[4*ix+2] = (val >> 8) & 0xFF;
        res[4*ix+3] = (val) & 0xFF;
    }
    return res;
}

// function qlog(msg) {

function RefBox() {
    this.value = undefined;
    this.set_value = function(val) {
        this.value = val;
    }
    this.get_value = function() {
        return this.value;
    }
}

function RefStruct() {
    this.fields = [];
    this.push_field = function(val) {
        this.fields.push(val);
    }
    this.set_field = function(pos, val) {
        this.fields[pos] = val;
    }
    this.get_field = function(pos) {
        return this.fields[pos];
    }
    this.get_fields = function() {
        return this.fields;
    }
}

const DidNotReturn = { dummy: 'Glk call has not yet returned' };

function call_may_not_return(id) {
    if (id == 0x001 || id == 0x0C0 || id == 0x062)
        return true;
    else
        return false;
}

const strtype_File = 1;
const strtype_Window = 2;
const strtype_Memory = 3;
const strtype_Resource = 4;

let gli_autorestore_glkstate = null;
let gli_windowlist = null;
let gli_rootwin = null;
let geometry_changed = true; 
let content_metrics = null;

let gli_streamlist = null;
let gli_filereflist = null;
let gli_schannellist = null;

let gli_currentstr = null;

let gli_selectref = null;

let gli_api_display_rocks = 1;

/*
var gli_timer_interval = null; 
var gli_timer_started = null; 
var gli_timer_lastsent = null;
*/

function gli_new_window(type, rock) {
    var win = {};
    win.type = type;
    win.rock = rock;
    win.disprock = undefined;

    win.parent = null;
    win.str = gli_stream_open_window(win);
    win.echostr = null;
    win.style = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.style_Normal;
    win.hyperlink = 0;

    win.input_generation = null;
    win.linebuf = null;
    win.char_request = false;
    win.line_request = false;
    win.char_request_uni = false;
    win.line_request_uni = false;
    win.hyperlink_request = false;
    win.mouse_request = false;
    win.echo_line_input = false;    // CHANGED: Quixe echos line input, we don't!
    win.line_input_terminators = [];
    win.request_echo_line_input = null; /* only used during a request */

    /* window-type-specific info is set up in glk_window_open */

    win.prev = null;
    win.next = gli_windowlist;
    gli_windowlist = win;
    if (win.next)
        win.next.prev = win;

    if (window.GiDispa)
        GiDispa.class_register('window', win);
    else
        win.disprock = gli_api_display_rocks++;
    /* We need to assign a disprock even if there's no GiDispa layer,
       because GlkOte differentiates windows by their disprock. */
    geometry_changed = true;

    return win;
}

function gli_delete_window(win) {
    var prev, next;

    if (window.GiDispa)
        GiDispa.class_unregister('window', win);
    geometry_changed = true;
    
    win.echostr = null;
    if (win.str) {
        gli_delete_stream(win.str);
        win.str = null;
    }

    prev = win.prev;
    next = win.next;
    win.prev = null;
    win.next = null;

    if (prev)
        prev.next = next;
    else
        gli_windowlist = next;
    if (next)
        next.prev = prev;

    win.parent = null;
    win.rock = null;
    win.disprock = null;
}

function gli_windows_unechostream(str) {
    var win;
    
    for (win=gli_windowlist; win; win=win.next) {
        if (win.echostr === str)
            win.echostr = null;
    }
}

function gli_window_put_string(_win, val) { // modified
    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.append)( val );
}

function gli_window_buffer_deaccumulate(win) {
    var conta = win.content;
    var stylename = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.StyleNameMap[win.accumstyle];
    var text, ls, ix, obj, arr;

    if (win.accum.length) {
        text = win.accum.join('');
        ls = text.split('\n');
        for (ix=0; ix<ls.length; ix++) {
            arr = undefined;
            if (ix == 0) {
                if (ls[ix]) {
                    if (conta.length == 0) {
                        arr = [];
                        conta.push({ content: arr, append: true });
                    }
                    else {
                        obj = conta[conta.length-1];
                        if (!obj.content) {
                            arr = [];
                            obj.content = arr;
                        }
                        else {
                            arr = obj.content;
                        }
                    }
                }
            }
            else {
                if (ls[ix]) {
                    arr = [];
                    conta.push({ content: arr });
                }
                else {
                    conta.push({ });
                }
            }
            if (arr !== undefined) {
                if (!win.accumhyperlink) {
                    arr.push(stylename);
                    arr.push(ls[ix]);
                }
                else {
                    arr.push({ style:stylename, text:ls[ix], hyperlink:win.accumhyperlink });
                }
            }
        }
    }

    win.accum.length = 0;
    win.accumstyle = win.style;
    win.accumhyperlink = win.hyperlink;
}

function gli_window_buffer_put_special(win, special, flowbreak) {
    gli_window_buffer_deaccumulate(win);

    var conta = win.content;
    var arr = undefined;
    var obj;

    /* The next bit is a simplified version of the array-append code 
       from deaccumulate(). It's simpler because we have exactly one
       item to add. */

    if (conta.length == 0) {
        arr = [];
        obj = { content: arr, append: true };
        if (flowbreak)
            obj.flowbreak = true;
        conta.push(obj);
    }
    else {
        obj = conta[conta.length-1];
        if (flowbreak)
            obj.flowbreak = true;
        if (!obj.content) {
            arr = [];
            obj.content = arr;
        }
        else {
            arr = obj.content;
        }
    }
    
    if (arr !== undefined && special !== undefined) {
        arr.push(special);
    }
}

function gli_new_stream(type, readable, writable, rock) {
    let str = {};
    str.type = type;
    str.rock = rock;
    str.disprock = undefined;

    str.unicode = false;
    /* isbinary is only meaningful for Resource and streaming-File streams */
    str.isbinary = false;
    str.streaming = false;
    str.ref = null;
    str.win = null;
    str.file = null;

    /* for buffer mode */
    str.buf = null;
    str.bufpos = 0;
    str.buflen = 0;
    str.bufeof = 0;
    str.timer_id = null;
    str.flush_func = null;

    /* for streaming mode */
    str.fstream = null;

    str.readcount = 0;
    str.writecount = 0;
    str.readable = readable;
    str.writable = writable;

    str.prev = null;
    str.next = gli_streamlist;
    gli_streamlist = str;
    if (str.next)
        str.next.prev = str;

    if (window.GiDispa)
        GiDispa.class_register('stream', str);

    return str;
}

function gli_delete_stream(str) {
    var prev, next;
    
    if (str === gli_currentstr) {
        gli_currentstr = null;
    }

    gli_windows_unechostream(str);

    if (str.type == strtype_Memory) {
        if (window.GiDispa)
            GiDispa.unretain_array(str.buf);
    }
    else if (str.type == strtype_File) {
        if (str.fstream) {
            str.fstream.fclose();
            str.fstream = null;
        }
    }

    if (window.GiDispa)
        GiDispa.class_unregister('stream', str);

    prev = str.prev;
    next = str.next;
    str.prev = null;
    str.next = null;

    if (prev)
        prev.next = next;
    else
        gli_streamlist = next;
    if (next)
        next.prev = prev;

    str.fstream = null;
    str.buf = null;
    str.readable = false;
    str.writable = false;
    str.ref = null;
    str.win = null;
    str.file = null;
    str.rock = null;
    str.disprock = null;
}

function gli_stream_open_window(win) {
    var str;
    str = gli_new_stream(strtype_Window, false, true, 0);
    str.unicode = true;
    str.win = win;
    return str;
}


function gli_stream_dirty_file(str) {
    if (str.streaming)
        GlkOte.log('### gli_stream_dirty_file called for streaming file!');
    if (str.timer_id === null) {
        if (str.flush_func === null) {
            /* Bodge together a closure to act as a stream method. */
            str.flush_func = function() { gli_stream_flush_file(str); };
        }
        str.timer_id = setTimeout(str.flush_func, 10000);
    }
}

function gli_stream_flush_file(str) {
    if (str.streaming)
        GlkOte.log('### gli_stream_flush_file called for streaming file!');
    if (!(str.timer_id === null)) {
        clearTimeout(str.timer_id);
    }
    str.timer_id = null;
    (0,_file__WEBPACK_IMPORTED_MODULE_4__.write)( str.ref.filename, str.buf, { append: true } );
}

function gli_new_fileref(filename, usage, rock, ref) {
    var fref = {};
    fref.filename = filename;
    fref.rock = rock;
    fref.disprock = undefined;

    fref.textmode = ((usage & _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.fileusage_TextMode) != 0);
    fref.filetype = (usage & _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.fileusage_TypeMask);
    fref.filetypename = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.FileTypeMap[fref.filetype];
    if (!fref.filetypename) {
        fref.filetypename = 'xxx';
    }

    if (!ref) {
        var gameid = '';
        if (fref.filetype == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.fileusage_SavedGame)
            gameid = VM.get_signature();
        // ref = Dialog.file_construct_ref(fref.filename, fref.filetypename, gameid);
    }
    fref.ref = ref;

    fref.prev = null;
    fref.next = gli_filereflist;
    gli_filereflist = fref;
    if (fref.next)
        fref.next.prev = fref;

    if (window.GiDispa)
        GiDispa.class_register('fileref', fref);
    
    return fref;
}

function gli_delete_fileref(fref) {
    var prev, next;
    
    if (window.GiDispa)
        GiDispa.class_unregister('fileref', fref);

    prev = fref.prev;
    next = fref.next;
    fref.prev = null;
    fref.next = null;

    if (prev)
        prev.next = next;
    else
        gli_filereflist = next;
    if (next)
        next.prev = prev;

    fref.filename = null;
    fref.ref = null;
    fref.rock = null;
    fref.disprock = null;
}

function gli_put_char(str, ch) {
    if (!str || !str.writable)
        throw('gli_put_char: invalid stream');

    if (!str.unicode) {
        if (ch < 0 || ch >= 0x100)
            ch = 63;  // '?'
    }

    str.writecount += 1;
    
    switch (str.type) {
    case strtype_File:
        /* non-streaming... */
        gli_stream_dirty_file(str);
        if (!str.unicode || (ch < 0x80 && !str.isbinary)) {
            if (str.bufpos < str.buflen) {
                str.buf[str.bufpos] = ch;
                str.bufpos += 1;
                if (str.bufpos > str.bufeof)
                    str.bufeof = str.bufpos;
            }
        }
        else {
            var arr;
            if (!str.isbinary)
                arr = UniArrayToUTF8([ch]);
            else
                arr = UniArrayToBE32([ch]);
            var len = arr.length;
            if (len > str.buflen-str.bufpos)
                len = str.buflen-str.bufpos;
            for (ix=0; ix<len; ix++)
                str.buf[str.bufpos+ix] = arr[ix];
            str.bufpos += len;
            if (str.bufpos > str.bufeof)
                str.bufeof = str.bufpos;
        }
        break;
    case strtype_Memory:
        if (str.bufpos < str.buflen) {
            str.buf[str.bufpos] = ch;
            str.bufpos += 1;
            if (str.bufpos > str.bufeof)
                str.bufeof = str.bufpos;
        }
        break;
    case strtype_Window:
        if (str.win.line_request)
            throw('gli_put_char: window has pending line request');
        gli_window_put_string(str.win, CharToString(ch));
        if (str.win.echostr)
            gli_put_char(str.win.echostr, ch);
        break;
    }
}

function gli_put_array(str, arr, allbytes) {
    var ix, len, val;

    if (!str || !str.writable)
        throw('gli_put_array: invalid stream');

    if (!str.unicode && !allbytes) {
        arr = TrimArrayToBytes(arr);
        allbytes = true;
    }

    str.writecount += arr.length;
    
    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            if (!str.unicode) {
                var buf = new str.fstream.BufferClass(arr);
                str.fstream.fwrite(buf);
            }
            else {
                if (!str.isbinary) {
                    /* cheap UTF-8 stream */
                    var arr8 = UniArrayToUTF8(arr);
                    var buf = new str.fstream.BufferClass(arr8);
                    str.fstream.fwrite(buf);
                }
                else {
                    /* cheap big-endian stream */
                    var buf = new str.fstream.BufferClass(4*arr.length);
                    for (ix=0; ix<arr.length; ix++) {
                        buf.writeUInt32BE(arr[ix], 4*ix, true);
                    }
                    str.fstream.fwrite(buf);
                }
            }
        }
        else {
            /* non-streaming... */
            gli_stream_dirty_file(str);
            var arr8;
            if (!str.unicode) {
                arr8 = arr;
            }
            else {
                if (!str.isbinary)
                    arr8 = UniArrayToUTF8(arr);
                else
                    arr8 = UniArrayToBE32(arr);
            }
            var len = arr8.length;
            if (len > str.buflen-str.bufpos)
                len = str.buflen-str.bufpos;
            for (ix=0; ix<len; ix++)
                str.buf[str.bufpos+ix] = arr8[ix];
            str.bufpos += len;
            if (str.bufpos > str.bufeof)
                str.bufeof = str.bufpos;
        }
        break;
    case strtype_Memory:
        len = arr.length;
        if (len > str.buflen-str.bufpos)
            len = str.buflen-str.bufpos;
        for (ix=0; ix<len; ix++)
            str.buf[str.bufpos+ix] = arr[ix];
        str.bufpos += len;
        if (str.bufpos > str.bufeof)
            str.bufeof = str.bufpos;
        break;
    case strtype_Window:
        if (str.win.line_request)
            throw('gli_put_array: window has pending line request');
        if (allbytes)
            val = String.fromCharCode.apply(this, arr);
        else
            val = UniArrayToString(arr);
        gli_window_put_string(str.win, val);
        if (str.win.echostr)
            gli_put_array(str.win.echostr, arr, allbytes);
        break;
    }
}

function gli_get_char(str, want_unicode) {
    var ch;

    if (!str || !str.readable)
        return -1;
    
    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            if (!str.unicode) {
                var len = str.fstream.fread(str.buffer4, 1);
                if (!len)
                    return -1;
                str.readcount++;
                return str.buffer4[0];
            }
            else {
                if (!str.isbinary) {
                    /* slightly less cheap UTF8 stream */
                    var val0, val1, val2, val3;
                    var len = str.fstream.fread(str.buffer4, 1);
                    if (!len)
                        return -1;
                    val0 = str.buffer4[0];
                    if (val0 < 0x80) {
                        ch = val0;
                    }
                    else {
                        var len = str.fstream.fread(str.buffer4, 1);
                        if (!len)
                            return -1;
                        val1 = str.buffer4[0];
                        if ((val1 & 0xC0) != 0x80)
                            return -1;
                        if ((val0 & 0xE0) == 0xC0) {
                            ch = (val0 & 0x1F) << 6;
                            ch |= (val1 & 0x3F);
                        }
                        else {
                            var len = str.fstream.fread(str.buffer4, 1);
                            if (!len)
                                return -1;
                            val2 = str.buffer4[0];
                            if ((val2 & 0xC0) != 0x80)
                                return -1;
                            if ((val0 & 0xF0) == 0xE0) {
                                ch = (((val0 & 0xF)<<12)  & 0x0000F000);
                                ch |= (((val1 & 0x3F)<<6) & 0x00000FC0);
                                ch |= (((val2 & 0x3F))    & 0x0000003F);
                            }
                            else if ((val0 & 0xF0) == 0xF0) {
                                var len = str.fstream.fread(str.buffer4, 1);
                                if (!len)
                                    return -1;
                                val3 = str.buffer4[0];
                                if ((val3 & 0xC0) != 0x80)
                                    return -1;
                                ch = (((val0 & 0x7)<<18)   & 0x1C0000);
                                ch |= (((val1 & 0x3F)<<12) & 0x03F000);
                                ch |= (((val2 & 0x3F)<<6)  & 0x000FC0);
                                ch |= (((val3 & 0x3F))     & 0x00003F);
                            }
                            else {
                                return -1;
                            }
                        }
                    }
                }
                else {
                    /* cheap big-endian stream */
                    var len = str.fstream.fread(str.buffer4, 4);
                    if (len < 4)
                        return -1;
                    /*### or buf.readUInt32BE(0, true) */
                    ch = (str.buffer4[0] << 24);
                    ch |= (str.buffer4[1] << 16);
                    ch |= (str.buffer4[2] << 8);
                    ch |= str.buffer4[3];
                }
                str.readcount++;
                ch >>>= 0;
                if (!want_unicode && ch >= 0x100)
                    return 63; // return '?'
                return ch;
            }
        }
        /* non-streaming, fall through to resource... */
    case strtype_Resource:
        if (str.unicode) {
            if (str.isbinary) {
                /* cheap big-endian stream */
                if (str.bufpos >= str.bufeof)
                    return -1;
                ch = str.buf[str.bufpos];
                str.bufpos++;
                if (str.bufpos >= str.bufeof)
                    return -1;
                ch = (ch << 8) | (str.buf[str.bufpos] & 0xFF);
                str.bufpos++;
                if (str.bufpos >= str.bufeof)
                    return -1;
                ch = (ch << 8) | (str.buf[str.bufpos] & 0xFF);
                str.bufpos++;
                if (str.bufpos >= str.bufeof)
                    return -1;
                ch = (ch << 8) | (str.buf[str.bufpos] & 0xFF);
                str.bufpos++;
            }
            else {
                /* slightly less cheap UTF8 stream */
                var val0, val1, val2, val3;
                if (str.bufpos >= str.bufeof)
                    return -1;
                val0 = str.buf[str.bufpos];
                str.bufpos++;
                if (val0 < 0x80) {
                    ch = val0;
                }
                else {
                    if (str.bufpos >= str.bufeof)
                        return -1;
                    val1 = str.buf[str.bufpos];
                    str.bufpos++;
                    if ((val1 & 0xC0) != 0x80)
                        return -1;
                    if ((val0 & 0xE0) == 0xC0) {
                        ch = (val0 & 0x1F) << 6;
                        ch |= (val1 & 0x3F);
                    }
                    else {
                        if (str.bufpos >= str.bufeof)
                            return -1;
                        val2 = str.buf[str.bufpos];
                        str.bufpos++;
                        if ((val2 & 0xC0) != 0x80)
                            return -1;
                        if ((val0 & 0xF0) == 0xE0) {
                            ch = (((val0 & 0xF)<<12)  & 0x0000F000);
                            ch |= (((val1 & 0x3F)<<6) & 0x00000FC0);
                            ch |= (((val2 & 0x3F))    & 0x0000003F);
                        }
                        else if ((val0 & 0xF0) == 0xF0) {
                            if (str.bufpos >= str.bufeof)
                                return -1;
                            val3 = str.buf[str.bufpos];
                            str.bufpos++;
                            if ((val3 & 0xC0) != 0x80)
                                return -1;
                            ch = (((val0 & 0x7)<<18)   & 0x1C0000);
                            ch |= (((val1 & 0x3F)<<12) & 0x03F000);
                            ch |= (((val2 & 0x3F)<<6)  & 0x000FC0);
                            ch |= (((val3 & 0x3F))     & 0x00003F);
                        }
                        else {
                            return -1;
                        }
                    }
                }
            }
            str.readcount++;
            ch >>>= 0;
            if (!want_unicode && ch >= 0x100)
                return 63; // return '?'
            return ch;
        }
        /* non-unicode file/resource, fall through to memory... */
    case strtype_Memory:
        if (str.bufpos < str.bufeof) {
            ch = str.buf[str.bufpos];
            str.bufpos++;
            str.readcount++;
            if (!want_unicode && ch >= 0x100)
                return 63; // return '?'
            return ch;
        }
        else {
            return -1; // end of stream 
        }
    default:
        return -1;
    }
}

function gli_get_line(str, buf, want_unicode) {
    if (!str || !str.readable)
        return 0;

    var lx, ch;
    var len = buf.length;
    var gotnewline;

    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            if (len == 0)
                return 0;
            len -= 1; /* for the terminal null */
            gotnewline = false;
            for (lx=0; lx<len && !gotnewline; lx++) {
                ch = gli_get_char(str, want_unicode);
                if (ch == -1)
                    break;
                buf[lx] = ch;
                gotnewline = (ch == 10);
            }
            return lx;
        }
        /* non-streaming, fall through to resource... */
    case strtype_Resource:
        if (str.unicode) {
            if (len == 0)
                return 0;
            len -= 1; /* for the terminal null */
            gotnewline = false;
            for (lx=0; lx<len && !gotnewline; lx++) {
                ch = gli_get_char(str, want_unicode);
                if (ch == -1)
                    break;
                buf[lx] = ch;
                gotnewline = (ch == 10);
            }
            return lx;
        }
        /* non-unicode file/resource, fall through to memory... */
    case strtype_Memory:
        if (len == 0)
            return 0;
        len -= 1; /* for the terminal null */
        if (str.bufpos >= str.bufeof) {
            len = 0;
        }
        else {
            if (str.bufpos + len > str.bufeof) {
                len = str.bufeof - str.bufpos;
            }
        }
        gotnewline = false;
        if (!want_unicode) {
            for (lx=0; lx<len && !gotnewline; lx++) {
                ch = str.buf[str.bufpos++];
                if (!want_unicode && ch >= 0x100)
                    ch = 63; // ch = '?'
                buf[lx] = ch;
                gotnewline = (ch == 10);
            }
        }
        else {
            for (lx=0; lx<len && !gotnewline; lx++) {
                ch = str.buf[str.bufpos++];
                buf[lx] = ch;
                gotnewline = (ch == 10);
            }
        }
        str.readcount += lx;
        return lx;
    default:
        return 0;
    }
}

function gli_get_buffer(str, buf, want_unicode) {
    if (!str || !str.readable)
        return 0;

    var len = buf.length;
    var lx, ch;
    
    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            for (lx=0; lx<len; lx++) {
                ch = gli_get_char(str, want_unicode);
                if (ch == -1)
                    break;
                buf[lx] = ch;
            }
            return lx;
        }
        /* non-streaming, fall through to resource... */
    case strtype_Resource:
        if (str.unicode) {
            for (lx=0; lx<len; lx++) {
                ch = gli_get_char(str, want_unicode);
                if (ch == -1)
                    break;
                buf[lx] = ch;
            }
            return lx;
        }
        /* non-unicode file/resource, fall through to memory... */
    case strtype_Memory:
        if (str.bufpos >= str.bufeof) {
            len = 0;
        }
        else {
            if (str.bufpos + len > str.bufeof) {
                len = str.bufeof - str.bufpos;
            }
        }
        if (!want_unicode) {
            for (lx=0; lx<len; lx++) {
                ch = str.buf[str.bufpos++];
                if (!want_unicode && ch >= 0x100)
                    ch = 63; // ch = '?'
                buf[lx] = ch;
            }
        }
        else {
            for (lx=0; lx<len; lx++) {
                buf[lx] = str.buf[str.bufpos++];
            }
        }
        str.readcount += len;
        return len;
    default:
        return 0;
    }
}

function gli_stream_fill_result(str, result) {
    if (!result)
        return;
    result.set_field(0, str.readcount);
    result.set_field(1, str.writecount);
}

function glk_put_jstring(val, allbytes) {
    glk_put_jstring_stream(gli_currentstr, val, allbytes);
}

function glk_put_jstring_stream(str, val, allbytes) {
    let ix, len;

    if (!str || !str.writable)
        throw('glk_put_jstring: invalid stream');

    str.writecount += val.length;
    
    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            if (!str.unicode) {
                // if !allbytes, we just give up on non-Latin-1 characters
                let buf = new str.fstream.BufferClass(val, 'binary');
                str.fstream.fwrite(buf);
            }
            else {
                if (!str.isbinary) {
                    /* cheap UTF-8 stream */
                    let buf = new str.fstream.BufferClass(val); // utf8
                    str.fstream.fwrite(buf);
                }
                else {
                    /* cheap big-endian stream */
                    let buf = new str.fstream.BufferClass(4*val.length);
                    for (ix=0; ix<val.length; ix++) {
                        buf.writeUInt32BE(val.charCodeAt(ix), 4*ix, true);
                    }
                    str.fstream.fwrite(buf);
                }
            }
        }
        else {
            /* non-streaming... */
            gli_stream_dirty_file(str);
            let arr = [];
            for (ix=0; ix<val.length; ix++)
                arr.push(val.charCodeAt(ix));
            let arr8;
            if (!str.unicode) {
                arr8 = arr;
            }
            else {
                if (!str.isbinary)
                    arr8 = UniArrayToUTF8(arr);
                else
                    arr8 = UniArrayToBE32(arr);
            }
            let len = arr8.length;
            if (len > str.buflen-str.bufpos)
                len = str.buflen-str.bufpos;
            for (ix=0; ix<len; ix++)
                str.buf[str.bufpos+ix] = arr8[ix];
            str.bufpos += len;
            if (str.bufpos > str.bufeof)
                str.bufeof = str.bufpos;
        }
        break;
    case strtype_Memory:
        len = val.length;
        if (len > str.buflen-str.bufpos)
            len = str.buflen-str.bufpos;
        if (str.unicode || allbytes) {
            for (ix=0; ix<len; ix++)
                str.buf[str.bufpos+ix] = val.charCodeAt(ix);
        }
        else {
            for (ix=0; ix<len; ix++) {
                let ch = val.charCodeAt(ix);
                if (ch < 0 || ch >= 0x100)
                    ch = 63;  // '?'
                str.buf[str.bufpos+ix] = ch;
            }
        }
        str.bufpos += len;
        if (str.bufpos > str.bufeof)
            str.bufeof = str.bufpos;
        break;
    case strtype_Window:
        if (str.win.line_request)
            throw('glk_put_jstring: window has pending line request');
        gli_window_put_string(str.win, val);
        if (str.win.echostr)
            glk_put_jstring_stream(str.win.echostr, val, allbytes);
        break;
    }
}

function gli_set_style(str, val) {
    if (!str || !str.writable)
        throw('gli_set_style: invalid stream');

    if (val >= _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.style_NUMSTYLES)
        val = 0;

    if (str.type == strtype_Window) {
        (0,_haven__WEBPACK_IMPORTED_MODULE_6__.setStyle)( val, 0 );
        if (str.win.echostr)
            gli_set_style(str.win.echostr, val);
    }
}

function glk_exit() {   // modified
    /* For safety, this is fast and idempotent. */
    has_exited = true;
    ui_disabled = true;
    gli_selectref = null;
    (0,_haven_haven__WEBPACK_IMPORTED_MODULE_3__.engineStops)();
    return DidNotReturn;
}

function glk_tick() {
    /* Do nothing. */
}

function glk_gestalt(sel, val) {
    return glk_gestalt_ext(sel, val, null);
}

function glk_gestalt_ext(sel, val, arr) {   // modified
    switch (sel) {

    case 0: // gestalt_Version
        /* This implements Glk spec version 0.7.4. */
        return 0x00000704;

    case 1: // gestalt_CharInput
        /* This is not a terrific approximation. Return false for function
           keys, control keys, and the high-bit non-printables. For
           everything else in the Unicode range, return true. */
        if (val <= _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_Left && val >= _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_End)
            return 1;
        if (val >= 0x100000000-_glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_MAXVAL)
            return 0;
        if (val > 0x10FFFF)
            return 0;
        if ((val >= 0 && val < 32) || (val >= 127 && val < 160))
            return 0;
        return 1;

    case 2: // gestalt_LineInput
        /* Same as the above, except no special keys. */
        if (val > 0x10FFFF)
            return 0;
        if ((val >= 0 && val < 32) || (val >= 127 && val < 160))
            return 0;
        return 1;

    case 3: // gestalt_CharOutput
        /* Same thing again. We assume that all printable characters,
           as well as the placeholders for nonprintables, are one character
           wide. */
        if ((val > 0x10FFFF) 
            || (val >= 0 && val < 32) 
            || (val >= 127 && val < 160)) {
            if (arr)
                arr[0] = 1;
            return 0; // gestalt_CharOutput_CannotPrint
        }
        if (arr)
            arr[0] = 1;
        return 2; // gestalt_CharOutput_ExactPrint

    // all of these are unsupported
    case 4: // gestalt_MouseInput
    case 5: // gestalt_Timer
    case 6: // gestalt_Graphics
    case 7: // gestalt_DrawImage
    case 8: // gestalt_Sound
    case 9: // gestalt_SoundVolume
    case 10: // gestalt_SoundNotify
    case 11: // gestalt_Hyperlinks
    case 12: // gestalt_HyperlinkInput
    case 13: // gestalt_SoundMusic
    case 14: // gestalt_GraphicsTransparency
        return 0;

    case 15: // gestalt_Unicode
        return 1;

    case 16: // gestalt_UnicodeNorm
        return 1;

    case 17: // gestalt_LineInputEcho
        return 0;

    case 18: // gestalt_LineTerminators
        return 1;

    case 19: // gestalt_LineTerminatorKey
        /* Really this result should be inspected from glkote.js. Since it
           isn't, be sure to keep these values in sync with 
           terminator_key_names. */
        if (val == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_Escape)
            return 1;
        if (val >= _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_Func12 && val <= _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.keycode_Func1)
            return 1;
        return 0;

    case 20: // gestalt_DateTime
        return 1;

    case 21: // gestalt_Sound2
        return 0;

    case 22: // gestalt_ResourceStream
        return 0;

    case 23: // gestalt_GraphicsCharInput
        return 0;

    }

    if (option_glk_gestalt_hook) {
        let res = option_glk_gestalt_hook(sel, val, arr);
        if (res !== undefined)
            return res;
    }

    return 0;
}

function glk_window_iterate(win, rockref) {
    if (!win)
        win = gli_windowlist;
    else
        win = win.next;

    if (win) {
        if (rockref)
            rockref.set_value(win.rock);
        return win;
    }

    if (rockref)
        rockref.set_value(0);
    return null;
}

function glk_window_get_rock(win) {
    if (!win)
        throw('glk_window_get_rock: invalid window');
    return win.rock;
}

function glk_window_get_root() {
    return gli_rootwin;
}

function glk_window_open(splitwin, _method, _size, wintype, rock) { // modified
    var newwin;

    if(gli_rootwin) {
        // Allow only main window!
        return null;
    }

    if (splitwin)
        throw('glk_window_open: splitwin must be null for first window');

    newwin = gli_new_window(wintype, rock);

    switch (newwin.type) {
        case _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.wintype_TextBuffer:
            /* accum is a list of strings of a given style; newly-printed text
            is pushed onto the list. accumstyle is the style of that text.
            Anything printed in a different style (or hyperlink value)
            triggers a call to gli_window_buffer_deaccumulate, which cleans
            out accum and adds the results to the content array. The content
            is in GlkOte format.
            */
            newwin.accum = [];
            newwin.accumstyle = null;
            newwin.accumhyperlink = 0;
            newwin.content = [];
            newwin.clearcontent = false;
            newwin.reserve = []; /* autosave of recent content */
            break;
        default:
            /* Silently return null */
            gli_delete_window(newwin);
            return null;
    }

    gli_rootwin = newwin;
    return newwin;
}

function glk_window_get_type(win) {
    if (!win)
        throw('glk_window_get_type: invalid window');
    return win.type;
}

function glk_window_get_parent(win) {
    if (!win)
        throw('glk_window_get_parent: invalid window');
    return win.parent;
}

function glk_window_get_stream(win) {
    if (!win)
        throw('glk_window_get_stream: invalid window');
    return win.str;
}

function glk_window_set_echo_stream(win, str) {
    if (!win)
        throw('glk_window_set_echo_stream: invalid window');
    win.echostr = str;
}

function glk_window_get_echo_stream(win) {
    if (!win)
        throw('glk_window_get_echo_stream: invalid window');
    return win.echostr;
}

function glk_set_window(win) {
    if (!win)
        gli_currentstr = null;
    else
        gli_currentstr = win.str;
}

function glk_window_get_sibling(win) {
    var parent, sib;
    if (!win)
        throw('glk_window_get_sibling: invalid window');
    parent = win.parent;
    if (!parent)
        return null;
    if (win === parent.child1)
        return parent.child2;
    else if (win === parent.child2)
        return parent.child1;
    else
        throw('glk_window_get_sibling: window tree is corrupted');
}

function glk_stream_iterate(str, rockref) {
    if (!str)
        str = gli_streamlist;
    else
        str = str.next;

    if (str) {
        if (rockref)
            rockref.set_value(str.rock);
        return str;
    }

    if (rockref)
        rockref.set_value(0);
    return null;
}

function glk_stream_get_rock(str) {
    if (!str)
        throw('glk_stream_get_rock: invalid stream');
    return str.rock;
}

function glk_stream_open_file(fref, fmode, rock) {  // modified
    if( !fref || !fref.filename ) {
        throw('glk_stream_open_file: invalid fileref');
    }

    const { filename } = fref;
    var content = null;
    if (fmode !== _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write) {
        content = (0,_file__WEBPACK_IMPORTED_MODULE_4__.read)(
            filename, 
            {
                binary: !fref.textmode,
                cwd: filePath( filename ),
                header: fref.textmode
            }
        );
    }
    if (content === null) {
        content = '';
        if (fmode !== _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read) {
            /* We just created this file. (Or perhaps we're in Write mode
                and we're truncating.) Write immediately, to create it and
                get the creation date right. */
            (0,_file__WEBPACK_IMPORTED_MODULE_4__.write)( 
                filename, 
                '', 
                { 
                    cwd: filePath( filename ),
                    binary: !fref.textmode 
                }
            );
        }
    }

    const str = gli_new_stream(strtype_File, 
        (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write), 
        (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read), 
        rock);
    str.unicode = false;
    str.isbinary = !fref.textmode;
    str.ref = fref.ref;
    str.filename = filename;
    str.origfmode = fmode;
    str.streaming = false;
    if( typeof content === 'string' ) {
        str.buf = content.split('').map( char => char.charCodeAt(0) );
    }
    else {
        str.buf = content;
    }
    str.buflen = 0xFFFFFFFF; /* enormous */
    if (fmode == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write)
        str.bufeof = 0;
    else
        str.bufeof = content.length;
    if (fmode == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_WriteAppend)
        str.bufpos = str.bufeof;
    else
        str.bufpos = 0;

    return str;
}

function glk_stream_open_memory(buf, fmode, rock) {
    var str;

    if (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read 
        && fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write 
        && fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_ReadWrite) 
        throw('glk_stream_open_memory: illegal filemode');

    str = gli_new_stream(strtype_Memory, 
        (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write), 
        (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read), 
        rock);
    str.unicode = false;

    if (buf) {
        str.buf = buf;
        str.buflen = buf.length;
        str.bufpos = 0;
        if (fmode == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write)
            str.bufeof = 0;
        else
            str.bufeof = str.buflen;
        if (window.GiDispa)
            GiDispa.retain_array(buf);
    }

    return str;
}

function glk_stream_close(str, result) {
    if (!str)
        throw('glk_stream_close: invalid stream');

    if (str.type == strtype_Window)
        throw('glk_stream_close: cannot close window stream');

    if (str.type == strtype_File && str.writable) {
        if (!str.streaming) {
            if (!(str.timer_id === null)) {
                clearTimeout(str.timer_id);
                str.timer_id = null;
            }

            const contents = str.buf.map( code => String.fromCharCode( code ) ).join( '' );
            const code = contents.substring( contents.indexOf( '\n' ) + 1);
            if( str.filename === 'VpJSEval' && code.length > 1 ) {
                (0,_vorple__WEBPACK_IMPORTED_MODULE_5__.evaluate)( code );
            }
            else {
                (0,_file__WEBPACK_IMPORTED_MODULE_4__.write)(
                    str.filename,
                    str.buf,
                    {
                        binary: str.isbinary,
                        cwd: filePath( str.filename ) 
                    }
                );
            }
        }
    }

    gli_stream_fill_result(str, result);
    gli_delete_stream(str);
}

function glk_stream_set_position(str, pos, seekmode) {
    if (!str)
        throw('glk_stream_set_position: invalid stream');

    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            str.fstream.fseek(pos, seekmode);
            break;
        }
        //### check if file has been modified? This is a half-decent time.
        /* fall through to memory... */
    case strtype_Resource:
        /* fall through to memory... */
    case strtype_Memory:
        if (seekmode == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.seekmode_Current) {
            pos = str.bufpos + pos;
        }
        else if (seekmode == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.seekmode_End) {
            pos = str.bufeof + pos;
        }
        else {
            /* pos = pos */
        }
        if (pos < 0)
            pos = 0;
        if (pos > str.bufeof)
            pos = str.bufeof;
        str.bufpos = pos;
    }
}

function glk_stream_get_position(str) {
    if (!str)
        throw('glk_stream_get_position: invalid stream');

    switch (str.type) {
    case strtype_File:
        if (str.streaming) {
            return str.fstream.ftell();
        }
        /* fall through to memory... */
    case strtype_Resource:
        /* fall through to memory... */
    case strtype_Memory:
        return str.bufpos;
    default:
        return 0;
    }
}

function glk_stream_set_current( str ) {
    gli_currentstr = str;
}

function glk_stream_get_current( str ) {
    return gli_currentstr;
}

function glk_fileref_create_by_name(usage, filename, rock) {    // modified
    const fref = gli_new_fileref(filename, usage, rock, null);
    return fref;
}

function glk_fileref_create_by_prompt(usage, fmode, rock) {
    var modename;

    var filetype = (usage & _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.fileusage_TypeMask);
    var filetypename = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.FileTypeMap[filetype];
    if (!filetypename) {
        filetypename = 'xxx';
    }

    switch (fmode) {
        case _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write:
            modename = 'write';
            break;
        case _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_ReadWrite:
            modename = 'readwrite';
            break;
        case _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_WriteAppend:
            modename = 'writeappend';
            break;
        case _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read:
        default:
            modename = 'read';
            break;
    }

    var special = {
        type: 'fileref_prompt',
        filetype: filetypename,
        filemode: modename
    };
    var callback = {
        usage: usage,
        rock: rock
    };

    if (filetype == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.fileusage_SavedGame)
        special.gameid = VM.get_signature();

    ui_specialinput = special;
    ui_specialcallback = callback;
    gli_selectref = null;
    return DidNotReturn;
}

function gli_fileref_create_by_prompt_callback(obj) {
    var ref = obj.value;
    var usage = ui_specialcallback.usage;
    var rock = ui_specialcallback.rock;

    var fref = null;
    if (ref) {
        fref = gli_new_fileref(ref.filename, usage, rock, ref);
    }

    ui_specialinput = null;
    ui_specialcallback = null;

    if (window.GiDispa)
        GiDispa.prepare_resume(fref);
        
    VM.resume(fref);
}

function glk_fileref_destroy(fref) {
    if (!fref)
        throw('glk_fileref_destroy: invalid fileref');
    gli_delete_fileref(fref);
}

function glk_fileref_iterate(fref, rockref) {
    if (!fref)
        fref = gli_filereflist;
    else
        fref = fref.next;

    if (fref) {
        if (rockref)
            rockref.set_value(fref.rock);
        return fref;
    }

    if (rockref)
        rockref.set_value(0);
    return null;
}

function glk_fileref_get_rock(fref) {
    if (!fref)
        throw('glk_fileref_get_rock: invalid fileref');
    return fref.rock;
}

function glk_fileref_does_file_exist(fref) {
    if( !fref || typeof fref.filename !== 'string' ) {
        throw('glk_fileref_does_file_exist: invalid fileref');
    }

    return (0,_file__WEBPACK_IMPORTED_MODULE_4__.exists)( fref.filename, { cwd: filePath( fref.filename ) } ) ? 1 : 0;
}

function glk_fileref_create_from_fileref(usage, oldfref, rock) {
    if (!oldfref)
        throw('glk_fileref_create_from_fileref: invalid fileref');
    
    var fref = gli_new_fileref(oldfref.filename, usage, rock, null);
    return fref;
}

function glk_put_char(ch) {
    gli_put_char(gli_currentstr, ch & 0xFF);
}

function glk_put_char_stream(str, ch) {
    gli_put_char(str, ch & 0xFF);
}

function glk_put_string(val) {
    glk_put_jstring_stream(gli_currentstr, val, true);
}

function glk_put_string_stream(str, val) {
    glk_put_jstring_stream(str, val, true);
}

function glk_put_buffer(arr) {
    arr = TrimArrayToBytes(arr);
    gli_put_array(gli_currentstr, arr, true);
}

function glk_put_buffer_stream(str, arr) {
    arr = TrimArrayToBytes(arr);
    gli_put_array(str, arr, true);
}

function glk_set_style(val) {
    gli_set_style(gli_currentstr, val);
}

function glk_set_style_stream(str, val) {
    gli_set_style(str, val);
}

function glk_get_char_stream(str) {
    if (!str)
        throw('glk_get_char_stream: invalid stream');
    return gli_get_char(str, false);
}

function glk_get_line_stream(str, buf) {
    if (!str)
        throw('glk_get_line_stream: invalid stream');
    return gli_get_line(str, buf, false);
}

function glk_get_buffer_stream(str, buf) {
    if (!str)
        throw('glk_get_buffer_stream: invalid stream');
    return gli_get_buffer(str, buf, false);
}

function glk_char_to_lower(val) {
    if (val >= 0x41 && val <= 0x5A)
        return val + 0x20;
    if (val >= 0xC0 && val <= 0xDE && val != 0xD7)
        return val + 0x20;
    return val;
}

function glk_char_to_upper(val) {
    if (val >= 0x61 && val <= 0x7A)
        return val - 0x20;
    if (val >= 0xE0 && val <= 0xFE && val != 0xF7)
        return val - 0x20;
    return val;
}

function glk_select(eventref) {
    gli_selectref = eventref;
    return DidNotReturn;
}

function glk_request_line_event(_win, buf, initlen) {   // modified
    // we'll just ignore where the event was triggered – Vorple will handle it from here on
    const win = gli_rootwin;

    if (initlen) {
        /* This will be copied into the next update. */
        var ls = buf.slice(0, initlen);
        if (!current_partial_outputs)
            current_partial_outputs = {};
        current_partial_outputs[win.disprock] = ByteArrayToString(ls);
    }
    win.line_request = true;
    win.line_request_uni = false;
    if (win.type == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.wintype_TextBuffer)
        win.request_echo_line_input = win.echo_line_input;
    else
        win.request_echo_line_input = true;
    win.input_generation = event_generation;
    win.linebuf = buf;
    if (window.GiDispa)
        GiDispa.retain_array(buf);

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();
    (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.expectInput)();
}

function glk_request_char_event(_win) { // modified
    const win = gli_rootwin;

    if (win.char_request || win.line_request)
        throw('glk_request_char_event: window already has keyboard request');

    win.char_request = true;
    win.char_request_uni = false;
    win.input_generation = event_generation;

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();
    _haven_input__WEBPACK_IMPORTED_MODULE_1__.keypress.wait();
}

function glk_cancel_char_event(win) {
    if (!win)
        throw('glk_cancel_char_event: invalid window');

    win.char_request = false;
    win.char_request_uni = false;
}

function glk_set_echo_line_event(win, val) {
   if (!win)
        throw('glk_set_echo_line_event: invalid window');

   win.echo_line_input = (val != 0);
}

let KeystrokeValueMap = null;

function glk_set_terminators_line_event(win, arr) {
    if (!win)
         throw('glk_set_terminators_line_event: invalid window');
 
    if (KeystrokeValueMap === null) {
        /* First, we have to build this map. (It's only used by this
           function, which is why the constructor code is here. */
        KeystrokeValueMap = {};
        for (var val in _glkConstants__WEBPACK_IMPORTED_MODULE_8__.KeystrokeNameMap) {
            KeystrokeValueMap[_glkConstants__WEBPACK_IMPORTED_MODULE_8__.KeystrokeNameMap[val]] = val;
        }
    }
 
    var res = [];
    if (arr) {
        for (var ix=0; ix<arr.length; ix++) {
            var val = KeystrokeValueMap[arr[ix]];
            if (val)
                res.push(val);
        }
    }
    win.line_input_terminators = res;
}

function glk_buffer_to_lower_case_uni(arr, numchars) {
    var ix, jx, pos, val, origval;
    var arrlen = arr.length;
    var src = arr.slice(0, numchars);

    if (arrlen < numchars)
        throw('buffer_to_lower_case_uni: numchars exceeds array length');

    pos = 0;
    for (ix=0; ix<numchars; ix++) {
        origval = src[ix];
        val = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_lower_table[origval];
        if (val === undefined) {
            arr[pos] = origval;
            pos++;
        }
        else if (!(val instanceof Array)) {
            arr[pos] = val;
            pos++;
        }
        else {
            for (jx=0; jx<val.length; jx++) {
                arr[pos] = val[jx];
                pos++;
            }
        }
    }

    /* in case we stretched the array */
    arr.length = arrlen;

    return pos;
}

function glk_buffer_to_upper_case_uni(arr, numchars) {
    var ix, jx, pos, val, origval;
    var arrlen = arr.length;
    var src = arr.slice(0, numchars);

    if (arrlen < numchars)
        throw('buffer_to_upper_case_uni: numchars exceeds array length');

    pos = 0;
    for (ix=0; ix<numchars; ix++) {
        origval = src[ix];
        val = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_upper_table[origval];
        if (val === undefined) {
            arr[pos] = origval;
            pos++;
        }
        else if (!(val instanceof Array)) {
            arr[pos] = val;
            pos++;
        }
        else {
            for (jx=0; jx<val.length; jx++) {
                arr[pos] = val[jx];
                pos++;
            }
        }
    }

    /* in case we stretched the array */
    arr.length = arrlen;

    return pos;
}

function glk_buffer_to_title_case_uni(arr, numchars, lowerrest) {
    var ix, jx, pos, val, origval;
    var arrlen = arr.length;
    var src = arr.slice(0, numchars);

    if (arrlen < numchars)
        throw('buffer_to_title_case_uni: numchars exceeds array length');

    pos = 0;

    if (numchars == 0)
        return 0;

    ix = 0;
    {
        origval = src[ix];
        val = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_title_table[origval];
        if (val === undefined) {
            val = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_upper_table[origval];
        }
        if (val === undefined) {
            arr[pos] = origval;
            pos++;
        }
        else if (!(val instanceof Array)) {
            arr[pos] = val;
            pos++;
        }
        else {
            for (jx=0; jx<val.length; jx++) {
                arr[pos] = val[jx];
                pos++;
            }
        }
    }
    
    if (!lowerrest) {
        for (ix=1; ix<numchars; ix++) {
            origval = src[ix];
            arr[pos] = origval;
            pos++;
        }
    }
    else {
        for (ix=1; ix<numchars; ix++) {
            origval = src[ix];
            val = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_lower_table[origval];
            if (val === undefined) {
                arr[pos] = origval;
                pos++;
            }
            else if (!(val instanceof Array)) {
                arr[pos] = val;
                pos++;
            }
            else {
                for (jx=0; jx<val.length; jx++) {
                    arr[pos] = val[jx];
                    pos++;
                }
            }
        }
    }

    /* in case we stretched the array */
    arr.length = arrlen;

    return pos;
}

function gli_buffer_canon_decompose_uni(arr, numchars) {
    /* This is a utility function to decompose an array. The behavior is
       almost the same as glk_buffer_canon_decompose_uni(), except that
       this *doesn't* trim the array down to its original length. That
       is, this decomposition can cause the array to grow. */

    /* The algorithm for the canonical decomposition of a string: For
       each character, look up the decomposition in the decomp table.
       Append the decomposition to the buffer. Finally, sort every
       substring of the buffer which is made up of combining
       characters (characters with a nonzero combining class). */

    var src = arr.slice(0, numchars);
    var pos, ix, jx, origval, val;
    var grpstart, grpend, kx, tmp;

    pos = 0;
    for (ix=0; ix<numchars; ix++) {
        origval = src[ix];
        val = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_decomp_table[origval];
        if (val === undefined) {
            arr[pos] = origval;
            pos++;
        }
        else if (!(val instanceof Array)) {
            arr[pos] = val;
            pos++;
        }
        else {
            for (jx=0; jx<val.length; jx++) {
                arr[pos] = val[jx];
                pos++;
            }
        }
    }

    /* Now we sort groups of combining characters. This should be a
       stable sort by the combining-class number. We're lazy and
       nearly all groups are short, so we'll just bubble-sort. */
    ix = 0;
    while (ix < pos) {
        if (!_glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_combin_table[arr[ix]]) {
            ix++;
            continue;
        }
        if (ix >= pos)
            break;
        grpstart = ix;
        while (ix < pos && _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_combin_table[arr[ix]]) 
            ix++;
        grpend = ix;
        if (grpend - grpstart >= 2) {
            /* Sort this group. */
            for (jx = grpend-1; jx > grpstart; jx--) {
                for (kx = grpstart; kx < jx; kx++) {
                    if (_glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_combin_table[arr[kx]] > _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_combin_table[arr[kx+1]]) {
                        tmp = arr[kx];
                        arr[kx] = arr[kx+1];
                        arr[kx+1] = tmp;
                    }
                }
            }
        }
    }

    return pos;
}

function gli_buffer_canon_compose_uni(arr, numchars) {
    /* The algorithm for canonically composing characters in a string:
       for each base character, compare it to all the following
       combining characters (up to the next base character). If they're 
       composable, compose them. Repeat until no more pairs are found. */

    var ix, jx, curch, newch, curclass, newclass, map, pos;

    if (numchars == 0)
        return 0;

    pos = 0;
    curch = arr[0];
    curclass = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_combin_table[curch];
    if (curclass)
        curclass = 999; // just in case the first character is a combiner
    ix = 1;
    jx = ix;
    while (true) {
        if (jx >= numchars) {
            arr[pos] = curch;
            pos = ix;
            break;
        }
        newch = arr[jx];
        newclass = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_combin_table[newch];
        map = _glkConstants__WEBPACK_IMPORTED_MODULE_8__.unicode_compo_table[curch];
        if (map !== undefined && map[newch] !== undefined
            && (!curclass || (newclass && curclass < newclass))) {
            curch = map[newch];
            arr[pos] = curch;
        }
        else {
            if (!newclass) {
                pos = ix;
                curch = newch;
            }
            curclass = newclass;
            arr[ix] = newch;
            ix++;
        }
        jx++;
    }

    return pos;
}

function glk_buffer_canon_decompose_uni(arr, numchars) {
    var arrlen = arr.length;
    var len;

    len = gli_buffer_canon_decompose_uni(arr, numchars);

    /* in case we stretched the array */
    arr.length = arrlen;

    return len;
}

function glk_buffer_canon_normalize_uni(arr, numchars) {
    var arrlen = arr.length;
    var len;

    len = gli_buffer_canon_decompose_uni(arr, numchars);
    len = gli_buffer_canon_compose_uni(arr, len);

    /* in case we stretched the array */
    arr.length = arrlen;

    return len;
}

function glk_put_char_uni(ch) {
    gli_put_char(gli_currentstr, ch);
}

function glk_put_string_uni(val) {
    glk_put_jstring_stream(gli_currentstr, val, false);
}

function glk_put_buffer_uni(arr) {
    gli_put_array(gli_currentstr, arr, false);
}

function glk_put_char_stream_uni(str, ch) {
    gli_put_char(str, ch);
}

function glk_put_string_stream_uni(str, val) {
    glk_put_jstring_stream(str, val, false);
}

function glk_put_buffer_stream_uni(str, arr) {
    gli_put_array(str, arr, false);
}

function glk_get_char_stream_uni(str) {
    if (!str)
        throw('glk_get_char_stream_uni: invalid stream');
    return gli_get_char(str, true);
}

function glk_get_buffer_stream_uni(str, buf) {
    if (!str)
        throw('glk_get_buffer_stream_uni: invalid stream');
    return gli_get_buffer(str, buf, true);
}

function glk_get_line_stream_uni(str, buf) {
    if (!str)
        throw('glk_get_line_stream_uni: invalid stream');
    return gli_get_line(str, buf, true);
}

function glk_stream_open_memory_uni(buf, fmode, rock) {
    let str;

    if (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read 
        && fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write 
        && fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_ReadWrite) 
        throw('glk_stream_open_memory: illegal filemode');

    str = gli_new_stream(strtype_Memory, 
        (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write), 
        (fmode != _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Read), 
        rock);
    str.unicode = true;

    if (buf) {
        str.buf = buf;
        str.buflen = buf.length;
        str.bufpos = 0;
        if (fmode == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.filemode_Write)
            str.bufeof = 0;
        else
            str.bufeof = str.buflen;
        if (window.GiDispa)
            GiDispa.retain_array(buf);
    }

    return str;
}

function glk_request_char_event_uni(win) {
    if (!win)
        throw('glk_request_char_event: invalid window');
    if (win.char_request || win.line_request)
        throw('glk_request_char_event: window already has keyboard request');

    win.char_request = true;
    win.char_request_uni = true;
    win.input_generation = event_generation;

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();
    _haven_input__WEBPACK_IMPORTED_MODULE_1__.keypress.wait();
}

function glk_request_line_event_uni(win, buf, initlen) {
    if (!win)
        throw('glk_request_line_event: invalid window');
    if (win.char_request || win.line_request)
        throw('glk_request_line_event: window already has keyboard request');

    if (initlen) {
        /* This will be copied into the next update. */
        var ls = buf.slice(0, initlen);
        if (!current_partial_outputs)
            current_partial_outputs = {};
        current_partial_outputs[win.disprock] = UniArrayToString(ls);
    }
    win.line_request = true;
    win.line_request_uni = true;
    if (win.type == _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const.wintype_TextBuffer)
        win.request_echo_line_input = win.echo_line_input;
    else
        win.request_echo_line_input = true;
    win.input_generation = event_generation;
    win.linebuf = buf;
    if (window.GiDispa)
        GiDispa.retain_array(buf);

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();
    (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.expectInput)();
}

function glk_current_time(timevalref) {
    var now = new Date().getTime();
    var usec;

    timevalref.set_field(0, Math.floor(now / 4294967296000));
    timevalref.set_field(1, Math.floor(now / 1000) >>>0);
    usec = Math.floor((now % 1000) * 1000);
    if (usec < 0)
        usec = 1000000 + usec;
    timevalref.set_field(2, usec);
}

function glk_current_simple_time(factor) {
    var now = new Date().getTime();
    return Math.floor(now / (factor * 1000));
}

function glk_time_to_date_utc(timevalref, dateref) {
    var now = timevalref.get_field(0) * 4294967296000 + timevalref.get_field(1) * 1000 + timevalref.get_field(2) / 1000;
    var obj = new Date(now);
    
    dateref.set_field(0, obj.getUTCFullYear())
    dateref.set_field(1, 1+obj.getUTCMonth())
    dateref.set_field(2, obj.getUTCDate())
    dateref.set_field(3, obj.getUTCDay())
    dateref.set_field(4, obj.getUTCHours())
    dateref.set_field(5, obj.getUTCMinutes())
    dateref.set_field(6, obj.getUTCSeconds())
    dateref.set_field(7, 1000*obj.getUTCMilliseconds())
}

function glk_time_to_date_local(timevalref, dateref) {
    var now = timevalref.get_field(0) * 4294967296000 + timevalref.get_field(1) * 1000 + timevalref.get_field(2) / 1000;
    var obj = new Date(now);
    
    dateref.set_field(0, obj.getFullYear())
    dateref.set_field(1, 1+obj.getMonth())
    dateref.set_field(2, obj.getDate())
    dateref.set_field(3, obj.getDay())
    dateref.set_field(4, obj.getHours())
    dateref.set_field(5, obj.getMinutes())
    dateref.set_field(6, obj.getSeconds())
    dateref.set_field(7, 1000*obj.getMilliseconds())
}

function glk_simple_time_to_date_utc(time, factor, dateref) {
    var now = time*(1000*factor);
    var obj = new Date(now);
    
    dateref.set_field(0, obj.getUTCFullYear())
    dateref.set_field(1, 1+obj.getUTCMonth())
    dateref.set_field(2, obj.getUTCDate())
    dateref.set_field(3, obj.getUTCDay())
    dateref.set_field(4, obj.getUTCHours())
    dateref.set_field(5, obj.getUTCMinutes())
    dateref.set_field(6, obj.getUTCSeconds())
    dateref.set_field(7, 1000*obj.getUTCMilliseconds())
}

function glk_simple_time_to_date_local(time, factor, dateref) {
    var now = time*(1000*factor);
    var obj = new Date(now);
    
    dateref.set_field(0, obj.getFullYear())
    dateref.set_field(1, 1+obj.getMonth())
    dateref.set_field(2, obj.getDate())
    dateref.set_field(3, obj.getDay())
    dateref.set_field(4, obj.getHours())
    dateref.set_field(5, obj.getMinutes())
    dateref.set_field(6, obj.getSeconds())
    dateref.set_field(7, 1000*obj.getMilliseconds())
}

function glk_date_to_time_utc(dateref, timevalref) {
    var obj = new Date(0);

    obj.setUTCFullYear(dateref.get_field(0));
    obj.setUTCMonth(dateref.get_field(1)-1);
    obj.setUTCDate(dateref.get_field(2));
    obj.setUTCHours(dateref.get_field(4));
    obj.setUTCMinutes(dateref.get_field(5));
    obj.setUTCSeconds(dateref.get_field(6));
    obj.setUTCMilliseconds(dateref.get_field(7)/1000);

    var now = obj.getTime();
    var usec;

    timevalref.set_field(0, Math.floor(now / 4294967296000));
    timevalref.set_field(1, Math.floor(now / 1000) >>>0);
    usec = Math.floor((now % 1000) * 1000);
    if (usec < 0)
        usec = 1000000 + usec;
    timevalref.set_field(2, usec);
}

function glk_date_to_time_local(dateref, timevalref) {
    var obj = new Date(
        dateref.get_field(0), dateref.get_field(1)-1, dateref.get_field(2),
        dateref.get_field(4), dateref.get_field(5), dateref.get_field(6), 
        dateref.get_field(7)/1000);

    var now = obj.getTime();
    var usec;

    timevalref.set_field(0, Math.floor(now / 4294967296000));
    timevalref.set_field(1, Math.floor(now / 1000) >>>0);
    usec = Math.floor((now % 1000) * 1000);
    if (usec < 0)
        usec = 1000000 + usec;
    timevalref.set_field(2, usec);
}

function glk_date_to_simple_time_utc(dateref, factor) {
    var obj = new Date(0);

    obj.setUTCFullYear(dateref.get_field(0));
    obj.setUTCMonth(dateref.get_field(1)-1);
    obj.setUTCDate(dateref.get_field(2));
    obj.setUTCHours(dateref.get_field(4));
    obj.setUTCMinutes(dateref.get_field(5));
    obj.setUTCSeconds(dateref.get_field(6));
    obj.setUTCMilliseconds(dateref.get_field(7)/1000);

    var now = obj.getTime();
    return Math.floor(now / (factor * 1000));
}

function glk_date_to_simple_time_local(dateref, factor) {
    var obj = new Date(
        dateref.get_field(0), dateref.get_field(1)-1, dateref.get_field(2),
        dateref.get_field(4), dateref.get_field(5), dateref.get_field(6), 
        dateref.get_field(7)/1000);

    var now = obj.getTime();
    return Math.floor(now / (factor * 1000));
}


const GLK = {
    version: '2.2.4', /* GlkOte/GlkApi version */
    init,
    update,
    // save_allstate: save_allstate,
    // restore_allstate: restore_allstate,
    fatal_error,

    fatal_error,
    byte_array_to_string : ByteArrayToString,
    uni_array_to_string : UniArrayToString,
    Const: _glkConstants__WEBPACK_IMPORTED_MODULE_8__.Const,
    RefBox,
    RefStruct,
    DidNotReturn,
    call_may_not_return,

    glk_put_jstring,
    glk_put_jstring_stream,

    glk_exit,
    glk_tick,
    glk_gestalt,
    glk_gestalt_ext,
    glk_window_iterate,
    glk_window_get_rock,
    glk_window_get_root,
    glk_window_open,
    // glk_window_close : glk_window_close,
    // glk_window_get_size : glk_window_get_size,
    // glk_window_set_arrangement : glk_window_set_arrangement,
    // glk_window_get_arrangement : glk_window_get_arrangement,
    glk_window_get_type,
    glk_window_get_parent,
    // glk_window_clear : glk_window_clear,
    // glk_window_move_cursor : glk_window_move_cursor,
    glk_window_get_stream,
    glk_window_set_echo_stream,
    glk_window_get_echo_stream,
    glk_set_window,
    glk_window_get_sibling,
    glk_stream_iterate,
    glk_stream_get_rock,
    glk_stream_open_file,
    glk_stream_open_memory,
    glk_stream_close,
    glk_stream_set_position,
    glk_stream_get_position,
    glk_stream_set_current,
    glk_stream_get_current,
    // glk_fileref_create_temp : glk_fileref_create_temp,
    glk_fileref_create_by_name,
    glk_fileref_create_by_prompt,
    glk_fileref_destroy,
    glk_fileref_iterate,
    glk_fileref_get_rock,
    // glk_fileref_delete_file : glk_fileref_delete_file,
    glk_fileref_does_file_exist,
    glk_fileref_create_from_fileref,
    glk_put_char,
    glk_put_char_stream,
    glk_put_string,
    glk_put_string_stream,
    glk_put_buffer,
    glk_put_buffer_stream,
    glk_set_style,
    glk_set_style_stream,
    glk_get_char_stream,
    glk_get_line_stream,
    glk_get_buffer_stream,
    glk_char_to_lower,
    glk_char_to_upper,
    glk_stylehint_set: DO_NOTHING,
    glk_stylehint_clear: DO_NOTHING,
    // glk_style_distinguish : glk_style_distinguish,
    // glk_style_measure : glk_style_measure,
    glk_select,
    // glk_select_poll : glk_select_poll,
    glk_request_line_event,
    // glk_cancel_line_event : glk_cancel_line_event,
    glk_request_char_event,
    glk_cancel_char_event,
    // glk_request_mouse_event : glk_request_mouse_event,
    // glk_cancel_mouse_event : glk_cancel_mouse_event,
    // glk_request_timer_events : glk_request_timer_events,
    // glk_image_get_info : glk_image_get_info,
    // glk_image_draw : glk_image_draw,
    // glk_image_draw_scaled : glk_image_draw_scaled,
    // glk_window_flow_break : glk_window_flow_break,
    // glk_window_erase_rect : glk_window_erase_rect,
    // glk_window_fill_rect : glk_window_fill_rect,
    // glk_window_set_background_color : glk_window_set_background_color,
    glk_schannel_iterate: DO_NOTHING,   // JustEnoughGlulx.h uses this before checking for sound support
    // glk_schannel_get_rock : glk_schannel_get_rock,
    // glk_schannel_create : glk_schannel_create,
    // glk_schannel_destroy : glk_schannel_destroy,
    // glk_schannel_play : glk_schannel_play,
    // glk_schannel_play_ext : glk_schannel_play_ext,
    // glk_schannel_stop : glk_schannel_stop,
    // glk_schannel_set_volume : glk_schannel_set_volume,
    // glk_schannel_create_ext : glk_schannel_create_ext,
    // glk_schannel_play_multi : glk_schannel_play_multi,
    // glk_schannel_pause : glk_schannel_pause,
    // glk_schannel_unpause : glk_schannel_unpause,
    // glk_schannel_set_volume_ext : glk_schannel_set_volume_ext,
    // glk_sound_load_hint : glk_sound_load_hint,
    // glk_set_hyperlink : glk_set_hyperlink,
    // glk_set_hyperlink_stream : glk_set_hyperlink_stream,
    // glk_request_hyperlink_event : glk_request_hyperlink_event,
    // glk_cancel_hyperlink_event : glk_cancel_hyperlink_event,
    glk_buffer_to_lower_case_uni,
    glk_buffer_to_upper_case_uni,
    glk_buffer_to_title_case_uni,
    glk_buffer_canon_decompose_uni,
    glk_buffer_canon_normalize_uni,
    glk_put_char_uni,
    glk_put_string_uni,
    glk_put_buffer_uni,
    glk_put_char_stream_uni,
    glk_put_string_stream_uni,
    glk_put_buffer_stream_uni,
    glk_get_char_stream_uni,
    glk_get_buffer_stream_uni,
    glk_get_line_stream_uni,
    // glk_stream_open_file_uni : glk_stream_open_file_uni,
    glk_stream_open_memory_uni,
    glk_request_char_event_uni,
    glk_request_line_event_uni,
    glk_set_echo_line_event,
    glk_set_terminators_line_event,
    glk_current_time,
    glk_current_simple_time,
    glk_time_to_date_utc,
    glk_time_to_date_local,
    glk_simple_time_to_date_utc,
    glk_simple_time_to_date_local,
    glk_date_to_time_utc,
    glk_date_to_time_local,
    glk_date_to_simple_time_utc,
    glk_date_to_simple_time_local,
    // glk_stream_open_resource : glk_stream_open_resource,
    // glk_stream_open_resource_uni : glk_stream_open_resource_uni


    // HAVEN
    sendChar,
    sendLine
};

window.Glk = new Proxy( GLK, {
    get: function( obj, prop ) {
        return prop in obj ?
            obj[prop] :
            function() {
                console.log( 'GLK: ' + prop + ' called' );
            };
    }
});


/***/ }),

/***/ "./src/vorple/glkConstants.js":
/*!************************************!*\
  !*** ./src/vorple/glkConstants.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Const": () => (/* binding */ Const),
/* harmony export */   "KeystrokeNameMap": () => (/* binding */ KeystrokeNameMap),
/* harmony export */   "StyleNameMap": () => (/* binding */ StyleNameMap),
/* harmony export */   "FileTypeMap": () => (/* binding */ FileTypeMap),
/* harmony export */   "unicode_upper_table": () => (/* binding */ unicode_upper_table),
/* harmony export */   "unicode_lower_table": () => (/* binding */ unicode_lower_table),
/* harmony export */   "unicode_title_table": () => (/* binding */ unicode_title_table),
/* harmony export */   "unicode_decomp_table": () => (/* binding */ unicode_decomp_table),
/* harmony export */   "unicode_combin_table": () => (/* binding */ unicode_combin_table),
/* harmony export */   "unicode_compo_table": () => (/* binding */ unicode_compo_table)
/* harmony export */ });

/* All the numeric constants used by the Glk interface. We push these into
   an object, for tidiness. */

var Const = {
    gestalt_Version : 0,
    gestalt_CharInput : 1,
    gestalt_LineInput : 2,
    gestalt_CharOutput : 3,
      gestalt_CharOutput_CannotPrint : 0,
      gestalt_CharOutput_ApproxPrint : 1,
      gestalt_CharOutput_ExactPrint : 2,
    gestalt_MouseInput : 4,
    gestalt_Timer : 5,
    gestalt_Graphics : 6,
    gestalt_DrawImage : 7,
    gestalt_Sound : 8,
    gestalt_SoundVolume : 9,
    gestalt_SoundNotify : 10,
    gestalt_Hyperlinks : 11,
    gestalt_HyperlinkInput : 12,
    gestalt_SoundMusic : 13,
    gestalt_GraphicsTransparency : 14,
    gestalt_Unicode : 15,
    gestalt_UnicodeNorm : 16,
    gestalt_LineInputEcho : 17,
    gestalt_LineTerminators : 18,
    gestalt_LineTerminatorKey : 19,
    gestalt_DateTime : 20,
    gestalt_Sound2 : 21,
    gestalt_ResourceStream : 22,
    gestalt_GraphicsCharInput : 23,

    keycode_Unknown  : 0xffffffff,
    keycode_Left     : 0xfffffffe,
    keycode_Right    : 0xfffffffd,
    keycode_Up       : 0xfffffffc,
    keycode_Down     : 0xfffffffb,
    keycode_Return   : 0xfffffffa,
    keycode_Delete   : 0xfffffff9,
    keycode_Escape   : 0xfffffff8,
    keycode_Tab      : 0xfffffff7,
    keycode_PageUp   : 0xfffffff6,
    keycode_PageDown : 0xfffffff5,
    keycode_Home     : 0xfffffff4,
    keycode_End      : 0xfffffff3,
    keycode_Func1    : 0xffffffef,
    keycode_Func2    : 0xffffffee,
    keycode_Func3    : 0xffffffed,
    keycode_Func4    : 0xffffffec,
    keycode_Func5    : 0xffffffeb,
    keycode_Func6    : 0xffffffea,
    keycode_Func7    : 0xffffffe9,
    keycode_Func8    : 0xffffffe8,
    keycode_Func9    : 0xffffffe7,
    keycode_Func10   : 0xffffffe6,
    keycode_Func11   : 0xffffffe5,
    keycode_Func12   : 0xffffffe4,
    /* The last keycode is always (0x100000000 - keycode_MAXVAL) */
    keycode_MAXVAL   : 28,

    evtype_None : 0,
    evtype_Timer : 1,
    evtype_CharInput : 2,
    evtype_LineInput : 3,
    evtype_MouseInput : 4,
    evtype_Arrange : 5,
    evtype_Redraw : 6,
    evtype_SoundNotify : 7,
    evtype_Hyperlink : 8,
    evtype_VolumeNotify : 9,

    style_Normal : 0,
    style_Emphasized : 1,
    style_Preformatted : 2,
    style_Header : 3,
    style_Subheader : 4,
    style_Alert : 5,
    style_Note : 6,
    style_BlockQuote : 7,
    style_Input : 8,
    style_User1 : 9,
    style_User2 : 10,
    style_NUMSTYLES : 11,

    wintype_AllTypes : 0,
    wintype_Pair : 1,
    wintype_Blank : 2,
    wintype_TextBuffer : 3,
    wintype_TextGrid : 4,
    wintype_Graphics : 5,

    winmethod_Left  : 0x00,
    winmethod_Right : 0x01,
    winmethod_Above : 0x02,
    winmethod_Below : 0x03,
    winmethod_DirMask : 0x0f,

    winmethod_Fixed : 0x10,
    winmethod_Proportional : 0x20,
    winmethod_DivisionMask : 0xf0,

    winmethod_Border : 0x000,
    winmethod_NoBorder : 0x100,
    winmethod_BorderMask : 0x100,

    fileusage_Data : 0x00,
    fileusage_SavedGame : 0x01,
    fileusage_Transcript : 0x02,
    fileusage_InputRecord : 0x03,
    fileusage_TypeMask : 0x0f,

    fileusage_TextMode   : 0x100,
    fileusage_BinaryMode : 0x000,

    filemode_Write : 0x01,
    filemode_Read : 0x02,
    filemode_ReadWrite : 0x03,
    filemode_WriteAppend : 0x05,

    seekmode_Start : 0,
    seekmode_Current : 1,
    seekmode_End : 2,

    stylehint_Indentation : 0,
    stylehint_ParaIndentation : 1,
    stylehint_Justification : 2,
    stylehint_Size : 3,
    stylehint_Weight : 4,
    stylehint_Oblique : 5,
    stylehint_Proportional : 6,
    stylehint_TextColor : 7,
    stylehint_BackColor : 8,
    stylehint_ReverseColor : 9,
    stylehint_NUMHINTS : 10,

      stylehint_just_LeftFlush : 0,
      stylehint_just_LeftRight : 1,
      stylehint_just_Centered : 2,
      stylehint_just_RightFlush : 3,

    imagealign_InlineUp : 1,
    imagealign_InlineDown : 2,
    imagealign_InlineCenter : 3,
    imagealign_MarginLeft : 4,
    imagealign_MarginRight : 5

};

var KeystrokeNameMap = {
    /* The key values are taken from GlkOte's "char" event. A couple of them
       are Javascript keywords, so they're in quotes, but that doesn't affect
       the final structure. */
    left : Const.keycode_Left,
    right : Const.keycode_Right,
    up : Const.keycode_Up,
    down : Const.keycode_Down,
    'return' : Const.keycode_Return,
    'delete' : Const.keycode_Delete,
    escape : Const.keycode_Escape,
    tab : Const.keycode_Tab,
    pageup : Const.keycode_PageUp,
    pagedown : Const.keycode_PageDown,
    home : Const.keycode_Home,
    end : Const.keycode_End,
    func1 : Const.keycode_Func1,
    func2 : Const.keycode_Func2,
    func3 : Const.keycode_Func3,
    func4 : Const.keycode_Func4,
    func5 : Const.keycode_Func5,
    func6 : Const.keycode_Func6,
    func7 : Const.keycode_Func7,
    func8 : Const.keycode_Func8,
    func9 : Const.keycode_Func9,
    func10 : Const.keycode_Func10,
    func11 : Const.keycode_Func11,
    func12 : Const.keycode_Func12
};

var StyleNameMap = {
    0 : 'normal',
    1 : 'emphasized',
    2 : 'preformatted',
    3 : 'header',
    4 : 'subheader',
    5 : 'alert',
    6 : 'note',
    7 : 'blockquote',
    8 : 'input',
    9 : 'user1',
    10 : 'user2'
};

var FileTypeMap = {
    0: 'data',
    1: 'save',
    2: 'transcript',
    3: 'command'
};

/* These tables were generated by casemap.py. */
/* Derived from Unicode data files, Unicode version 4.0.1. */

/* list all the special cases in unicode_upper_table */
var unicode_upper_table = {
181: 924, 223: [ 83,83 ], 255: 376, 305: 73, 329: [ 700,78 ],
383: 83, 405: 502, 414: 544, 447: 503, 454: 452,
457: 455, 460: 458, 477: 398, 496: [ 74,780 ], 499: 497,
595: 385, 596: 390, 598: 393, 599: 394, 601: 399,
603: 400, 608: 403, 611: 404, 616: 407, 617: 406,
623: 412, 626: 413, 629: 415, 640: 422, 643: 425,
648: 430, 650: 433, 651: 434, 658: 439, 837: 921,
912: [ 921,776,769 ], 940: 902, 941: 904, 942: 905, 943: 906,
944: [ 933,776,769 ], 962: 931, 972: 908, 973: 910, 974: 911,
976: 914, 977: 920, 981: 934, 982: 928, 1008: 922,
1010: 1017, 1013: 917, 1415: [ 1333,1362 ], 7830: [ 72,817 ], 7831: [ 84,776 ],
7832: [ 87,778 ], 7833: [ 89,778 ], 7834: [ 65,702 ], 7835: 7776, 8016: [ 933,787 ],
8018: [ 933,787,768 ], 8020: [ 933,787,769 ], 8022: [ 933,787,834 ], 8048: 8122, 8049: 8123,
8050: 8136, 8051: 8137, 8052: 8138, 8053: 8139, 8054: 8154,
8055: 8155, 8056: 8184, 8057: 8185, 8058: 8170, 8059: 8171,
8060: 8186, 8061: 8187, 8064: [ 7944,921 ], 8065: [ 7945,921 ], 8066: [ 7946,921 ],
8067: [ 7947,921 ], 8068: [ 7948,921 ], 8069: [ 7949,921 ], 8070: [ 7950,921 ], 8071: [ 7951,921 ],
8072: [ 7944,921 ], 8073: [ 7945,921 ], 8074: [ 7946,921 ], 8075: [ 7947,921 ], 8076: [ 7948,921 ],
8077: [ 7949,921 ], 8078: [ 7950,921 ], 8079: [ 7951,921 ], 8080: [ 7976,921 ], 8081: [ 7977,921 ],
8082: [ 7978,921 ], 8083: [ 7979,921 ], 8084: [ 7980,921 ], 8085: [ 7981,921 ], 8086: [ 7982,921 ],
8087: [ 7983,921 ], 8088: [ 7976,921 ], 8089: [ 7977,921 ], 8090: [ 7978,921 ], 8091: [ 7979,921 ],
8092: [ 7980,921 ], 8093: [ 7981,921 ], 8094: [ 7982,921 ], 8095: [ 7983,921 ], 8096: [ 8040,921 ],
8097: [ 8041,921 ], 8098: [ 8042,921 ], 8099: [ 8043,921 ], 8100: [ 8044,921 ], 8101: [ 8045,921 ],
8102: [ 8046,921 ], 8103: [ 8047,921 ], 8104: [ 8040,921 ], 8105: [ 8041,921 ], 8106: [ 8042,921 ],
8107: [ 8043,921 ], 8108: [ 8044,921 ], 8109: [ 8045,921 ], 8110: [ 8046,921 ], 8111: [ 8047,921 ],
8114: [ 8122,921 ], 8115: [ 913,921 ], 8116: [ 902,921 ], 8118: [ 913,834 ], 8119: [ 913,834,921 ],
8124: [ 913,921 ], 8126: 921, 8130: [ 8138,921 ], 8131: [ 919,921 ], 8132: [ 905,921 ],
8134: [ 919,834 ], 8135: [ 919,834,921 ], 8140: [ 919,921 ], 8146: [ 921,776,768 ], 8147: [ 921,776,769 ],
8150: [ 921,834 ], 8151: [ 921,776,834 ], 8162: [ 933,776,768 ], 8163: [ 933,776,769 ], 8164: [ 929,787 ],
8165: 8172, 8166: [ 933,834 ], 8167: [ 933,776,834 ], 8178: [ 8186,921 ], 8179: [ 937,921 ],
8180: [ 911,921 ], 8182: [ 937,834 ], 8183: [ 937,834,921 ], 8188: [ 937,921 ], 64256: [ 70,70 ],
64257: [ 70,73 ], 64258: [ 70,76 ], 64259: [ 70,70,73 ], 64260: [ 70,70,76 ], 64261: [ 83,84 ],
64262: [ 83,84 ], 64275: [ 1348,1350 ], 64276: [ 1348,1333 ], 64277: [ 1348,1339 ], 64278: [ 1358,1350 ],
64279: [ 1348,1341 ]
};
/* add all the regular cases to unicode_upper_table */
(function() {
  var ls, ix, val;
  var map = unicode_upper_table;
  ls = [
7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943,
7952, 7953, 7954, 7955, 7956, 7957, 7968, 7969,
7970, 7971, 7972, 7973, 7974, 7975, 7984, 7985,
7986, 7987, 7988, 7989, 7990, 7991, 8000, 8001,
8002, 8003, 8004, 8005, 8017, 8019, 8021, 8023,
8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039,
8112, 8113, 8144, 8145, 8160, 8161,
  ];
  for (ix=0; ix<54; ix++) {
    val = ls[ix];
    map[val] = val+8;
  }
  for (val=257; val<=303; val+=2) {
    map[val] = val-1;
  }
  for (val=331; val<=375; val+=2) {
    map[val] = val-1;
  }
  for (val=505; val<=543; val+=2) {
    map[val] = val-1;
  }
  for (val=1121; val<=1153; val+=2) {
    map[val] = val-1;
  }
  for (val=1163; val<=1215; val+=2) {
    map[val] = val-1;
  }
  for (val=1233; val<=1269; val+=2) {
    map[val] = val-1;
  }
  for (val=7681; val<=7829; val+=2) {
    map[val] = val-1;
  }
  for (val=7841; val<=7929; val+=2) {
    map[val] = val-1;
  }
  ls = [
307, 309, 311, 314, 316, 318, 320, 322,
324, 326, 328, 378, 380, 382, 387, 389,
392, 396, 402, 409, 417, 419, 421, 424,
429, 432, 436, 438, 441, 445, 453, 456,
459, 462, 464, 466, 468, 470, 472, 474,
476, 479, 481, 483, 485, 487, 489, 491,
493, 495, 498, 501, 547, 549, 551, 553,
555, 557, 559, 561, 563, 985, 987, 989,
991, 993, 995, 997, 999, 1001, 1003, 1005,
1007, 1016, 1019, 1218, 1220, 1222, 1224, 1226,
1228, 1230, 1273, 1281, 1283, 1285, 1287, 1289,
1291, 1293, 1295,
  ];
  for (ix=0; ix<91; ix++) {
    val = ls[ix];
    map[val] = val-1;
  }
  for (val=8560; val<=8575; val+=1) {
    map[val] = val-16;
  }
  for (val=9424; val<=9449; val+=1) {
    map[val] = val-26;
  }
  for (val=97; val<=122; val+=1) {
    map[val] = val-32;
  }
  for (val=224; val<=246; val+=1) {
    map[val] = val-32;
  }
  for (val=945; val<=961; val+=1) {
    map[val] = val-32;
  }
  for (val=1072; val<=1103; val+=1) {
    map[val] = val-32;
  }
  for (val=65345; val<=65370; val+=1) {
    map[val] = val-32;
  }
  ls = [
248, 249, 250, 251, 252, 253, 254, 963,
964, 965, 966, 967, 968, 969, 970, 971,
  ];
  for (ix=0; ix<16; ix++) {
    val = ls[ix];
    map[val] = val-32;
  }
  for (val=66600; val<=66639; val+=1) {
    map[val] = val-40;
  }
  for (val=1377; val<=1414; val+=1) {
    map[val] = val-48;
  }
  for (val=1104; val<=1119; val+=1) {
    map[val] = val-80;
  }
  map[1009] = 929;
})();

/* list all the special cases in unicode_lower_table */
var unicode_lower_table = {
304: [ 105,775 ], 376: 255, 385: 595, 390: 596, 393: 598,
394: 599, 398: 477, 399: 601, 400: 603, 403: 608,
404: 611, 406: 617, 407: 616, 412: 623, 413: 626,
415: 629, 422: 640, 425: 643, 430: 648, 433: 650,
434: 651, 439: 658, 452: 454, 455: 457, 458: 460,
497: 499, 502: 405, 503: 447, 544: 414, 902: 940,
904: 941, 905: 942, 906: 943, 908: 972, 910: 973,
911: 974, 1012: 952, 1017: 1010, 8122: 8048, 8123: 8049,
8124: 8115, 8136: 8050, 8137: 8051, 8138: 8052, 8139: 8053,
8140: 8131, 8154: 8054, 8155: 8055, 8170: 8058, 8171: 8059,
8172: 8165, 8184: 8056, 8185: 8057, 8186: 8060, 8187: 8061,
8188: 8179, 8486: 969, 8490: 107, 8491: 229
};
/* add all the regular cases to unicode_lower_table */
(function() {
  var ls, ix, val;
  var map = unicode_lower_table;
  for (val=1024; val<=1039; val+=1) {
    map[val] = val+80;
  }
  for (val=1329; val<=1366; val+=1) {
    map[val] = val+48;
  }
  for (val=66560; val<=66599; val+=1) {
    map[val] = val+40;
  }
  for (val=65; val<=90; val+=1) {
    map[val] = val+32;
  }
  for (val=192; val<=214; val+=1) {
    map[val] = val+32;
  }
  for (val=913; val<=929; val+=1) {
    map[val] = val+32;
  }
  for (val=1040; val<=1071; val+=1) {
    map[val] = val+32;
  }
  for (val=65313; val<=65338; val+=1) {
    map[val] = val+32;
  }
  ls = [
216, 217, 218, 219, 220, 221, 222, 931,
932, 933, 934, 935, 936, 937, 938, 939,
  ];
  for (ix=0; ix<16; ix++) {
    val = ls[ix];
    map[val] = val+32;
  }
  for (val=9398; val<=9423; val+=1) {
    map[val] = val+26;
  }
  for (val=8544; val<=8559; val+=1) {
    map[val] = val+16;
  }
  for (val=256; val<=302; val+=2) {
    map[val] = val+1;
  }
  for (val=330; val<=374; val+=2) {
    map[val] = val+1;
  }
  for (val=504; val<=542; val+=2) {
    map[val] = val+1;
  }
  for (val=1120; val<=1152; val+=2) {
    map[val] = val+1;
  }
  for (val=1162; val<=1214; val+=2) {
    map[val] = val+1;
  }
  for (val=1232; val<=1268; val+=2) {
    map[val] = val+1;
  }
  for (val=7680; val<=7828; val+=2) {
    map[val] = val+1;
  }
  for (val=7840; val<=7928; val+=2) {
    map[val] = val+1;
  }
  ls = [
306, 308, 310, 313, 315, 317, 319, 321,
323, 325, 327, 377, 379, 381, 386, 388,
391, 395, 401, 408, 416, 418, 420, 423,
428, 431, 435, 437, 440, 444, 453, 456,
459, 461, 463, 465, 467, 469, 471, 473,
475, 478, 480, 482, 484, 486, 488, 490,
492, 494, 498, 500, 546, 548, 550, 552,
554, 556, 558, 560, 562, 984, 986, 988,
990, 992, 994, 996, 998, 1000, 1002, 1004,
1006, 1015, 1018, 1217, 1219, 1221, 1223, 1225,
1227, 1229, 1272, 1280, 1282, 1284, 1286, 1288,
1290, 1292, 1294,
  ];
  for (ix=0; ix<91; ix++) {
    val = ls[ix];
    map[val] = val+1;
  }
  ls = [
7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951,
7960, 7961, 7962, 7963, 7964, 7965, 7976, 7977,
7978, 7979, 7980, 7981, 7982, 7983, 7992, 7993,
7994, 7995, 7996, 7997, 7998, 7999, 8008, 8009,
8010, 8011, 8012, 8013, 8025, 8027, 8029, 8031,
8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047,
8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079,
8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095,
8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111,
8120, 8121, 8152, 8153, 8168, 8169,
  ];
  for (ix=0; ix<78; ix++) {
    val = ls[ix];
    map[val] = val-8;
  }
})();

/* list all the special cases in unicode_title_table */
var unicode_title_table = {
223: [ 83,115 ], 452: 453, 453: 453, 454: 453, 455: 456,
456: 456, 457: 456, 458: 459, 459: 459, 460: 459,
497: 498, 498: 498, 499: 498, 1415: [ 1333,1410 ], 8114: [ 8122,837 ],
8115: 8124, 8116: [ 902,837 ], 8119: [ 913,834,837 ], 8124: 8124, 8130: [ 8138,837 ],
8131: 8140, 8132: [ 905,837 ], 8135: [ 919,834,837 ], 8140: 8140, 8178: [ 8186,837 ],
8179: 8188, 8180: [ 911,837 ], 8183: [ 937,834,837 ], 8188: 8188, 64256: [ 70,102 ],
64257: [ 70,105 ], 64258: [ 70,108 ], 64259: [ 70,102,105 ], 64260: [ 70,102,108 ], 64261: [ 83,116 ],
64262: [ 83,116 ], 64275: [ 1348,1398 ], 64276: [ 1348,1381 ], 64277: [ 1348,1387 ], 64278: [ 1358,1398 ],
64279: [ 1348,1389 ]
};
/* add all the regular cases to unicode_title_table */
(function() {
  var ls, ix, val;
  var map = unicode_title_table;
  ls = [
8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079,
8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079,
8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095,
8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095,
8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111,
8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111,
  ];
  for (ix=0; ix<48; ix++) {
    val = ls[ix];
    map[ix+8064] = val;
  }
})();

/* list all the special cases in unicode_decomp_table */
var unicode_decomp_table = {
192: [ 65,768 ], 193: [ 65,769 ], 194: [ 65,770 ], 195: [ 65,771 ], 196: [ 65,776 ],
197: [ 65,778 ], 199: [ 67,807 ], 200: [ 69,768 ], 201: [ 69,769 ], 202: [ 69,770 ],
203: [ 69,776 ], 204: [ 73,768 ], 205: [ 73,769 ], 206: [ 73,770 ], 207: [ 73,776 ],
209: [ 78,771 ], 210: [ 79,768 ], 211: [ 79,769 ], 212: [ 79,770 ], 213: [ 79,771 ],
214: [ 79,776 ], 217: [ 85,768 ], 218: [ 85,769 ], 219: [ 85,770 ], 220: [ 85,776 ],
221: [ 89,769 ], 224: [ 97,768 ], 225: [ 97,769 ], 226: [ 97,770 ], 227: [ 97,771 ],
228: [ 97,776 ], 229: [ 97,778 ], 231: [ 99,807 ], 232: [ 101,768 ], 233: [ 101,769 ],
234: [ 101,770 ], 235: [ 101,776 ], 236: [ 105,768 ], 237: [ 105,769 ], 238: [ 105,770 ],
239: [ 105,776 ], 241: [ 110,771 ], 242: [ 111,768 ], 243: [ 111,769 ], 244: [ 111,770 ],
245: [ 111,771 ], 246: [ 111,776 ], 249: [ 117,768 ], 250: [ 117,769 ], 251: [ 117,770 ],
252: [ 117,776 ], 253: [ 121,769 ], 296: [ 73,771 ], 297: [ 105,771 ], 298: [ 73,772 ],
299: [ 105,772 ], 300: [ 73,774 ], 301: [ 105,774 ], 302: [ 73,808 ], 303: [ 105,808 ],
304: [ 73,775 ], 308: [ 74,770 ], 309: [ 106,770 ], 310: [ 75,807 ], 311: [ 107,807 ],
313: [ 76,769 ], 314: [ 108,769 ], 315: [ 76,807 ], 316: [ 108,807 ], 317: [ 76,780 ],
318: [ 108,780 ], 323: [ 78,769 ], 324: [ 110,769 ], 325: [ 78,807 ], 326: [ 110,807 ],
327: [ 78,780 ], 328: [ 110,780 ], 332: [ 79,772 ], 333: [ 111,772 ], 334: [ 79,774 ],
335: [ 111,774 ], 336: [ 79,779 ], 337: [ 111,779 ], 416: [ 79,795 ], 417: [ 111,795 ],
431: [ 85,795 ], 432: [ 117,795 ], 478: [ 65,776,772 ], 479: [ 97,776,772 ], 480: [ 65,775,772 ],
481: [ 97,775,772 ], 482: [ 198,772 ], 483: [ 230,772 ], 486: [ 71,780 ], 487: [ 103,780 ],
488: [ 75,780 ], 489: [ 107,780 ], 490: [ 79,808 ], 491: [ 111,808 ], 492: [ 79,808,772 ],
493: [ 111,808,772 ], 494: [ 439,780 ], 495: [ 658,780 ], 496: [ 106,780 ], 500: [ 71,769 ],
501: [ 103,769 ], 542: [ 72,780 ], 543: [ 104,780 ], 550: [ 65,775 ], 551: [ 97,775 ],
552: [ 69,807 ], 553: [ 101,807 ], 554: [ 79,776,772 ], 555: [ 111,776,772 ], 556: [ 79,771,772 ],
557: [ 111,771,772 ], 558: [ 79,775 ], 559: [ 111,775 ], 560: [ 79,775,772 ], 561: [ 111,775,772 ],
562: [ 89,772 ], 563: [ 121,772 ], 832: 768, 833: 769, 835: 787,
836: [ 776,769 ], 884: 697, 894: 59, 901: [ 168,769 ], 902: [ 913,769 ],
903: 183, 904: [ 917,769 ], 905: [ 919,769 ], 906: [ 921,769 ], 908: [ 927,769 ],
910: [ 933,769 ], 911: [ 937,769 ], 912: [ 953,776,769 ], 938: [ 921,776 ], 939: [ 933,776 ],
940: [ 945,769 ], 941: [ 949,769 ], 942: [ 951,769 ], 943: [ 953,769 ], 944: [ 965,776,769 ],
970: [ 953,776 ], 971: [ 965,776 ], 972: [ 959,769 ], 973: [ 965,769 ], 974: [ 969,769 ],
979: [ 978,769 ], 980: [ 978,776 ], 1024: [ 1045,768 ], 1025: [ 1045,776 ], 1027: [ 1043,769 ],
1031: [ 1030,776 ], 1036: [ 1050,769 ], 1037: [ 1048,768 ], 1038: [ 1059,774 ], 1049: [ 1048,774 ],
1081: [ 1080,774 ], 1104: [ 1077,768 ], 1105: [ 1077,776 ], 1107: [ 1075,769 ], 1111: [ 1110,776 ],
1116: [ 1082,769 ], 1117: [ 1080,768 ], 1118: [ 1091,774 ], 1142: [ 1140,783 ], 1143: [ 1141,783 ],
1217: [ 1046,774 ], 1218: [ 1078,774 ], 1232: [ 1040,774 ], 1233: [ 1072,774 ], 1234: [ 1040,776 ],
1235: [ 1072,776 ], 1238: [ 1045,774 ], 1239: [ 1077,774 ], 1242: [ 1240,776 ], 1243: [ 1241,776 ],
1244: [ 1046,776 ], 1245: [ 1078,776 ], 1246: [ 1047,776 ], 1247: [ 1079,776 ], 1250: [ 1048,772 ],
1251: [ 1080,772 ], 1252: [ 1048,776 ], 1253: [ 1080,776 ], 1254: [ 1054,776 ], 1255: [ 1086,776 ],
1258: [ 1256,776 ], 1259: [ 1257,776 ], 1260: [ 1069,776 ], 1261: [ 1101,776 ], 1262: [ 1059,772 ],
1263: [ 1091,772 ], 1264: [ 1059,776 ], 1265: [ 1091,776 ], 1266: [ 1059,779 ], 1267: [ 1091,779 ],
1268: [ 1063,776 ], 1269: [ 1095,776 ], 1272: [ 1067,776 ], 1273: [ 1099,776 ], 1570: [ 1575,1619 ],
1571: [ 1575,1620 ], 1572: [ 1608,1620 ], 1573: [ 1575,1621 ], 1574: [ 1610,1620 ], 1728: [ 1749,1620 ],
1730: [ 1729,1620 ], 1747: [ 1746,1620 ], 2345: [ 2344,2364 ], 2353: [ 2352,2364 ], 2356: [ 2355,2364 ],
2392: [ 2325,2364 ], 2393: [ 2326,2364 ], 2394: [ 2327,2364 ], 2395: [ 2332,2364 ], 2396: [ 2337,2364 ],
2397: [ 2338,2364 ], 2398: [ 2347,2364 ], 2399: [ 2351,2364 ], 2507: [ 2503,2494 ], 2508: [ 2503,2519 ],
2524: [ 2465,2492 ], 2525: [ 2466,2492 ], 2527: [ 2479,2492 ], 2611: [ 2610,2620 ], 2614: [ 2616,2620 ],
2649: [ 2582,2620 ], 2650: [ 2583,2620 ], 2651: [ 2588,2620 ], 2654: [ 2603,2620 ], 2888: [ 2887,2902 ],
2891: [ 2887,2878 ], 2892: [ 2887,2903 ], 2908: [ 2849,2876 ], 2909: [ 2850,2876 ], 2964: [ 2962,3031 ],
3018: [ 3014,3006 ], 3019: [ 3015,3006 ], 3020: [ 3014,3031 ], 3144: [ 3142,3158 ], 3264: [ 3263,3285 ],
3271: [ 3270,3285 ], 3272: [ 3270,3286 ], 3274: [ 3270,3266 ], 3275: [ 3270,3266,3285 ], 3402: [ 3398,3390 ],
3403: [ 3399,3390 ], 3404: [ 3398,3415 ], 3546: [ 3545,3530 ], 3548: [ 3545,3535 ], 3549: [ 3545,3535,3530 ],
3550: [ 3545,3551 ], 3907: [ 3906,4023 ], 3917: [ 3916,4023 ], 3922: [ 3921,4023 ], 3927: [ 3926,4023 ],
3932: [ 3931,4023 ], 3945: [ 3904,4021 ], 3955: [ 3953,3954 ], 3957: [ 3953,3956 ], 3958: [ 4018,3968 ],
3960: [ 4019,3968 ], 3969: [ 3953,3968 ], 3987: [ 3986,4023 ], 3997: [ 3996,4023 ], 4002: [ 4001,4023 ],
4007: [ 4006,4023 ], 4012: [ 4011,4023 ], 4025: [ 3984,4021 ], 4134: [ 4133,4142 ], 7835: [ 383,775 ],
7960: [ 917,787 ], 7961: [ 917,788 ], 7962: [ 917,787,768 ], 7963: [ 917,788,768 ], 7964: [ 917,787,769 ],
7965: [ 917,788,769 ], 8008: [ 927,787 ], 8009: [ 927,788 ], 8010: [ 927,787,768 ], 8011: [ 927,788,768 ],
8012: [ 927,787,769 ], 8013: [ 927,788,769 ], 8016: [ 965,787 ], 8017: [ 965,788 ], 8018: [ 965,787,768 ],
8019: [ 965,788,768 ], 8020: [ 965,787,769 ], 8021: [ 965,788,769 ], 8022: [ 965,787,834 ], 8023: [ 965,788,834 ],
8025: [ 933,788 ], 8027: [ 933,788,768 ], 8029: [ 933,788,769 ], 8118: [ 945,834 ], 8119: [ 945,834,837 ],
8120: [ 913,774 ], 8121: [ 913,772 ], 8122: [ 913,768 ], 8123: [ 913,769 ], 8124: [ 913,837 ],
8126: 953, 8129: [ 168,834 ], 8130: [ 951,768,837 ], 8131: [ 951,837 ], 8132: [ 951,769,837 ],
8134: [ 951,834 ], 8135: [ 951,834,837 ], 8136: [ 917,768 ], 8137: [ 917,769 ], 8138: [ 919,768 ],
8139: [ 919,769 ], 8140: [ 919,837 ], 8141: [ 8127,768 ], 8142: [ 8127,769 ], 8143: [ 8127,834 ],
8144: [ 953,774 ], 8145: [ 953,772 ], 8146: [ 953,776,768 ], 8147: [ 953,776,769 ], 8150: [ 953,834 ],
8151: [ 953,776,834 ], 8152: [ 921,774 ], 8153: [ 921,772 ], 8154: [ 921,768 ], 8155: [ 921,769 ],
8178: [ 969,768,837 ], 8179: [ 969,837 ], 8180: [ 969,769,837 ], 8182: [ 969,834 ], 8183: [ 969,834,837 ],
8184: [ 927,768 ], 8185: [ 927,769 ], 8186: [ 937,768 ], 8187: [ 937,769 ], 8188: [ 937,837 ],
8189: 180, 8192: 8194, 8193: 8195, 8486: 937, 8490: 75,
8491: [ 65,778 ], 8602: [ 8592,824 ], 8603: [ 8594,824 ], 8622: [ 8596,824 ], 8653: [ 8656,824 ],
8654: [ 8660,824 ], 8655: [ 8658,824 ], 8708: [ 8707,824 ], 8713: [ 8712,824 ], 8716: [ 8715,824 ],
8740: [ 8739,824 ], 8742: [ 8741,824 ], 8769: [ 8764,824 ], 8772: [ 8771,824 ], 8775: [ 8773,824 ],
8777: [ 8776,824 ], 8800: [ 61,824 ], 8802: [ 8801,824 ], 8813: [ 8781,824 ], 8814: [ 60,824 ],
8815: [ 62,824 ], 8816: [ 8804,824 ], 8817: [ 8805,824 ], 8820: [ 8818,824 ], 8821: [ 8819,824 ],
8824: [ 8822,824 ], 8825: [ 8823,824 ], 8832: [ 8826,824 ], 8833: [ 8827,824 ], 8836: [ 8834,824 ],
8837: [ 8835,824 ], 8840: [ 8838,824 ], 8841: [ 8839,824 ], 8876: [ 8866,824 ], 8877: [ 8872,824 ],
8878: [ 8873,824 ], 8879: [ 8875,824 ], 8928: [ 8828,824 ], 8929: [ 8829,824 ], 8930: [ 8849,824 ],
8931: [ 8850,824 ], 8938: [ 8882,824 ], 8939: [ 8883,824 ], 8940: [ 8884,824 ], 8941: [ 8885,824 ],
9001: 12296, 9002: 12297, 10972: [ 10973,824 ], 12364: [ 12363,12441 ], 12366: [ 12365,12441 ],
12368: [ 12367,12441 ], 12370: [ 12369,12441 ], 12372: [ 12371,12441 ], 12374: [ 12373,12441 ], 12376: [ 12375,12441 ],
12378: [ 12377,12441 ], 12380: [ 12379,12441 ], 12382: [ 12381,12441 ], 12384: [ 12383,12441 ], 12386: [ 12385,12441 ],
12389: [ 12388,12441 ], 12391: [ 12390,12441 ], 12393: [ 12392,12441 ], 12400: [ 12399,12441 ], 12401: [ 12399,12442 ],
12403: [ 12402,12441 ], 12404: [ 12402,12442 ], 12406: [ 12405,12441 ], 12407: [ 12405,12442 ], 12409: [ 12408,12441 ],
12410: [ 12408,12442 ], 12412: [ 12411,12441 ], 12413: [ 12411,12442 ], 12436: [ 12358,12441 ], 12446: [ 12445,12441 ],
12460: [ 12459,12441 ], 12462: [ 12461,12441 ], 12464: [ 12463,12441 ], 12466: [ 12465,12441 ], 12468: [ 12467,12441 ],
12470: [ 12469,12441 ], 12472: [ 12471,12441 ], 12474: [ 12473,12441 ], 12476: [ 12475,12441 ], 12478: [ 12477,12441 ],
12480: [ 12479,12441 ], 12482: [ 12481,12441 ], 12485: [ 12484,12441 ], 12487: [ 12486,12441 ], 12489: [ 12488,12441 ],
12496: [ 12495,12441 ], 12497: [ 12495,12442 ], 12499: [ 12498,12441 ], 12500: [ 12498,12442 ], 12502: [ 12501,12441 ],
12503: [ 12501,12442 ], 12505: [ 12504,12441 ], 12506: [ 12504,12442 ], 12508: [ 12507,12441 ], 12509: [ 12507,12442 ],
12532: [ 12454,12441 ], 12535: [ 12527,12441 ], 12536: [ 12528,12441 ], 12537: [ 12529,12441 ], 12538: [ 12530,12441 ],
12542: [ 12541,12441 ], 64016: 22618, 64018: 26228, 64021: 20958, 64022: 29482,
64023: 30410, 64024: 31036, 64025: 31070, 64026: 31077, 64027: 31119,
64028: 38742, 64029: 31934, 64030: 32701, 64032: 34322, 64034: 35576,
64037: 36920, 64038: 37117, 64042: 39151, 64043: 39164, 64044: 39208,
64045: 40372, 64285: [ 1497,1460 ], 64287: [ 1522,1463 ], 64298: [ 1513,1473 ], 64299: [ 1513,1474 ],
64300: [ 1513,1468,1473 ], 64301: [ 1513,1468,1474 ], 64302: [ 1488,1463 ], 64303: [ 1488,1464 ], 64304: [ 1488,1468 ],
64305: [ 1489,1468 ], 64306: [ 1490,1468 ], 64307: [ 1491,1468 ], 64308: [ 1492,1468 ], 64309: [ 1493,1468 ],
64310: [ 1494,1468 ], 64312: [ 1496,1468 ], 64313: [ 1497,1468 ], 64314: [ 1498,1468 ], 64315: [ 1499,1468 ],
64316: [ 1500,1468 ], 64318: [ 1502,1468 ], 64320: [ 1504,1468 ], 64321: [ 1505,1468 ], 64323: [ 1507,1468 ],
64324: [ 1508,1468 ], 64326: [ 1510,1468 ], 64327: [ 1511,1468 ], 64328: [ 1512,1468 ], 64329: [ 1513,1468 ],
64330: [ 1514,1468 ], 64331: [ 1493,1465 ], 64332: [ 1489,1471 ], 64333: [ 1499,1471 ], 64334: [ 1508,1471 ],
119134: [ 119127,119141 ], 119135: [ 119128,119141 ], 119136: [ 119128,119141,119150 ], 119137: [ 119128,119141,119151 ], 119138: [ 119128,119141,119152 ],
119139: [ 119128,119141,119153 ], 119140: [ 119128,119141,119154 ], 119227: [ 119225,119141 ], 119228: [ 119226,119141 ], 119229: [ 119225,119141,119150 ],
119230: [ 119226,119141,119150 ], 119231: [ 119225,119141,119151 ], 119232: [ 119226,119141,119151 ]
};
/* add all the regular cases to unicode_decomp_table */
(function() {
  var ls, ix, val;
  var map = unicode_decomp_table;
  ls = [
[121,776], [65,772], [97,772], [65,774], [97,774], [65,808], [97,808], [67,769],
[99,769], [67,770], [99,770], [67,775], [99,775], [67,780], [99,780], [68,780],
[100,780],
  ];
  for (ix=0; ix<17; ix++) {
    val = ls[ix];
    map[ix+255] = val;
  }
  ls = [
[69,772], [101,772], [69,774], [101,774], [69,775], [101,775], [69,808], [101,808],
[69,780], [101,780], [71,770], [103,770], [71,774], [103,774], [71,775], [103,775],
[71,807], [103,807], [72,770], [104,770],
  ];
  for (ix=0; ix<20; ix++) {
    val = ls[ix];
    map[ix+274] = val;
  }
  ls = [
[82,769], [114,769], [82,807], [114,807], [82,780], [114,780], [83,769], [115,769],
[83,770], [115,770], [83,807], [115,807], [83,780], [115,780], [84,807], [116,807],
[84,780], [116,780],
  ];
  for (ix=0; ix<18; ix++) {
    val = ls[ix];
    map[ix+340] = val;
  }
  ls = [
[85,771], [117,771], [85,772], [117,772], [85,774], [117,774], [85,778], [117,778],
[85,779], [117,779], [85,808], [117,808], [87,770], [119,770], [89,770], [121,770],
[89,776], [90,769], [122,769], [90,775], [122,775], [90,780], [122,780],
  ];
  for (ix=0; ix<23; ix++) {
    val = ls[ix];
    map[ix+360] = val;
  }
  ls = [
[65,780], [97,780], [73,780], [105,780], [79,780], [111,780], [85,780], [117,780],
[85,776,772], [117,776,772], [85,776,769], [117,776,769], [85,776,780], [117,776,780], [85,776,768], [117,776,768],
  ];
  for (ix=0; ix<16; ix++) {
    val = ls[ix];
    map[ix+461] = val;
  }
  ls = [
[78,768], [110,768], [65,778,769], [97,778,769], [198,769], [230,769], [216,769], [248,769],
[65,783], [97,783], [65,785], [97,785], [69,783], [101,783], [69,785], [101,785],
[73,783], [105,783], [73,785], [105,785], [79,783], [111,783], [79,785], [111,785],
[82,783], [114,783], [82,785], [114,785], [85,783], [117,783], [85,785], [117,785],
[83,806], [115,806], [84,806], [116,806],
  ];
  for (ix=0; ix<36; ix++) {
    val = ls[ix];
    map[ix+504] = val;
  }
  ls = [
[65,805], [97,805], [66,775], [98,775], [66,803], [98,803], [66,817], [98,817],
[67,807,769], [99,807,769], [68,775], [100,775], [68,803], [100,803], [68,817], [100,817],
[68,807], [100,807], [68,813], [100,813], [69,772,768], [101,772,768], [69,772,769], [101,772,769],
[69,813], [101,813], [69,816], [101,816], [69,807,774], [101,807,774], [70,775], [102,775],
[71,772], [103,772], [72,775], [104,775], [72,803], [104,803], [72,776], [104,776],
[72,807], [104,807], [72,814], [104,814], [73,816], [105,816], [73,776,769], [105,776,769],
[75,769], [107,769], [75,803], [107,803], [75,817], [107,817], [76,803], [108,803],
[76,803,772], [108,803,772], [76,817], [108,817], [76,813], [108,813], [77,769], [109,769],
[77,775], [109,775], [77,803], [109,803], [78,775], [110,775], [78,803], [110,803],
[78,817], [110,817], [78,813], [110,813], [79,771,769], [111,771,769], [79,771,776], [111,771,776],
[79,772,768], [111,772,768], [79,772,769], [111,772,769], [80,769], [112,769], [80,775], [112,775],
[82,775], [114,775], [82,803], [114,803], [82,803,772], [114,803,772], [82,817], [114,817],
[83,775], [115,775], [83,803], [115,803], [83,769,775], [115,769,775], [83,780,775], [115,780,775],
[83,803,775], [115,803,775], [84,775], [116,775], [84,803], [116,803], [84,817], [116,817],
[84,813], [116,813], [85,804], [117,804], [85,816], [117,816], [85,813], [117,813],
[85,771,769], [117,771,769], [85,772,776], [117,772,776], [86,771], [118,771], [86,803], [118,803],
[87,768], [119,768], [87,769], [119,769], [87,776], [119,776], [87,775], [119,775],
[87,803], [119,803], [88,775], [120,775], [88,776], [120,776], [89,775], [121,775],
[90,770], [122,770], [90,803], [122,803], [90,817], [122,817], [104,817], [116,776],
[119,778], [121,778],
  ];
  for (ix=0; ix<154; ix++) {
    val = ls[ix];
    map[ix+7680] = val;
  }
  ls = [
[65,803], [97,803], [65,777], [97,777], [65,770,769], [97,770,769], [65,770,768], [97,770,768],
[65,770,777], [97,770,777], [65,770,771], [97,770,771], [65,803,770], [97,803,770], [65,774,769], [97,774,769],
[65,774,768], [97,774,768], [65,774,777], [97,774,777], [65,774,771], [97,774,771], [65,803,774], [97,803,774],
[69,803], [101,803], [69,777], [101,777], [69,771], [101,771], [69,770,769], [101,770,769],
[69,770,768], [101,770,768], [69,770,777], [101,770,777], [69,770,771], [101,770,771], [69,803,770], [101,803,770],
[73,777], [105,777], [73,803], [105,803], [79,803], [111,803], [79,777], [111,777],
[79,770,769], [111,770,769], [79,770,768], [111,770,768], [79,770,777], [111,770,777], [79,770,771], [111,770,771],
[79,803,770], [111,803,770], [79,795,769], [111,795,769], [79,795,768], [111,795,768], [79,795,777], [111,795,777],
[79,795,771], [111,795,771], [79,795,803], [111,795,803], [85,803], [117,803], [85,777], [117,777],
[85,795,769], [117,795,769], [85,795,768], [117,795,768], [85,795,777], [117,795,777], [85,795,771], [117,795,771],
[85,795,803], [117,795,803], [89,768], [121,768], [89,803], [121,803], [89,777], [121,777],
[89,771], [121,771],
  ];
  for (ix=0; ix<90; ix++) {
    val = ls[ix];
    map[ix+7840] = val;
  }
  ls = [
[945,787], [945,788], [945,787,768], [945,788,768], [945,787,769], [945,788,769], [945,787,834], [945,788,834],
[913,787], [913,788], [913,787,768], [913,788,768], [913,787,769], [913,788,769], [913,787,834], [913,788,834],
[949,787], [949,788], [949,787,768], [949,788,768], [949,787,769], [949,788,769],
  ];
  for (ix=0; ix<22; ix++) {
    val = ls[ix];
    map[ix+7936] = val;
  }
  ls = [
[951,787], [951,788], [951,787,768], [951,788,768], [951,787,769], [951,788,769], [951,787,834], [951,788,834],
[919,787], [919,788], [919,787,768], [919,788,768], [919,787,769], [919,788,769], [919,787,834], [919,788,834],
[953,787], [953,788], [953,787,768], [953,788,768], [953,787,769], [953,788,769], [953,787,834], [953,788,834],
[921,787], [921,788], [921,787,768], [921,788,768], [921,787,769], [921,788,769], [921,787,834], [921,788,834],
[959,787], [959,788], [959,787,768], [959,788,768], [959,787,769], [959,788,769],
  ];
  for (ix=0; ix<38; ix++) {
    val = ls[ix];
    map[ix+7968] = val;
  }
  ls = [
[933,788,834], [969,787], [969,788], [969,787,768], [969,788,768], [969,787,769], [969,788,769], [969,787,834],
[969,788,834], [937,787], [937,788], [937,787,768], [937,788,768], [937,787,769], [937,788,769], [937,787,834],
[937,788,834], [945,768], [945,769], [949,768], [949,769], [951,768], [951,769], [953,768],
[953,769], [959,768], [959,769], [965,768], [965,769], [969,768], [969,769],
  ];
  for (ix=0; ix<31; ix++) {
    val = ls[ix];
    map[ix+8031] = val;
  }
  ls = [
[945,787,837], [945,788,837], [945,787,768,837], [945,788,768,837], [945,787,769,837], [945,788,769,837], [945,787,834,837], [945,788,834,837],
[913,787,837], [913,788,837], [913,787,768,837], [913,788,768,837], [913,787,769,837], [913,788,769,837], [913,787,834,837], [913,788,834,837],
[951,787,837], [951,788,837], [951,787,768,837], [951,788,768,837], [951,787,769,837], [951,788,769,837], [951,787,834,837], [951,788,834,837],
[919,787,837], [919,788,837], [919,787,768,837], [919,788,768,837], [919,787,769,837], [919,788,769,837], [919,787,834,837], [919,788,834,837],
[969,787,837], [969,788,837], [969,787,768,837], [969,788,768,837], [969,787,769,837], [969,788,769,837], [969,787,834,837], [969,788,834,837],
[937,787,837], [937,788,837], [937,787,768,837], [937,788,768,837], [937,787,769,837], [937,788,769,837], [937,787,834,837], [937,788,834,837],
[945,774], [945,772], [945,768,837], [945,837], [945,769,837],
  ];
  for (ix=0; ix<53; ix++) {
    val = ls[ix];
    map[ix+8064] = val;
  }
  ls = [
[8190,768], [8190,769], [8190,834], [965,774], [965,772], [965,776,768], [965,776,769], [961,787],
[961,788], [965,834], [965,776,834], [933,774], [933,772], [933,768], [933,769], [929,788],
[168,768], [168,769], 96,
  ];
  for (ix=0; ix<19; ix++) {
    val = ls[ix];
    map[ix+8157] = val;
  }
  ls = [
35912, 26356, 36554, 36040, 28369, 20018, 21477, 40860,
40860, 22865, 37329, 21895, 22856, 25078, 30313, 32645,
34367, 34746, 35064, 37007, 27138, 27931, 28889, 29662,
33853, 37226, 39409, 20098, 21365, 27396, 29211, 34349,
40478, 23888, 28651, 34253, 35172, 25289, 33240, 34847,
24266, 26391, 28010, 29436, 37070, 20358, 20919, 21214,
25796, 27347, 29200, 30439, 32769, 34310, 34396, 36335,
38706, 39791, 40442, 30860, 31103, 32160, 33737, 37636,
40575, 35542, 22751, 24324, 31840, 32894, 29282, 30922,
36034, 38647, 22744, 23650, 27155, 28122, 28431, 32047,
32311, 38475, 21202, 32907, 20956, 20940, 31260, 32190,
33777, 38517, 35712, 25295, 27138, 35582, 20025, 23527,
24594, 29575, 30064, 21271, 30971, 20415, 24489, 19981,
27852, 25976, 32034, 21443, 22622, 30465, 33865, 35498,
27578, 36784, 27784, 25342, 33509, 25504, 30053, 20142,
20841, 20937, 26753, 31975, 33391, 35538, 37327, 21237,
21570, 22899, 24300, 26053, 28670, 31018, 38317, 39530,
40599, 40654, 21147, 26310, 27511, 36706, 24180, 24976,
25088, 25754, 28451, 29001, 29833, 31178, 32244, 32879,
36646, 34030, 36899, 37706, 21015, 21155, 21693, 28872,
35010, 35498, 24265, 24565, 25467, 27566, 31806, 29557,
20196, 22265, 23527, 23994, 24604, 29618, 29801, 32666,
32838, 37428, 38646, 38728, 38936, 20363, 31150, 37300,
38584, 24801, 20102, 20698, 23534, 23615, 26009, 27138,
29134, 30274, 34044, 36988, 40845, 26248, 38446, 21129,
26491, 26611, 27969, 28316, 29705, 30041, 30827, 32016,
39006, 20845, 25134, 38520, 20523, 23833, 28138, 36650,
24459, 24900, 26647, 29575, 38534, 21033, 21519, 23653,
26131, 26446, 26792, 27877, 29702, 30178, 32633, 35023,
35041, 37324, 38626, 21311, 28346, 21533, 29136, 29848,
34298, 38563, 40023, 40607, 26519, 28107, 33256, 31435,
31520, 31890, 29376, 28825, 35672, 20160, 33590, 21050,
20999, 24230, 25299, 31958, 23429, 27934, 26292, 36667,
34892, 38477, 35211, 24275, 20800, 21952,
  ];
  for (ix=0; ix<270; ix++) {
    val = ls[ix];
    map[ix+63744] = val;
  }
  ls = [
20398, 20711, 20813, 21193, 21220, 21329, 21917, 22022,
22120, 22592, 22696, 23652, 23662, 24724, 24936, 24974,
25074, 25935, 26082, 26257, 26757, 28023, 28186, 28450,
29038, 29227, 29730, 30865, 31038, 31049, 31048, 31056,
31062, 31069, 31117, 31118, 31296, 31361, 31680, 32244,
32265, 32321, 32626, 32773, 33261, 33401, 33401, 33879,
35088, 35222, 35585, 35641, 36051, 36104, 36790, 36920,
38627, 38911, 38971,
  ];
  for (ix=0; ix<59; ix++) {
    val = ls[ix];
    map[ix+64048] = val;
  }
  ls = [
20029, 20024, 20033, 131362, 20320, 20398, 20411, 20482,
20602, 20633, 20711, 20687, 13470, 132666, 20813, 20820,
20836, 20855, 132380, 13497, 20839, 20877, 132427, 20887,
20900, 20172, 20908, 20917, 168415, 20981, 20995, 13535,
21051, 21062, 21106, 21111, 13589, 21191, 21193, 21220,
21242, 21253, 21254, 21271, 21321, 21329, 21338, 21363,
21373, 21375, 21375, 21375, 133676, 28784, 21450, 21471,
133987, 21483, 21489, 21510, 21662, 21560, 21576, 21608,
21666, 21750, 21776, 21843, 21859, 21892, 21892, 21913,
21931, 21939, 21954, 22294, 22022, 22295, 22097, 22132,
20999, 22766, 22478, 22516, 22541, 22411, 22578, 22577,
22700, 136420, 22770, 22775, 22790, 22810, 22818, 22882,
136872, 136938, 23020, 23067, 23079, 23000, 23142, 14062,
14076, 23304, 23358, 23358, 137672, 23491, 23512, 23527,
23539, 138008, 23551, 23558, 24403, 23586, 14209, 23648,
23662, 23744, 23693, 138724, 23875, 138726, 23918, 23915,
23932, 24033, 24034, 14383, 24061, 24104, 24125, 24169,
14434, 139651, 14460, 24240, 24243, 24246, 24266, 172946,
24318, 140081, 140081, 33281, 24354, 24354, 14535, 144056,
156122, 24418, 24427, 14563, 24474, 24525, 24535, 24569,
24705, 14650, 14620, 24724, 141012, 24775, 24904, 24908,
24910, 24908, 24954, 24974, 25010, 24996, 25007, 25054,
25074, 25078, 25104, 25115, 25181, 25265, 25300, 25424,
142092, 25405, 25340, 25448, 25475, 25572, 142321, 25634,
25541, 25513, 14894, 25705, 25726, 25757, 25719, 14956,
25935, 25964, 143370, 26083, 26360, 26185, 15129, 26257,
15112, 15076, 20882, 20885, 26368, 26268, 32941, 17369,
26391, 26395, 26401, 26462, 26451, 144323, 15177, 26618,
26501, 26706, 26757, 144493, 26766, 26655, 26900, 15261,
26946, 27043, 27114, 27304, 145059, 27355, 15384, 27425,
145575, 27476, 15438, 27506, 27551, 27578, 27579, 146061,
138507, 146170, 27726, 146620, 27839, 27853, 27751, 27926,
27966, 28023, 27969, 28009, 28024, 28037, 146718, 27956,
28207, 28270, 15667, 28363, 28359, 147153, 28153, 28526,
147294, 147342, 28614, 28729, 28702, 28699, 15766, 28746,
28797, 28791, 28845, 132389, 28997, 148067, 29084, 148395,
29224, 29237, 29264, 149000, 29312, 29333, 149301, 149524,
29562, 29579, 16044, 29605, 16056, 16056, 29767, 29788,
29809, 29829, 29898, 16155, 29988, 150582, 30014, 150674,
30064, 139679, 30224, 151457, 151480, 151620, 16380, 16392,
30452, 151795, 151794, 151833, 151859, 30494, 30495, 30495,
30538, 16441, 30603, 16454, 16534, 152605, 30798, 30860,
30924, 16611, 153126, 31062, 153242, 153285, 31119, 31211,
16687, 31296, 31306, 31311, 153980, 154279, 154279, 31470,
16898, 154539, 31686, 31689, 16935, 154752, 31954, 17056,
31976, 31971, 32000, 155526, 32099, 17153, 32199, 32258,
32325, 17204, 156200, 156231, 17241, 156377, 32634, 156478,
32661, 32762, 32773, 156890, 156963, 32864, 157096, 32880,
144223, 17365, 32946, 33027, 17419, 33086, 23221, 157607,
157621, 144275, 144284, 33281, 33284, 36766, 17515, 33425,
33419, 33437, 21171, 33457, 33459, 33469, 33510, 158524,
33509, 33565, 33635, 33709, 33571, 33725, 33767, 33879,
33619, 33738, 33740, 33756, 158774, 159083, 158933, 17707,
34033, 34035, 34070, 160714, 34148, 159532, 17757, 17761,
159665, 159954, 17771, 34384, 34396, 34407, 34409, 34473,
34440, 34574, 34530, 34681, 34600, 34667, 34694, 17879,
34785, 34817, 17913, 34912, 34915, 161383, 35031, 35038,
17973, 35066, 13499, 161966, 162150, 18110, 18119, 35488,
35565, 35722, 35925, 162984, 36011, 36033, 36123, 36215,
163631, 133124, 36299, 36284, 36336, 133342, 36564, 36664,
165330, 165357, 37012, 37105, 37137, 165678, 37147, 37432,
37591, 37592, 37500, 37881, 37909, 166906, 38283, 18837,
38327, 167287, 18918, 38595, 23986, 38691, 168261, 168474,
19054, 19062, 38880, 168970, 19122, 169110, 38923, 38923,
38953, 169398, 39138, 19251, 39209, 39335, 39362, 39422,
19406, 170800, 39698, 40000, 40189, 19662, 19693, 40295,
172238, 19704, 172293, 172558, 172689, 40635, 19798, 40697,
40702, 40709, 40719, 40726, 40763, 173568,
  ];
  for (ix=0; ix<542; ix++) {
    val = ls[ix];
    map[ix+194560] = val;
  }
})();

/* list all the special cases in unicode_combin_table */
var unicode_combin_table = {
768: 230, 769: 230, 770: 230, 771: 230, 772: 230,
773: 230, 774: 230, 775: 230, 776: 230, 777: 230,
778: 230, 779: 230, 780: 230, 781: 230, 782: 230,
783: 230, 784: 230, 785: 230, 786: 230, 787: 230,
788: 230, 789: 232, 790: 220, 791: 220, 792: 220,
793: 220, 794: 232, 795: 216, 796: 220, 797: 220,
798: 220, 799: 220, 800: 220, 801: 202, 802: 202,
803: 220, 804: 220, 805: 220, 806: 220, 807: 202,
808: 202, 809: 220, 810: 220, 811: 220, 812: 220,
813: 220, 814: 220, 815: 220, 816: 220, 817: 220,
818: 220, 819: 220, 820: 1, 821: 1, 822: 1,
823: 1, 824: 1, 825: 220, 826: 220, 827: 220,
828: 220, 829: 230, 830: 230, 831: 230, 832: 230,
833: 230, 834: 230, 835: 230, 836: 230, 837: 240,
838: 230, 839: 220, 840: 220, 841: 220, 842: 230,
843: 230, 844: 230, 845: 220, 846: 220, 848: 230,
849: 230, 850: 230, 851: 220, 852: 220, 853: 220,
854: 220, 855: 230, 861: 234, 862: 234, 863: 233,
864: 234, 865: 234, 866: 233, 867: 230, 868: 230,
869: 230, 870: 230, 871: 230, 872: 230, 873: 230,
874: 230, 875: 230, 876: 230, 877: 230, 878: 230,
879: 230, 1155: 230, 1156: 230, 1157: 230, 1158: 230,
1425: 220, 1426: 230, 1427: 230, 1428: 230, 1429: 230,
1430: 220, 1431: 230, 1432: 230, 1433: 230, 1434: 222,
1435: 220, 1436: 230, 1437: 230, 1438: 230, 1439: 230,
1440: 230, 1441: 230, 1443: 220, 1444: 220, 1445: 220,
1446: 220, 1447: 220, 1448: 230, 1449: 230, 1450: 220,
1451: 230, 1452: 230, 1453: 222, 1454: 228, 1455: 230,
1456: 10, 1457: 11, 1458: 12, 1459: 13, 1460: 14,
1461: 15, 1462: 16, 1463: 17, 1464: 18, 1465: 19,
1467: 20, 1468: 21, 1469: 22, 1471: 23, 1473: 24,
1474: 25, 1476: 230, 1552: 230, 1553: 230, 1554: 230,
1555: 230, 1556: 230, 1557: 230, 1611: 27, 1612: 28,
1613: 29, 1614: 30, 1615: 31, 1616: 32, 1617: 33,
1618: 34, 1619: 230, 1620: 230, 1621: 220, 1622: 220,
1623: 230, 1624: 230, 1648: 35, 1750: 230, 1751: 230,
1752: 230, 1753: 230, 1754: 230, 1755: 230, 1756: 230,
1759: 230, 1760: 230, 1761: 230, 1762: 230, 1763: 220,
1764: 230, 1767: 230, 1768: 230, 1770: 220, 1771: 230,
1772: 230, 1773: 220, 1809: 36, 1840: 230, 1841: 220,
1842: 230, 1843: 230, 1844: 220, 1845: 230, 1846: 230,
1847: 220, 1848: 220, 1849: 220, 1850: 230, 1851: 220,
1852: 220, 1853: 230, 1854: 220, 1855: 230, 1856: 230,
1857: 230, 1858: 220, 1859: 230, 1860: 220, 1861: 230,
1862: 220, 1863: 230, 1864: 220, 1865: 230, 1866: 230,
2364: 7, 2381: 9, 2385: 230, 2386: 220, 2387: 230,
2388: 230, 2492: 7, 2509: 9, 2620: 7, 2637: 9,
2748: 7, 2765: 9, 2876: 7, 2893: 9, 3021: 9,
3149: 9, 3157: 84, 3158: 91, 3260: 7, 3277: 9,
3405: 9, 3530: 9, 3640: 103, 3641: 103, 3642: 9,
3656: 107, 3657: 107, 3658: 107, 3659: 107, 3768: 118,
3769: 118, 3784: 122, 3785: 122, 3786: 122, 3787: 122,
3864: 220, 3865: 220, 3893: 220, 3895: 220, 3897: 216,
3953: 129, 3954: 130, 3956: 132, 3962: 130, 3963: 130,
3964: 130, 3965: 130, 3968: 130, 3970: 230, 3971: 230,
3972: 9, 3974: 230, 3975: 230, 4038: 220, 4151: 7,
4153: 9, 5908: 9, 5940: 9, 6098: 9, 6109: 230,
6313: 228, 6457: 222, 6458: 230, 6459: 220, 8400: 230,
8401: 230, 8402: 1, 8403: 1, 8404: 230, 8405: 230,
8406: 230, 8407: 230, 8408: 1, 8409: 1, 8410: 1,
8411: 230, 8412: 230, 8417: 230, 8421: 1, 8422: 1,
8423: 230, 8424: 220, 8425: 230, 8426: 1, 12330: 218,
12331: 228, 12332: 232, 12333: 222, 12334: 224, 12335: 224,
12441: 8, 12442: 8, 64286: 26, 65056: 230, 65057: 230,
65058: 230, 65059: 230, 119141: 216, 119142: 216, 119143: 1,
119144: 1, 119145: 1, 119149: 226, 119150: 216, 119151: 216,
119152: 216, 119153: 216, 119154: 216, 119163: 220, 119164: 220,
119165: 220, 119166: 220, 119167: 220, 119168: 220, 119169: 220,
119170: 220, 119173: 230, 119174: 230, 119175: 230, 119176: 230,
119177: 230, 119178: 220, 119179: 220, 119210: 230, 119211: 230,
119212: 230, 119213: 230
};

/* list all of unicode_compo_table */
var unicode_compo_table = {
 60: { 824:8814 },
 61: { 824:8800 },
 62: { 824:8815 },
 65: { 768:192, 769:193, 770:194, 771:195, 772:256, 774:258, 775:550, 776:196, 777:7842, 778:197, 780:461, 783:512, 785:514, 803:7840, 805:7680, 808:260 },
 66: { 775:7682, 803:7684, 817:7686 },
 67: { 769:262, 770:264, 775:266, 780:268, 807:199 },
 68: { 775:7690, 780:270, 803:7692, 807:7696, 813:7698, 817:7694 },
 69: { 768:200, 769:201, 770:202, 771:7868, 772:274, 774:276, 775:278, 776:203, 777:7866, 780:282, 783:516, 785:518, 803:7864, 807:552, 808:280, 813:7704, 816:7706 },
 70: { 775:7710 },
 71: { 769:500, 770:284, 772:7712, 774:286, 775:288, 780:486, 807:290 },
 72: { 770:292, 775:7714, 776:7718, 780:542, 803:7716, 807:7720, 814:7722 },
 73: { 768:204, 769:205, 770:206, 771:296, 772:298, 774:300, 775:304, 776:207, 777:7880, 780:463, 783:520, 785:522, 803:7882, 808:302, 816:7724 },
 74: { 770:308 },
 75: { 769:7728, 780:488, 803:7730, 807:310, 817:7732 },
 76: { 769:313, 780:317, 803:7734, 807:315, 813:7740, 817:7738 },
 77: { 769:7742, 775:7744, 803:7746 },
 78: { 768:504, 769:323, 771:209, 775:7748, 780:327, 803:7750, 807:325, 813:7754, 817:7752 },
 79: { 768:210, 769:211, 770:212, 771:213, 772:332, 774:334, 775:558, 776:214, 777:7886, 779:336, 780:465, 783:524, 785:526, 795:416, 803:7884, 808:490 },
 80: { 769:7764, 775:7766 },
 82: { 769:340, 775:7768, 780:344, 783:528, 785:530, 803:7770, 807:342, 817:7774 },
 83: { 769:346, 770:348, 775:7776, 780:352, 803:7778, 806:536, 807:350 },
 84: { 775:7786, 780:356, 803:7788, 806:538, 807:354, 813:7792, 817:7790 },
 85: { 768:217, 769:218, 770:219, 771:360, 772:362, 774:364, 776:220, 777:7910, 778:366, 779:368, 780:467, 783:532, 785:534, 795:431, 803:7908, 804:7794, 808:370, 813:7798, 816:7796 },
 86: { 771:7804, 803:7806 },
 87: { 768:7808, 769:7810, 770:372, 775:7814, 776:7812, 803:7816 },
 88: { 775:7818, 776:7820 },
 89: { 768:7922, 769:221, 770:374, 771:7928, 772:562, 775:7822, 776:376, 777:7926, 803:7924 },
 90: { 769:377, 770:7824, 775:379, 780:381, 803:7826, 817:7828 },
 97: { 768:224, 769:225, 770:226, 771:227, 772:257, 774:259, 775:551, 776:228, 777:7843, 778:229, 780:462, 783:513, 785:515, 803:7841, 805:7681, 808:261 },
 98: { 775:7683, 803:7685, 817:7687 },
 99: { 769:263, 770:265, 775:267, 780:269, 807:231 },
 100: { 775:7691, 780:271, 803:7693, 807:7697, 813:7699, 817:7695 },
 101: { 768:232, 769:233, 770:234, 771:7869, 772:275, 774:277, 775:279, 776:235, 777:7867, 780:283, 783:517, 785:519, 803:7865, 807:553, 808:281, 813:7705, 816:7707 },
 102: { 775:7711 },
 103: { 769:501, 770:285, 772:7713, 774:287, 775:289, 780:487, 807:291 },
 104: { 770:293, 775:7715, 776:7719, 780:543, 803:7717, 807:7721, 814:7723, 817:7830 },
 105: { 768:236, 769:237, 770:238, 771:297, 772:299, 774:301, 776:239, 777:7881, 780:464, 783:521, 785:523, 803:7883, 808:303, 816:7725 },
 106: { 770:309, 780:496 },
 107: { 769:7729, 780:489, 803:7731, 807:311, 817:7733 },
 108: { 769:314, 780:318, 803:7735, 807:316, 813:7741, 817:7739 },
 109: { 769:7743, 775:7745, 803:7747 },
 110: { 768:505, 769:324, 771:241, 775:7749, 780:328, 803:7751, 807:326, 813:7755, 817:7753 },
 111: { 768:242, 769:243, 770:244, 771:245, 772:333, 774:335, 775:559, 776:246, 777:7887, 779:337, 780:466, 783:525, 785:527, 795:417, 803:7885, 808:491 },
 112: { 769:7765, 775:7767 },
 114: { 769:341, 775:7769, 780:345, 783:529, 785:531, 803:7771, 807:343, 817:7775 },
 115: { 769:347, 770:349, 775:7777, 780:353, 803:7779, 806:537, 807:351 },
 116: { 775:7787, 776:7831, 780:357, 803:7789, 806:539, 807:355, 813:7793, 817:7791 },
 117: { 768:249, 769:250, 770:251, 771:361, 772:363, 774:365, 776:252, 777:7911, 778:367, 779:369, 780:468, 783:533, 785:535, 795:432, 803:7909, 804:7795, 808:371, 813:7799, 816:7797 },
 118: { 771:7805, 803:7807 },
 119: { 768:7809, 769:7811, 770:373, 775:7815, 776:7813, 778:7832, 803:7817 },
 120: { 775:7819, 776:7821 },
 121: { 768:7923, 769:253, 770:375, 771:7929, 772:563, 775:7823, 776:255, 777:7927, 778:7833, 803:7925 },
 122: { 769:378, 770:7825, 775:380, 780:382, 803:7827, 817:7829 },
 168: { 768:8173, 769:901, 834:8129 },
 194: { 768:7846, 769:7844, 771:7850, 777:7848 },
 196: { 772:478 },
 197: { 769:506 },
 198: { 769:508, 772:482 },
 199: { 769:7688 },
 202: { 768:7872, 769:7870, 771:7876, 777:7874 },
 207: { 769:7726 },
 212: { 768:7890, 769:7888, 771:7894, 777:7892 },
 213: { 769:7756, 772:556, 776:7758 },
 214: { 772:554 },
 216: { 769:510 },
 220: { 768:475, 769:471, 772:469, 780:473 },
 226: { 768:7847, 769:7845, 771:7851, 777:7849 },
 228: { 772:479 },
 229: { 769:507 },
 230: { 769:509, 772:483 },
 231: { 769:7689 },
 234: { 768:7873, 769:7871, 771:7877, 777:7875 },
 239: { 769:7727 },
 244: { 768:7891, 769:7889, 771:7895, 777:7893 },
 245: { 769:7757, 772:557, 776:7759 },
 246: { 772:555 },
 248: { 769:511 },
 252: { 768:476, 769:472, 772:470, 780:474 },
 258: { 768:7856, 769:7854, 771:7860, 777:7858 },
 259: { 768:7857, 769:7855, 771:7861, 777:7859 },
 274: { 768:7700, 769:7702 },
 275: { 768:7701, 769:7703 },
 332: { 768:7760, 769:7762 },
 333: { 768:7761, 769:7763 },
 346: { 775:7780 },
 347: { 775:7781 },
 352: { 775:7782 },
 353: { 775:7783 },
 360: { 769:7800 },
 361: { 769:7801 },
 362: { 776:7802 },
 363: { 776:7803 },
 383: { 775:7835 },
 416: { 768:7900, 769:7898, 771:7904, 777:7902, 803:7906 },
 417: { 768:7901, 769:7899, 771:7905, 777:7903, 803:7907 },
 431: { 768:7914, 769:7912, 771:7918, 777:7916, 803:7920 },
 432: { 768:7915, 769:7913, 771:7919, 777:7917, 803:7921 },
 439: { 780:494 },
 490: { 772:492 },
 491: { 772:493 },
 550: { 772:480 },
 551: { 772:481 },
 552: { 774:7708 },
 553: { 774:7709 },
 558: { 772:560 },
 559: { 772:561 },
 658: { 780:495 },
 776: { 769:836 },
 913: { 768:8122, 769:902, 772:8121, 774:8120, 787:7944, 788:7945, 837:8124 },
 917: { 768:8136, 769:904, 787:7960, 788:7961 },
 919: { 768:8138, 769:905, 787:7976, 788:7977, 837:8140 },
 921: { 768:8154, 769:906, 772:8153, 774:8152, 776:938, 787:7992, 788:7993 },
 927: { 768:8184, 769:908, 787:8008, 788:8009 },
 929: { 788:8172 },
 933: { 768:8170, 769:910, 772:8169, 774:8168, 776:939, 788:8025 },
 937: { 768:8186, 769:911, 787:8040, 788:8041, 837:8188 },
 940: { 837:8116 },
 942: { 837:8132 },
 945: { 768:8048, 769:940, 772:8113, 774:8112, 787:7936, 788:7937, 834:8118, 837:8115 },
 949: { 768:8050, 769:941, 787:7952, 788:7953 },
 951: { 768:8052, 769:942, 787:7968, 788:7969, 834:8134, 837:8131 },
 953: { 768:8054, 769:943, 772:8145, 774:8144, 776:970, 787:7984, 788:7985, 834:8150 },
 959: { 768:8056, 769:972, 787:8000, 788:8001 },
 961: { 787:8164, 788:8165 },
 965: { 768:8058, 769:973, 772:8161, 774:8160, 776:971, 787:8016, 788:8017, 834:8166 },
 969: { 768:8060, 769:974, 787:8032, 788:8033, 834:8182, 837:8179 },
 970: { 768:8146, 769:912, 834:8151 },
 971: { 768:8162, 769:944, 834:8167 },
 974: { 837:8180 },
 978: { 769:979, 776:980 },
 1030: { 776:1031 },
 1040: { 774:1232, 776:1234 },
 1043: { 769:1027 },
 1045: { 768:1024, 774:1238, 776:1025 },
 1046: { 774:1217, 776:1244 },
 1047: { 776:1246 },
 1048: { 768:1037, 772:1250, 774:1049, 776:1252 },
 1050: { 769:1036 },
 1054: { 776:1254 },
 1059: { 772:1262, 774:1038, 776:1264, 779:1266 },
 1063: { 776:1268 },
 1067: { 776:1272 },
 1069: { 776:1260 },
 1072: { 774:1233, 776:1235 },
 1075: { 769:1107 },
 1077: { 768:1104, 774:1239, 776:1105 },
 1078: { 774:1218, 776:1245 },
 1079: { 776:1247 },
 1080: { 768:1117, 772:1251, 774:1081, 776:1253 },
 1082: { 769:1116 },
 1086: { 776:1255 },
 1091: { 772:1263, 774:1118, 776:1265, 779:1267 },
 1095: { 776:1269 },
 1099: { 776:1273 },
 1101: { 776:1261 },
 1110: { 776:1111 },
 1140: { 783:1142 },
 1141: { 783:1143 },
 1240: { 776:1242 },
 1241: { 776:1243 },
 1256: { 776:1258 },
 1257: { 776:1259 },
 1488: { 1463:64302, 1464:64303, 1468:64304 },
 1489: { 1468:64305, 1471:64332 },
 1490: { 1468:64306 },
 1491: { 1468:64307 },
 1492: { 1468:64308 },
 1493: { 1465:64331, 1468:64309 },
 1494: { 1468:64310 },
 1496: { 1468:64312 },
 1497: { 1460:64285, 1468:64313 },
 1498: { 1468:64314 },
 1499: { 1468:64315, 1471:64333 },
 1500: { 1468:64316 },
 1502: { 1468:64318 },
 1504: { 1468:64320 },
 1505: { 1468:64321 },
 1507: { 1468:64323 },
 1508: { 1468:64324, 1471:64334 },
 1510: { 1468:64326 },
 1511: { 1468:64327 },
 1512: { 1468:64328 },
 1513: { 1468:64329, 1473:64298, 1474:64299 },
 1514: { 1468:64330 },
 1522: { 1463:64287 },
 1575: { 1619:1570, 1620:1571, 1621:1573 },
 1608: { 1620:1572 },
 1610: { 1620:1574 },
 1729: { 1620:1730 },
 1746: { 1620:1747 },
 1749: { 1620:1728 },
 2325: { 2364:2392 },
 2326: { 2364:2393 },
 2327: { 2364:2394 },
 2332: { 2364:2395 },
 2337: { 2364:2396 },
 2338: { 2364:2397 },
 2344: { 2364:2345 },
 2347: { 2364:2398 },
 2351: { 2364:2399 },
 2352: { 2364:2353 },
 2355: { 2364:2356 },
 2465: { 2492:2524 },
 2466: { 2492:2525 },
 2479: { 2492:2527 },
 2503: { 2494:2507, 2519:2508 },
 2582: { 2620:2649 },
 2583: { 2620:2650 },
 2588: { 2620:2651 },
 2603: { 2620:2654 },
 2610: { 2620:2611 },
 2616: { 2620:2614 },
 2849: { 2876:2908 },
 2850: { 2876:2909 },
 2887: { 2878:2891, 2902:2888, 2903:2892 },
 2962: { 3031:2964 },
 3014: { 3006:3018, 3031:3020 },
 3015: { 3006:3019 },
 3142: { 3158:3144 },
 3263: { 3285:3264 },
 3270: { 3266:3274, 3285:3271, 3286:3272 },
 3274: { 3285:3275 },
 3398: { 3390:3402, 3415:3404 },
 3399: { 3390:3403 },
 3545: { 3530:3546, 3535:3548, 3551:3550 },
 3548: { 3530:3549 },
 3904: { 4021:3945 },
 3906: { 4023:3907 },
 3916: { 4023:3917 },
 3921: { 4023:3922 },
 3926: { 4023:3927 },
 3931: { 4023:3932 },
 3953: { 3954:3955, 3956:3957, 3968:3969 },
 3984: { 4021:4025 },
 3986: { 4023:3987 },
 3996: { 4023:3997 },
 4001: { 4023:4002 },
 4006: { 4023:4007 },
 4011: { 4023:4012 },
 4018: { 3968:3958 },
 4019: { 3968:3960 },
 4133: { 4142:4134 },
 7734: { 772:7736 },
 7735: { 772:7737 },
 7770: { 772:7772 },
 7771: { 772:7773 },
 7778: { 775:7784 },
 7779: { 775:7785 },
 7840: { 770:7852, 774:7862 },
 7841: { 770:7853, 774:7863 },
 7864: { 770:7878 },
 7865: { 770:7879 },
 7884: { 770:7896 },
 7885: { 770:7897 },
 7936: { 768:7938, 769:7940, 834:7942, 837:8064 },
 7937: { 768:7939, 769:7941, 834:7943, 837:8065 },
 7938: { 837:8066 },
 7939: { 837:8067 },
 7940: { 837:8068 },
 7941: { 837:8069 },
 7942: { 837:8070 },
 7943: { 837:8071 },
 7944: { 768:7946, 769:7948, 834:7950, 837:8072 },
 7945: { 768:7947, 769:7949, 834:7951, 837:8073 },
 7946: { 837:8074 },
 7947: { 837:8075 },
 7948: { 837:8076 },
 7949: { 837:8077 },
 7950: { 837:8078 },
 7951: { 837:8079 },
 7952: { 768:7954, 769:7956 },
 7953: { 768:7955, 769:7957 },
 7960: { 768:7962, 769:7964 },
 7961: { 768:7963, 769:7965 },
 7968: { 768:7970, 769:7972, 834:7974, 837:8080 },
 7969: { 768:7971, 769:7973, 834:7975, 837:8081 },
 7970: { 837:8082 },
 7971: { 837:8083 },
 7972: { 837:8084 },
 7973: { 837:8085 },
 7974: { 837:8086 },
 7975: { 837:8087 },
 7976: { 768:7978, 769:7980, 834:7982, 837:8088 },
 7977: { 768:7979, 769:7981, 834:7983, 837:8089 },
 7978: { 837:8090 },
 7979: { 837:8091 },
 7980: { 837:8092 },
 7981: { 837:8093 },
 7982: { 837:8094 },
 7983: { 837:8095 },
 7984: { 768:7986, 769:7988, 834:7990 },
 7985: { 768:7987, 769:7989, 834:7991 },
 7992: { 768:7994, 769:7996, 834:7998 },
 7993: { 768:7995, 769:7997, 834:7999 },
 8000: { 768:8002, 769:8004 },
 8001: { 768:8003, 769:8005 },
 8008: { 768:8010, 769:8012 },
 8009: { 768:8011, 769:8013 },
 8016: { 768:8018, 769:8020, 834:8022 },
 8017: { 768:8019, 769:8021, 834:8023 },
 8025: { 768:8027, 769:8029, 834:8031 },
 8032: { 768:8034, 769:8036, 834:8038, 837:8096 },
 8033: { 768:8035, 769:8037, 834:8039, 837:8097 },
 8034: { 837:8098 },
 8035: { 837:8099 },
 8036: { 837:8100 },
 8037: { 837:8101 },
 8038: { 837:8102 },
 8039: { 837:8103 },
 8040: { 768:8042, 769:8044, 834:8046, 837:8104 },
 8041: { 768:8043, 769:8045, 834:8047, 837:8105 },
 8042: { 837:8106 },
 8043: { 837:8107 },
 8044: { 837:8108 },
 8045: { 837:8109 },
 8046: { 837:8110 },
 8047: { 837:8111 },
 8048: { 837:8114 },
 8052: { 837:8130 },
 8060: { 837:8178 },
 8118: { 837:8119 },
 8127: { 768:8141, 769:8142, 834:8143 },
 8134: { 837:8135 },
 8182: { 837:8183 },
 8190: { 768:8157, 769:8158, 834:8159 },
 8592: { 824:8602 },
 8594: { 824:8603 },
 8596: { 824:8622 },
 8656: { 824:8653 },
 8658: { 824:8655 },
 8660: { 824:8654 },
 8707: { 824:8708 },
 8712: { 824:8713 },
 8715: { 824:8716 },
 8739: { 824:8740 },
 8741: { 824:8742 },
 8764: { 824:8769 },
 8771: { 824:8772 },
 8773: { 824:8775 },
 8776: { 824:8777 },
 8781: { 824:8813 },
 8801: { 824:8802 },
 8804: { 824:8816 },
 8805: { 824:8817 },
 8818: { 824:8820 },
 8819: { 824:8821 },
 8822: { 824:8824 },
 8823: { 824:8825 },
 8826: { 824:8832 },
 8827: { 824:8833 },
 8828: { 824:8928 },
 8829: { 824:8929 },
 8834: { 824:8836 },
 8835: { 824:8837 },
 8838: { 824:8840 },
 8839: { 824:8841 },
 8849: { 824:8930 },
 8850: { 824:8931 },
 8866: { 824:8876 },
 8872: { 824:8877 },
 8873: { 824:8878 },
 8875: { 824:8879 },
 8882: { 824:8938 },
 8883: { 824:8939 },
 8884: { 824:8940 },
 8885: { 824:8941 },
 10973: { 824:10972 },
 12358: { 12441:12436 },
 12363: { 12441:12364 },
 12365: { 12441:12366 },
 12367: { 12441:12368 },
 12369: { 12441:12370 },
 12371: { 12441:12372 },
 12373: { 12441:12374 },
 12375: { 12441:12376 },
 12377: { 12441:12378 },
 12379: { 12441:12380 },
 12381: { 12441:12382 },
 12383: { 12441:12384 },
 12385: { 12441:12386 },
 12388: { 12441:12389 },
 12390: { 12441:12391 },
 12392: { 12441:12393 },
 12399: { 12441:12400, 12442:12401 },
 12402: { 12441:12403, 12442:12404 },
 12405: { 12441:12406, 12442:12407 },
 12408: { 12441:12409, 12442:12410 },
 12411: { 12441:12412, 12442:12413 },
 12445: { 12441:12446 },
 12454: { 12441:12532 },
 12459: { 12441:12460 },
 12461: { 12441:12462 },
 12463: { 12441:12464 },
 12465: { 12441:12466 },
 12467: { 12441:12468 },
 12469: { 12441:12470 },
 12471: { 12441:12472 },
 12473: { 12441:12474 },
 12475: { 12441:12476 },
 12477: { 12441:12478 },
 12479: { 12441:12480 },
 12481: { 12441:12482 },
 12484: { 12441:12485 },
 12486: { 12441:12487 },
 12488: { 12441:12489 },
 12495: { 12441:12496, 12442:12497 },
 12498: { 12441:12499, 12442:12500 },
 12501: { 12441:12502, 12442:12503 },
 12504: { 12441:12505, 12442:12506 },
 12507: { 12441:12508, 12442:12509 },
 12527: { 12441:12535 },
 12528: { 12441:12536 },
 12529: { 12441:12537 },
 12530: { 12441:12538 },
 12541: { 12441:12542 },
 64329: { 1473:64300, 1474:64301 },
 119127: { 119141:119134 },
 119128: { 119141:119135 },
 119135: { 119150:119136, 119151:119137, 119152:119138, 119153:119139, 119154:119140 },
 119225: { 119141:119227 },
 119226: { 119141:119228 },
 119227: { 119150:119229, 119151:119231 },
 119228: { 119150:119230, 119151:119232 }
};
/* End of tables generated by casemap.py. */



/***/ }),

/***/ "./src/vorple/haven.js":
/*!*****************************!*\
  !*** ./src/vorple/haven.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initQuixe": () => (/* binding */ initQuixe),
/* harmony export */   "loadStoryFile": () => (/* binding */ loadStoryFile),
/* harmony export */   "setBase64StoryFile": () => (/* binding */ setBase64StoryFile),
/* harmony export */   "setStyle": () => (/* binding */ setStyle),
/* harmony export */   "setStyleHint": () => (/* binding */ setStyleHint)
/* harmony export */ });
/* harmony import */ var _glk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glk */ "./src/vorple/glk.js");
/* harmony import */ var _haven_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../haven/style */ "./src/haven/style.js");
/* harmony import */ var _haven_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../haven/error */ "./src/haven/error.js");
/* harmony import */ var _haven_options__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../haven/options */ "./src/haven/options.js");
/**
 * Helper functions and monkey patches to the Haven engine
 * 
 * @module haven
 * @private
 */






// Inform 7 creates a file that puts the story file in this variable
let base64StoryFile = null;

const stylehints = [];

// default
stylehints[ 0 ] = {
    bold: false,
    italic: false,
    underline: false,
//  proportional: true
};

// Emphasized
stylehints[ 1 ] = {
    italic: true
};

// Preformatted
stylehints[ 2 ] = {
// proportional: false
};

// Header
stylehints[ 3 ] = {
    bold: true
};

// Subheader
stylehints[ 4 ] = {
    bold: true
};


/**
 * Start Quixe. Uses the base64StoryFile data (from Inform 7)
 * if a file hasn't been specified
 * 
 * @since 3.2.0
 * @private
 */
function initQuixe( storyfile ) {
    if( !window.Quixe ) {
        (0,_haven_error__WEBPACK_IMPORTED_MODULE_2__.default)( "Can't find Quixe" );
    }

    if( !window.GiDispa ) {
        (0,_haven_error__WEBPACK_IMPORTED_MODULE_2__.default)( "Can't find GiDispa" );
    }

    window.GlkOte = {
        log: () => {}
    };
    
    GiLoad.load_run( null, storyfile, typeof storyfile === 'string' ? 'base64' : undefined );
}


/**
 * Load the story file.
 *  
 * @since 3.2.0
 * @private
 */
function loadStoryFile() {
    // use "storyfile" parameter if it exists, to bypass the Quixe file loader
    const url = (0,_haven_options__WEBPACK_IMPORTED_MODULE_3__.get)( 'storyfile' ) || (0,_haven_options__WEBPACK_IMPORTED_MODULE_3__.get)( 'story' );

    if( base64StoryFile ) {
        const storydata = base64StoryFile;
        base64StoryFile = null;   // no need to keep the original data, free the memory
        return storydata;
    }

    return new Promise( ( resolve, reject ) => {
        const httpRequest = new XMLHttpRequest();
    
        httpRequest.onreadystatechange = function() {
        if( httpRequest.readyState == XMLHttpRequest.DONE ) {
            switch( httpRequest.status ) {
                case 200:
                    resolve( Array.from( new Uint8Array( httpRequest.response ) ) );
                    break;
    
                default:
                    reject( (0,_haven_error__WEBPACK_IMPORTED_MODULE_2__.default)( "Error loading game file. Server returned status code " + httpRequest.status + " (" + httpRequest.statusText + ")" ) );
                    break;
            }
        }
        };
    
        httpRequest.open( "GET", url, true );
        httpRequest.responseType = "arraybuffer";   // this must be exactly here, otherwise IE11 breaks
        httpRequest.send();
    });
}


/**
 * Inform 7 interpreter template calls this to set the story file data.
 * 
 * @since 3.2.0
 * @private
 */
function setBase64StoryFile( data ) {
    base64StoryFile = data;
}


/**
 * Based on Glulx style code, set the basic style of the text being printed.
 * 
 * @param {number} style 
 */
function setStyle( style ) {
    /*
     #define style_Normal (0)
     #define style_Emphasized (1)
     #define style_Preformatted (2)
     #define style_Header (3)
     #define style_Subheader (4)
     #define style_Alert (5)
     #define style_Note (6)
     #define style_BlockQuote (7)
     #define style_Input (8)
     #define style_User1 (9)
     #define style_User2 (10)
     #define style_NUMSTYLES (11)
     */

    if( !stylehints[ style ] ) {
        return;
    }

    for( let i in stylehints[ style ] ) {
        (0,_haven_style__WEBPACK_IMPORTED_MODULE_1__.set)( i, stylehints[ style ][ i ], 0 );
    }
}


/**
 * Changes the appearance of a default style.
 *
 * @param style
 * @param hint
 * @param value
 */
function setStyleHint( style, hint, value ) {
    if( !stylehints[ style ] ) {
        stylehints[ style ] = {
            bold: false,
            italic: false,
            underline: false
//          proportional: true
        };
    }

    const st = stylehints[ style ];

    switch( hint ) {
        case 4:     // Weight
            st.bold = (value === 1);
            break;

        case 5:     // Oblique
            st.italic = (value === 1);
            break;

        case 6:     // Proportional
//                st.proportional = (value === 1);
            break;
    }
}


/***/ }),

/***/ "./src/vorple/layout.js":
/*!******************************!*\
  !*** ./src/vorple/layout.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "block": () => (/* binding */ block),
/* harmony export */   "closeTag": () => (/* binding */ closeTag),
/* harmony export */   "focus": () => (/* binding */ focus),
/* harmony export */   "isBlocked": () => (/* binding */ isBlocked),
/* harmony export */   "openTag": () => (/* binding */ openTag),
/* harmony export */   "scrollTo": () => (/* binding */ scrollTo),
/* harmony export */   "scrollToEnd": () => (/* binding */ scrollToEnd),
/* harmony export */   "unblock": () => (/* binding */ unblock)
/* harmony export */ });
/* harmony import */ var _haven_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../haven/buffer */ "./src/haven/buffer.js");
/* harmony import */ var _haven_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../haven/input */ "./src/haven/input.js");
/* harmony import */ var _haven_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../haven/window */ "./src/haven/window.js");
/**
 * @module layout
 */





/**
 * Blocks the UI so that the user can't type anything or click any elements.
 * Note that this only applies to built-in input and features, for custom
 * features use vorple.layout.isBlocked() to check whether input should be
 * accepted.
 *
 * Use vorple.layout.unblock() to remove the block.
 */
function block() {
    $( '.vorple-link' ).addClass( 'disabled' );
    (0,_haven_input__WEBPACK_IMPORTED_MODULE_1__.block)();
}


/**
 * Close a tag that is currently open.
 *
 * Because the tags are added as DOM elements, the tag isn't really "open"
 * in the sense that it would be missing the closing tag. Instead we jump
 * out of the tag and set output focus back to its parent element.
 *
 * @param {number} [targetWindow=0]
 * @returns {boolean} True if a tag was open, false if we were already
 *  at the top window level and nothing was done
 */
function closeTag( targetWindow = 0 ) {
    const current = _haven_window__WEBPACK_IMPORTED_MODULE_2__.container.get( targetWindow );

    if( current.id === 'window0' ) {
        return false;
    }

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)( targetWindow );
    _haven_window__WEBPACK_IMPORTED_MODULE_2__.container.set( current.parentNode, targetWindow );

    return true;
}


/**
 * Set output focus to an element.
 *
 * @param {string|object} targetElement
 * @param {number} [targetWindow=0]
 *
 * @returns {boolean} True if the focus was set successfully, false if the
 *   element wasn't found
 */
function focus( targetElement, targetWindow = 0 ) {
    const $target = $( targetElement );

    if( $target.length === 0 ) {
        return false;
    }

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)();
    _haven_window__WEBPACK_IMPORTED_MODULE_2__.container.set( $target.last().get( 0 ), targetWindow );

    return true;
}


/**
 * Returns whether user input is blocked.
 * 
 * @returns {boolean} True if input is blocked
 * 
 * @since 3.3.0
 */
function isBlocked() {
    return (0,_haven_input__WEBPACK_IMPORTED_MODULE_1__.isBlocked)();
}


/**
 * Create a new HTML element, append it to the target window, and set the output
 * focus to the element.
 *
 * Example:
 *  layout.openTag( 'div', 'vorple', 0 )  -->  <div class="vorple"></div>
 *
 * @param {string} tagName  Name of the tag to create
 * @param {string} classes  Class names to add to the element
 * @param {number} [targetWindow=0]  The number of the target window
 *
 * @see layout.closeTag
 *
 * @returns {boolean} True
 */
function openTag( tagName, classes, targetWindow = 0 ) {
    const elem = document.createElement( tagName );
    const current = _haven_window__WEBPACK_IMPORTED_MODULE_2__.container.get( targetWindow );

    elem.className = classes;

    (0,_haven_buffer__WEBPACK_IMPORTED_MODULE_0__.flush)( targetWindow );
    _haven_window__WEBPACK_IMPORTED_MODULE_2__.container.append( elem, current );
    _haven_window__WEBPACK_IMPORTED_MODULE_2__.container.set( elem, targetWindow );

    return true;
}


/**
 * Scroll an element into view. Scrolling is initiated only if the element
 * isn't already fully in view or its top position is not in the top
 * half of the page.
 *
 * If the element doesn't exist, the function doesn't do anything.
 *
 * @param {string|object} target  The target element
 * @param {number} [speed=500]  The duration of the scroll animation in milliseconds 
 *
 * @returns {promise} A promise that resolves to true when the scroll animation
 *   ends, or resolves to false if no scrolling was needed (element doesn't
 *   exist or is already in view.)
 */
function scrollTo( target, speed = 500 ) {
    const $target = $( target );

    // if the element doesn't exist, do nothing
    if( $target.length === 0 ) {
        return Promise.resolve( false );
    }

    const pagePosition = $( 'body' ).scrollTop();
    const targetPosition = $target.offset().top;
    const targetHeight = $target.height();
    const windowHeight = $( window ).height();
    const pageBottom = $( document ).height() - windowHeight;
    const halfway = windowHeight / 2 + pagePosition;
    const offset = 30;

    // don't scroll if the element is in the top half of the page
    // and it fits into the page completely
    if( targetPosition >= pagePosition + offset && targetPosition <= halfway &&
        targetPosition + targetHeight <= pagePosition + windowHeight ) {
        return Promise.resolve( false );
    }

    return $( 'html, body' ).stop().animate( {
        scrollTop: Math.min( Math.max( targetPosition - offset, 0 ), pageBottom )
    }, speed ).promise().then( () => true );
}


/**
 * Scroll to the end of the document.
 * 
 * @param {number} [speed=500]  The duration of the scroll animation in milliseconds
 * @returns {promise} A promise that resolves when the scroll animation ends
 */
function scrollToEnd( speed = 500 ) {
    return $( 'html, body' ).stop().animate( {
        scrollTop: $( document ).height() - $( window ).height()
    }, speed ).promise();
}


/**
 * Unblock the UI.
 *
 * @see layout.block
 */
function unblock() {
    $( '.vorple-link' ).removeClass( 'disabled' );
    (0,_haven_input__WEBPACK_IMPORTED_MODULE_1__.unblock)();
}

/***/ }),

/***/ "./src/vorple/output.js":
/*!******************************!*\
  !*** ./src/vorple/output.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addOutputFilter": () => (/* binding */ addOutputFilter),
/* harmony export */   "applyOutputFilters": () => (/* binding */ applyOutputFilters),
/* harmony export */   "removeOutputFilter": () => (/* binding */ removeOutputFilter)
/* harmony export */ });
/**
 * Output filter methods.
 * 
 * @module output
 * @since 3.2.0
 */

const outputFilters = [];


/**
 * Registers a new output filter.
 * 
 * @param {function} filter 
 * @returns {function} A function that can be called to remove the filter
 */
function addOutputFilter( filter ) {
    outputFilters.push( filter );
    return () => removeOutputFilter( filter );
}


/**
 * Runs output through all output filters.
 * 
 * @param {string} originalOutput 
 * @private
 */
function applyOutputFilters( originalOutput, meta ) {
    let finalOutput = originalOutput;

    for( let i = 0; i < outputFilters.length; ++i ) {
        let filtered = outputFilters[ i ]( finalOutput, {
            ...meta,
            output: finalOutput,
            original: originalOutput
        });

        // a filter that returns false breaks the chain
        if( filtered === false ) {
            break;
        }

        if( typeof filtered === "string" ) {
            finalOutput = filtered;
        }
    }

    return finalOutput;
}


/**
 * Removes a filter from the registered output filters.
 * 
 * @param {function} filter The filter to remove
 */
function removeOutputFilter( filter ) {
    const index = outputFilters.indexOf( filter );

    if( index === -1 ) {
        return false;
    }

    outputFilters.splice( index, 1 );
    return true;
}



/***/ }),

/***/ "./src/vorple/prompt.js":
/*!******************************!*\
  !*** ./src/vorple/prompt.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addInputFilter": () => (/* binding */ addInputFilter),
/* harmony export */   "applyInputFilters": () => (/* binding */ applyInputFilters),
/* harmony export */   "clearCommandQueue": () => (/* binding */ clearCommandQueue),
/* harmony export */   "clearKeyQueue": () => (/* binding */ clearKeyQueue),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "history": () => (/* reexport safe */ _haven_prompt__WEBPACK_IMPORTED_MODULE_2__.history),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "queueCommand": () => (/* binding */ queueCommand),
/* harmony export */   "queueKeypress": () => (/* binding */ queueKeypress),
/* harmony export */   "removeInputFilter": () => (/* binding */ removeInputFilter),
/* harmony export */   "setPrefix": () => (/* binding */ setPrefix),
/* harmony export */   "setValue": () => (/* binding */ setValue),
/* harmony export */   "submit": () => (/* binding */ submit),
/* harmony export */   "unhide": () => (/* binding */ unhide)
/* harmony export */ });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _haven_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../haven/input */ "./src/haven/input.js");
/* harmony import */ var _haven_prompt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../haven/prompt */ "./src/haven/prompt.js");
/* harmony import */ var _vorple__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vorple */ "./src/vorple/vorple.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug */ "./src/vorple/debug.js");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layout */ "./src/vorple/layout.js");
/**
 * @module prompt
 */








const inputFilters = [];
const commandQueue = [];
const keyQueue = [];


/**
 * If there is a command waiting in the queue, submit it to the parser.
 * The command is then removed from the queue.
 */
function runCommandQueue() {
    if( commandQueue.length > 0 ) {
        const command = commandQueue.shift();

        submit( command.cmd, command.silent );
        return false;
    }
}


/**
 * If there is a keypress waiting in the queue, send it to the parser.
 * The key is then removed from the queue.
 * 
 * @since 3.2.0
 */
function runKeyQueue() {
    if( keyQueue.length > 0 ) {
        const key = keyQueue.shift();
        _haven_input__WEBPACK_IMPORTED_MODULE_1__.keypress.send({ keyCode: key.charCodeAt(0), force: true });
        return false;
    }

    return true;
}


/**
 * Registers a new input filter.
 * 
 * @param {function} filter 
 * @returns {function} A function that can be called to remove the filter
 * @since 3.2.0
 */
function addInputFilter( filter ) {
    inputFilters.push( filter );
    return () => removeInputFilter( filter );
}


/**
 * Runs input through all input filters.
 * 
 * @param {string} originalInput 
 * @since 3.2.0
 * @private
 */
async function applyInputFilters( originalInput, meta ) {
    let finalInput = originalInput;

    // block the UI while filters run, to prevent the player from typing before the previous command has resolved
    (0,_layout__WEBPACK_IMPORTED_MODULE_5__.block)();

    for( let i = 0; i < inputFilters.length; ++i ) {
        let filtered = inputFilters[ i ]( finalInput, {
            ...meta,
            input: finalInput,
            original: originalInput,
            type: "line"
        });

        // resolve the value if the return value was a promise,
        // this leaves other values untouched
        try {
            filtered = await Promise.resolve( filtered );
        }
        catch( e ) {
            throw e;
        }
        finally {
            (0,_layout__WEBPACK_IMPORTED_MODULE_5__.unblock)();
        }

        switch( filtered ) {
            case undefined:
            case null:
            case true:
                // do nothing
                break;

            case false:
                // event cancelled!
                return false;

            default:
                const type = typeof filtered;

                if( type === "object" && filtered.then ) {
                    (0,_debug__WEBPACK_IMPORTED_MODULE_4__.error)( "Input filter promise resolved into another promise, which is not allowed" );
                }

                if( type === "string" ) {
                    finalInput = filtered;
                }
                else {
                    (0,_debug__WEBPACK_IMPORTED_MODULE_4__.error)( "Input filter returned a value of type " + type );
                }
                break;
        }
    }

    (0,_layout__WEBPACK_IMPORTED_MODULE_5__.unblock)();
    
    return finalInput;
}


/**
 * Clear the command queue.
 * 
 * @since 3.2.0
 */
function clearCommandQueue() {
    commandQueue.length = 0;
}


/**
 * Clear the keypress queue.
 * 
 * @since 3.2.0
 */
function clearKeyQueue() {
    keyQueue.length = 0;
}


/**
 * Manually hide the prompt. It won't be shown until unhide() is called.
 */
function hide() {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()( (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.get)() ).addClass( 'force-hidden' );
}


/**
 * Haven's history API
 */



/**
 * Hook into Haven's input listeners
 */
function init() {
    // Hook into the lineinput's ready event for passing commands from the queue.
    (0,_vorple__WEBPACK_IMPORTED_MODULE_3__.addEventListener)( 'expectCommand', runCommandQueue );

    // Run the key queue when the engine expects a keypress
    (0,_vorple__WEBPACK_IMPORTED_MODULE_3__.addEventListener)( "expectKeypress", runKeyQueue );
}


/**
 * Add a command to the command queue. If the line input is ready, execute
 * the command immediately.
 *
 * @param {string} cmd
 * @param {boolean} [silent=false]  If true, the command isn't shown on the
 *      screen. The result of the command will still print normally.
 */
function queueCommand( cmd, silent = false ) {
    commandQueue.push( {
        cmd: cmd,
        silent: !!silent
    } );

    if( (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.isReady)() ) {
        runCommandQueue();
    }
}


/**
 * Add a keypress to the command queue. If the engine is waiting for a keypress,
 * send it immediately.
 *
 * @param {string} key A one-character string containing the pressed character
 * @since 3.2.0
 */
function queueKeypress( key ) {
    keyQueue.push( key );

    if( (0,_haven_input__WEBPACK_IMPORTED_MODULE_1__.getMode)() === 'getkey' ) {
        runKeyQueue();
    }
}


/**
 * Removes a filter from the registered input filters.
 * 
 * @param {function} filter The filter to remove
 * @since 3.2.0
 */
function removeInputFilter( filter ) {
    const index = inputFilters.indexOf( filter );

    if( index === -1 ) {
        return false;
    }

    inputFilters.splice( index, 1 );
    return true;
}


/**
 * Set the prefix of the command prompt. The prefix is usually a greater-than
 * character (>) at the start of the command prompt.
 *
 * The currently active command prompt is changed, and the new prefix is used
 * for all future command prompts until changed again.
 *
 * @param prefix
 * @param {boolean} [html=false]  If true, the prefix is inserted into the DOM
 *   as HTML. Otherwise HTML is escaped and shown as-is.
 *
 *  @returns {string} The new prefix.
 */
function setPrefix( prefix, html = false ) {
    let newPrefix = prefix;

    if( !html ) {
        newPrefix = jquery__WEBPACK_IMPORTED_MODULE_0___default()( '<div>' ).text( prefix ).html();
    }

    _haven_prompt__WEBPACK_IMPORTED_MODULE_2__.prefix.set( newPrefix );

    return newPrefix;
}


/**
 * Set the lineinput's value.
 *
 * @param value
 */
function setValue( value ) {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()( (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.get)() ).find( '#lineinput-field' ).val( value );
}


/**
 * Trigger the submit event of the lineinput.
 *
 * @param {string|null} [command] The command to send, if null or left out
 *      the lineinput field's value is used.
 * @param {boolean} [silent=false]  If true, the command isn't shown on the
 *      screen. The result of the command will still print normally.
 */
function submit( command, silent = false ) {
    (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.sendCommand)( new CustomEvent( 'submit', { 
        detail: { 
            silent: !!silent,
            userAction: false
        }
    } ), command );
}


/**
 * Remove manual hiding of the prompt. It's called rather clumsily "unhide"
 * instead of "show" to stress that it only undoes what the hide() method did,
 * and it doesn't force the prompt to appear if it has been hidden or removed
 * by some other means.
 */
function unhide() {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()( (0,_haven_prompt__WEBPACK_IMPORTED_MODULE_2__.get)() ).removeClass( 'force-hidden' );
}

/***/ }),

/***/ "./src/vorple/vorple.js":
/*!******************************!*\
  !*** ./src/vorple/vorple.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addEventListener": () => (/* binding */ addEventListener),
/* harmony export */   "evaluate": () => (/* binding */ evaluate),
/* harmony export */   "getInformVersion": () => (/* binding */ getInformVersion),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "removeEventListener": () => (/* binding */ removeEventListener),
/* harmony export */   "requireVersion": () => (/* binding */ requireVersion),
/* harmony export */   "setInformVersion": () => (/* binding */ setInformVersion),
/* harmony export */   "triggerEvent": () => (/* binding */ triggerEvent)
/* harmony export */ });
/* harmony import */ var _haven_haven__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../haven/haven */ "./src/haven/haven.js");
/* harmony import */ var _haven_assets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../haven/assets */ "./src/haven/assets.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug */ "./src/vorple/debug.js");
/* harmony import */ var _prompt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prompt */ "./src/vorple/prompt.js");
/* harmony import */ var _haven__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./haven */ "./src/vorple/haven.js");
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../package.json */ "./package.json");
/* harmony import */ var _file__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./file */ "./src/vorple/file.js");
/* harmony import */ var _output__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./output */ "./src/vorple/output.js");
/**
 * @module vorple
 */











let informVersion;


/**
 * Containers for the custom event listeners.
 * @private
 */
const eventListeners = {
    init: [],
    expectCommand: [],
    submitCommand: [],
    expectKeypress: [],
    submitKeypress: [],
    quit: []
};


/**
 * Adds or removes one listener from one event.
 * 
 * @returns {boolean} False if trying to remove a listener that hasn't been registered, true otherwise 
 * @since 3.2.0
 * @private
 */
function addOrRemoveListener( eventName, listener, action ) {
    if( !eventName || typeof eventName === "function" ) {
        return (0,_debug__WEBPACK_IMPORTED_MODULE_2__.error)( `Event name missing when trying to ${action} an event listener` );
    }
  
    if( !eventListeners[ eventName ] ) {
        return (0,_debug__WEBPACK_IMPORTED_MODULE_2__.error)( `Tried to ${action} a listener to an unknown event ${eventName}` );
    }

    if( typeof listener !== "function" ) {
        return (0,_debug__WEBPACK_IMPORTED_MODULE_2__.error)( `Missing callback function when trying to ${action} listener for event ${eventName}` );
    }

    if( action === "add" ) {
        eventListeners[ eventName ].push( listener );
        return true;
    }
    else {
        const index = eventListeners[ eventName ].indexOf( listener );

        if( index === -1 ) {
            return false;
        }

        eventListeners[ eventName ].splice( index, 1 );
        return true;
    }
}


/**
 * Converts a number in scientific notation (e.g. 1e+30) to a decimal string.
 *
 * From http://stackoverflow.com/a/1685917
 *
 * @param {number} x
 * @returns {string}
 * @private
 */
function eToInt( x ) {
    let e;

    if( Math.abs( x ) < 1.0 ) {
        e = parseInt( x.toString().split( 'e-' )[ 1 ] );
        if( e ) {
            x *= Math.pow( 10, e - 1 );
            x = '0.' + (new Array( e )).join( '0' ) + x.toString().substring( 2 );
        }
    } else {
        e = parseInt( x.toString().split( '+' )[ 1 ] );
        if( e > 20 ) {
            e -= 20;
            x /= Math.pow( 10, e );
            x += (new Array( e + 1 )).join( '0' );
        }
    }

    return x;
}


/**
 * Registers a listener for an event. See "Filters and event listeners" in the documentation for details.
 * 
 * @param {string|string[]} eventNames The event name or an array of event names where to add the listener
 * @param {function} listener The listener to register
 * @returns {function} A function that can be called to remove the listeners
 * @since 3.2.0
 */
function addEventListener( eventNames, listener ) {
    if( !Array.isArray( eventNames ) ) {
        eventNames = [ eventNames ];
    }

    eventNames.forEach( name => addOrRemoveListener( name, listener, "add" ) );

    return () => removeEventListener( eventNames, listener );
}


/**
 * Evaluates JavaScript code and writes the return value and its type to the
 * virtual filesystem for the story file to read.
 *
 * @param {string} filename
 */
function evaluate( code ) {
    /**
     * Stringify a value, or return null if the value can't be stringified
     * 
     * @private
     */
    const safeStringify = function( value ) {
        try {
            return JSON.stringify( value );
        }
        catch( e ) {
            return null;
        }
    };

    let retval;

    const header = getHeader( code );

    code = code.substr( header.length );

    (0,_debug__WEBPACK_IMPORTED_MODULE_2__.log)( 'Evaluating: ' + code );

    let i7type = "nothing";

    // Evaluate the JavaScript code.
    try {
        retval = new Function( "'use strict';\n" + code )();
    }
    catch(e) {
        (0,_debug__WEBPACK_IMPORTED_MODULE_2__.error)( 'JavaScript code from story file threw an error: ' + e.message + '\n\n' + code );
    }

    const type = typeof retval;

    // build the return value
    if( type === 'undefined' ) {
        (0,_debug__WEBPACK_IMPORTED_MODULE_2__.log)( 'The code did not return anything' );
        return;
    }
    else if( type === 'string' ) {
        retval = '"' + retval + '"';
        i7type = "text";
    }
    else if( type === 'function' || type === 'symbol' ) {
        retval = retval.toString();
        i7type = "function";
    }
    else if( typeof Set !== 'undefined' && retval instanceof Set ) {
        retval = safeStringify( Array.from( retval ) );
        i7type = "list";
    }
    else if( retval === Infinity ) {
        retval = 'Infinity';
        i7type = "infinity";
    }
    else if( retval === -Infinity ) {
        retval = '-Infinity';
        i7type = "infinity";
    }
    else if( retval !== retval ) {   // NaN !== NaN
        retval = 'NaN';
        i7type = "NaN";
    }
    else if( type === "boolean" ) {
        retval = String( retval );
        i7type = "truth state";
    }
    else if( type === 'number' ) {
        if( Math.abs( retval ) > 1e20 ) {   // more than 20 digits are displayed in scientific notation
            retval = eToInt( retval );
        }
        else {
            retval = "" + retval;
        }
        i7type = "number";
    }
    else {
        retval = safeStringify( retval );

        if( retval ) {
            const firstChar = retval.charAt( 0 );

            if( firstChar === "[" ) {
                i7type = "list";
            }
            else if( firstChar === "{" ) {
                i7type = "object";
            }
        }
    }

    (0,_debug__WEBPACK_IMPORTED_MODULE_2__.log)( `Return value (${i7type}): ${retval}` );

    (0,_file__WEBPACK_IMPORTED_MODULE_6__.write)(
        _file__WEBPACK_IMPORTED_MODULE_6__.JS_RETURN_VALUE_TYPE_FILENAME,
        i7type,
        {
            cwd: _file__WEBPACK_IMPORTED_MODULE_6__.VORPLE_PATH
        }
    );

    (0,_file__WEBPACK_IMPORTED_MODULE_6__.write)(
        _file__WEBPACK_IMPORTED_MODULE_6__.JS_RETURN_VALUE_FILENAME,
        retval,
        {
            cwd: _file__WEBPACK_IMPORTED_MODULE_6__.VORPLE_PATH
        }
    );
}


/**
 * Inform 7 adds the game's IFID to the text file which we must remove
 * before evaluating the actual content. We'll use the same header
 * to build the response file to make Inform think it's its own file.
 *
 * @param {string} content  The contents of the file
 * @private
 */
function getHeader( content ) {
    if( content.charAt( 0 ) === '*' ) {
        return content.substr( 0, content.indexOf( '\n' ) + 1 );
    }

    return "";
}


/**
 * Returns the Inform version, detected at handshake.
 * Before the handshake the value is undefined.
 * 
 * @returns {number|undefined} 6 or 7
 * @since 3.2.0
 */
function getInformVersion() {
    return informVersion;
}


/**
 * Initializes and starts Vorple.
 */
async function init() {
    // use Haven's init listeners to trigger our own listeners
    (0,_haven_assets__WEBPACK_IMPORTED_MODULE_1__.addCallback)( async() => { 
        await triggerEvent( 'init' );
    });

    // initialize submodules
    (0,_prompt__WEBPACK_IMPORTED_MODULE_3__.init)();
    await (0,_file__WEBPACK_IMPORTED_MODULE_6__.init)();

    // start up Haven
    (0,_haven_haven__WEBPACK_IMPORTED_MODULE_0__.start)({
        // container where the interpreter will be embedded
        container: vorple.options.container || "#vorple",

        // we use Vorple's custom prompt, not what the engine provides
        enginePrompt: false,

        // ignore Inform built-in font family features
        engineFontFamily: false,

        // use Glk's sendLine as the input function
        engineInputFunction: window.Glk.sendLine,

        // input and output filter functions
        filters: {
            input: _prompt__WEBPACK_IMPORTED_MODULE_3__.applyInputFilters,
            output: _output__WEBPACK_IMPORTED_MODULE_7__.applyOutputFilters
        },

        // have Haven trigger listeners
        hooks: {
            expectCommand: () => { triggerEvent( 'expectCommand' ); },
            expectKeypress: () => { triggerEvent( 'expectKeypress' ); },
            quit: () => { triggerEvent( 'quit' ); },
            submitCommand: meta => triggerEvent( 'submitCommand', meta ),
            submitKeypress: meta => triggerEvent( 'submitKeypress', meta )
        },

        // the function that loads the story file
        loadStoryFile: _haven__WEBPACK_IMPORTED_MODULE_4__.loadStoryFile, 

        // user-provided options
        options: {
            ...vorple.options,
            autosave: false,
            engineColors: false
        },

        // the callback that starts the interpreter after assets have loaded
        startEngine: _haven__WEBPACK_IMPORTED_MODULE_4__.initQuixe,

        // Glulx has Unicode support
        unicode: true
    });
}


/**
 * Removes a registered event listener.
 * 
 * @param {string|string[]} [eventNames] The event name or an array of event names from where to remove the listener.
 * Leaving this parameter out completely (i.e. passing the listener function as the first and only parameter)
 * removes the listener from all events where it's been registered.
 * @param {function} listener The listener to remove
 * @returns {boolean} True if the listener was removed from at least one event
 * @since 3.2.0
 */
function removeEventListener( eventNames, listener ) {
    // if the first parameter is a function, remove all listeners
    if( typeof eventNames === "function" ) {
        listener = eventNames;
        eventNames = Object.keys( eventListeners );
    }
    else if( !Array.isArray( eventNames ) ) {
        eventNames = [ eventNames ];
    }

    // if an empty array was passed, the operation is still successful even though there's nothing to do
    if( eventNames.length === 0 ) {
        return true;
    }

    // return true if at least one of the events was removed
    return eventNames.map( name => addOrRemoveListener( name, listener, "remove" ) ).includes( true );
}


/**
 * Require a minimum version of Vorple. Minor updates are accepted if
 * they're not specified in the request. In other words, if version "3.1"
 * is requested, then any Vorple version below 3.2 (3.1, 3.1.1, 3.1.2 etc)
 * will pass. If version "3" is requested, every version 3.x.x will pass.
 *
 * If an optional callback is passed to the function, it will be run with
 * one boolean parameter: true if version matches, false otherwise.
 * Otherwise an error is thrown if the version doesn't match.
 *
 * @param {string} requiredVersion  The minimum version of Vorple that's required.
 * @param {function} [callback]  A custom callback
 * @returns {boolean} True if version matches
 */
function requireVersion( requiredVersion, callback ) {
    const thisVer = _package_json__WEBPACK_IMPORTED_MODULE_5__.version.split( '.' ).map( str => Number( str ) );
    const reqVer = ("" + requiredVersion).split( '.' ).map( str => Number( str ) );
    const cb = callback || (
        match => {
            if( !match ) {
                (0,_debug__WEBPACK_IMPORTED_MODULE_2__.error)( `Vorple version ${requiredVersion} was requested, but Vorple is at version ${_package_json__WEBPACK_IMPORTED_MODULE_5__.version}` );
            }
        });

    if( thisVer[ 0 ] < reqVer[ 0 ] ) {
        cb( false );
        return false;
    }

    if( thisVer[ 0 ] > reqVer[ 0 ] || reqVer.length === 1 ) {
        cb( true );
        return true;
    }

    if( thisVer[ 1 ] < reqVer[ 1 ] ) {
        cb( false );
        return false;
    }

    if( thisVer[ 1 ] > reqVer[ 1 ] || reqVer.length === 2 || thisVer.length === 2 ) {
        cb( true );
        return true;
    }

    if( thisVer[ 2 ] < reqVer[ 2 ] ) {
        cb( false );
        return false;
    }

    cb( true );
    return true;
}


/**
 * Sets the Inform version.
 * 
 * @param {number} version 
 * @since 3.2.0
 * @private
 */
function setInformVersion( version ) {
    informVersion = version;
}


/**
 * Runs all custom event listeners for the given event.
 * 
 * @param {string} eventName 
 * @param {object} [meta={}]
 * @since 3.2.0
 * @private
 */
async function triggerEvent( eventName, meta = {} ) {
    for( let i = 0; i < eventListeners[ eventName ].length; ++i ) {
        await eventListeners[ eventName ][ i ]({ ...meta, type: eventName });
    }
}

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = jQuery;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd define */
/******/ 	(() => {
/******/ 		__webpack_require__.amdD = function () {
/******/ 			throw new Error('define cannot be used indirect');
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	__webpack_require__("./node_modules/jquery/src/jquery.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=vorple.js.map